swagger: "2.0"
info:
  description: "APIs of Logistic Web Service"
  version: "1.0.0"
  title: "Logistic Web Service"
  contact:
    email: "logistic-as0b.onrender.com"
host: "logistic-as0b.onrender.com"
# localhost:8000
# https://logistic-as0b.onrender.com
basePath: "/api"
schemes:
- "http"
- "https"
tags:
- name: "orderSeal"
  description: "use to group orders with same distination"
- name: "auth"
  description: "Endpoint Authentication"
- name: "auth-customer"
  description: "Endpoint Authentication"
- name: "about"
  description: "Endpoint AboutUs"
- name: "contactUs"
  description: "Endpoint ContactUs"
- name: "tracking"
  description: "Tracking feature"
- name: "public"
  description: "Public assets of web service"
- name: "commitment"
  description: "Endpoint Commitment"
- name: "subCommitment"
  description: "Endpoint SubCommitment"
- name: "partner"
  description: "Endpoint Partner"
- name: "message"
  description: "Endpoint Message"
- name: "warehouse"
  description: "Endpoint Warehouse"
- name: "user"
  description: "Endpoint User"
- name: "car"
  description: "Endpoint Car"
- name: "prohibited-product"
  description: "Endpoint Prohibited Product"
- name: "road"
  description: "Endpoint Road"
- name: "bill"
  description: "Endpoint Bill"
- name: "participant"
  description: "Endpoint Participant"
- name: "order"
  description: "Endpoint Order"
- name: "orderIssues"
  description: "Endpoint OrderIssues"
- name: "product"
  description: "Endpoint Product"
- name: "career"
  description: "Endpoint Career"
- name: "department"
  description: "Endpoint Department"
- name: "applicant"
  description: "Endpoint Applicant"
- name: "feature"
  description: "Endpoint Feature"
- name: "consultancy"
  description: "Endpoint Consultancy"
- name: "notification"
  description: "Endpoint Notification for user's realtime interaction"
- name: "staff"
  description: "Endpoint Staff"
- name: "quote" 
  description: "Endpoint Quote"
- name: "service"
  description: "Endpoint Service"
- name: "distance"
  description: "Endpoint Distance"
- name: "price"
  description: "Endpoint Price"
- name: "priceList"
  description: "Endpoint PriceList"
- name: "customer"
  description: "Endpoint Customer"
- name: "turnover"
  description: "Endpoint Turnover"
- name: "carFleet"
  description: "Endpoint Carfleet"
- name: "carRegistration"
  description: "Endpoint Carregistration"
- name: 'carriageContract'
  description: "Endpoint carriageContract"
- name: "carrepair"
  description: "Endpoint carrepair"
- name: "notificationtocarfleet"
  description: "Endpoint Notification"
- name: "blog"
  description: "Endpoint Blog"
- name: "excel"
  description: "Endpoint exportExcel"
- name: "individual-contract"
  description: "Endpoint individual-contract"
- name: "business-contract"
  description: "Endpoint business-contract"
- name: "totalcost"
  description: "Endpoint totalcost"
- name: "tax"
  description: "Endpoint tax"
- name: "insurance"
  description: "Endpoint insurance"
- name: "deliveryreport"
  description: "Endpoint deliveryreport"
- name: "discount"
  description: "Endpoint Discount"
- name: "suggest"
  description: "Endpoint Suggest"
- name: "shippingcost"
  description: "Endpoint shippingcost"
- name: "bankAccount"
  description: "Endpoint bankAccount"
- name: "orderNotification"
  description: "Endpoint orderNotification"    
- name : "compare-review"  
  description: "Endpoint compare-review"
- name: "policy"
  description: "Endpoint policy"  
- name: "post-office"
  description: "Endpoint post office"     
- name: "supervision"
  description: "order supervision"
- name: "shipper"
  description: "Endpoint shipper" 
- name: "driver-task"
  description: "admin create task for driver"
- name: "fee"
  description: "admin create fee VAT, fuel fee" 
- name: "strength"
  description: "Endpoint strength"   
- name: "careerLife"
  description: "Endpoint careerLife" 
- name: "service-price-list"  
  description: "Endpoint careerLife"
- name: "LifeStyle"  
  description: "Endpoint LifeStyle"
- name: "ChatInfo"  
  description: "Endpoint ChatInfo"
- name: "SocialNetwork"  
  description: "Endpoint SocialNetwork"
paths:
  /admin/staff/get-login-offline-code:
    get: 
      tags:
        - "staff"
      summary: Admin get login offine code of staff
      produces:
        - application/json     
      parameters:
      - in: query
        name: staffCode
        type: string
        required: true
        description: staff code
      responses:
        200: 
          description: get login offine code of staff successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "get login offine code of staff successfully",
              "data": {
                "code": "string",
              }
            }
        400:
          description: get login offine code of staff failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "string",
            }
      security:
      - ApiKeyAuth: []
  /admin/driver-task/car-next-destination:
    get: 
      tags:
        - "driver-task"
      summary: Admin get car next destination
      produces:
        - application/json     
      parameters:
      - in: query
        name: car_plate
        type: string
        required: true
        description: car plate
      responses:
        200: 
          description: get car next destination successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "get car next destination successfully",
              "total" : 0,
              "data": [{
                "warehouseId": "string",
                "postOfficeCode": "string",
              }]
            }
        400:
          description: Get car next destination failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "string",
            }
      security:
      - ApiKeyAuth: []

  /admin/driver-task/scan:
    patch:
      tags:
        - "driver-task"
      summary: "Admin scan a driver task when car comming/leave in post office/warehouse"
      produces:
        - multipart/form-data
      parameters:
        - in: formData
          name: type
          type: string
          default: 'car_incoming_post_office'
          enum : ['car_incoming_post_office','car_leave_post_office','car_incoming_warehouse','car_leave_warehouse',]
          required: true  
        - in: formData
          name: car_plate
          type: string
          default: 'string'
          required: true
          description: car plate.
        - in: formData
          name: warehouseId
          type: string
          description: objectId of warehouse in mongoose; requried if type = car_incoming_warehouse/car_leave_warehouse .
        - in: formData
          name: postOfficeCode
          type: string
          description: code of post office; requried if type = car_incoming_post_office/car_leave_post_office .     
      responses:
        200:
          description: Scan driver task successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Admin scan driver task",
              "data": {
                "type": "string",
                "status": "string",
                "driver": "string",
                "car": "string",
                "comfirmStaff": "string",
                "warehouse": "string",
                "sealCodes": [],
                "orderIds": [],
                "destinations": [
                ],
                "_id": "string",
              }
            }
        400:
          description: Admin scan driver task failed.
          schema:
            type: object
            example: {
             
            }
      security:
        - ApiKeyAuth: []
  /admin/driver-task/{id}:
    delete: 
      tags:
        - "driver-task"
      summary: Admin delete 1 driver task 
      produces:
        - application/json     
      parameters:
      - in: path
        name: id
        type: string
        required: true
        description: objectId mongoose of driver task
      responses:
        200: 
          description: Delete driver task successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete driver task successfully",
              "total" : 0,
              "data": {
                "type": "string",
                "status": "string",
                "driver": "string",
                "car": "string",
                "comfirmStaff": "string",
                "warehouse": "string",
                "sealCodes": [],
                "orderIds": [],
                "destinations": [
                ],
                "_id": "string",
              }
            }
        400:
          description: Delete driver task failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "string",
            }
      security:
      - ApiKeyAuth: []
    get: 
      tags:
        - "driver-task"
      summary: Admin get 1 driver task 
      produces:
        - application/json     
      parameters:
      - in: path
        name: id
        type: string
        required: true
        description: objectId mongoose of driver task
      responses:
        200: 
          description: Get driver task successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "get driver task successfully",
              "total" : 0,
              "data": {
                "type": "string",
                "status": "string",
                "driver": "string",
                "car": "string",
                "comfirmStaff": "string",
                "warehouse": "string",
                "sealCodes": [],
                "orderIds": [],
                "destinations": [
                ],
                "_id": "string",
              }
            }
        400:
          description: Get driver task failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "string",
            }
      security:
      - ApiKeyAuth: []
    put:
      tags:
        - "driver-task"
      summary: "Admin update a driver task in warehouse"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: objectId mongoose of driver task
        - in: formData
          name: type
          type: string
          default: 'send_order'
          enum : ['send_order','get_order']
          required: true  
        - in: formData
          name: car_plate
          type: string
          default: 'string'
          required: true
          description: car plate.
        - in: formData
          name: warehouseId
          type: string
          default: 'string'
          required: true
          description: objectId of warehouse in mongoose.
        - in: formData
          name: driverCode
          type: string
          default: 'string'
          required: true
          description: code of staff.
        - in: formData
          name: destinations
          type: string
          default: 'postOfficeCode1 postOfficeCode2'
          required: true,
          description: This string include many postOfficeCodes, separated by 1 space
        - in: formData
          name: orderIds
          type: string
          example: 'orderId1 orderId2'
          description: This string include many orderIds, separated by 1 space; requried if type = 'get_order'.  
        - in: formData
          name: sealCodes
          type: string
          example : 'sealCode1 sealCode2'
          description: This string include many sealCodes, separated by 1 space; requried if type = 'send_order'.          
      responses:
        200:
          description: Update new driver task successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Admin update a new driver task in warehouse",
              "data": {
                  "type": "string",
                  "status": "string",
                  "driver": "string",
                  "car": "string",
                  "comfirmStaff": "string",
                  "warehouse": "string",
                  "sealCodes": [],
                  "orderIds": [],
                  "destinations": [
                  ],
                  "_id": "string",
                }
            }
        400:
          description: Admin update a driver task failed.
          schema:
            type: object
            example: {
             
            }
      security:
        - ApiKeyAuth: []
  /admin/driver-task:
    post:
      tags:
        - "driver-task"
      summary: "Admin create a driver task in warehouse"
      produces:
        - multipart/form-data
      parameters:
        - in: formData
          name: type
          type: string
          default: 'send_order'
          enum : ['send_order','get_order']
          required: true  
        - in: formData
          name: car_plate
          type: string
          default: 'string'
          required: true
          description: car plate.
        - in: formData
          name: warehouseId
          type: string
          default: 'string'
          required: true
          description: objectId of warehouse in mongoose.
        - in: formData
          name: driverCode
          type: string
          default: 'string'
          required: true
          description: code of staff.
        - in: formData
          name: destinations
          type: string
          default: 'postOfficeCode1 postOfficeCode2'
          required: true,
          description: This string include many postOfficeCodes, separated by 1 space
        - in: formData
          name: orderIds
          type: string
          example: 'orderId1 orderId2'
          description: This string include many orderIds, separated by 1 space; requried if type = 'get_order'.  
        - in: formData
          name: sealCodes
          type: string
          example : 'sealCode1 sealCode2'
          description: This string include many sealCodes, separated by 1 space; requried if type = 'send_order'.          
      responses:
        200:
          description: Create new driver task successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Admin create a new driver task in warehouse",
              "data": {
                  "type": "string",
                  "status": "string",
                  "driver": "string",
                  "car": "string",
                  "comfirmStaff": "string",
                  "warehouse": "string",
                  "sealCodes": [],
                  "orderIds": [],
                  "destinations": [
                  ],
                  "_id": "string",
                }
            }
        400:
          description: Admin create a driver task failed.
          schema:
            type: object
            example: {
             
            }
      security:
        - ApiKeyAuth: []
    get: 
      tags:
        - "driver-task"
      summary: Admin get driver-tasks 
      produces:
        - application/json     
      parameters:
      - in: query
        name: page
        type: integer
        required: true
        default : 1
        description: number of page
      - in: query
        name: pageSize
        type: integer
        required: true
        description: limit of 1 page
        default : 20
      - in: query
        name: startDate
        type: string
        required: true
        default: '2020-07-23:00:10:00'
        description : start date with format yyyy-mm-dd:hh:mm:ss
      - in: query
        name: endDate
        type: string
        required: true
        default: '2029-07-23:00:10:00'
        description : end date with format yyyy-mm-dd:hh:mm:ss
      - in: query
        name: warehouseId
        type: string
        description: objectId mongoose of warehouse, required if want to get in 1 warehouse
      - in: query
        name: driverId
        type: string
        description: objectId mongoose of staff, required if want to get in 1 staff is driver
      responses:
        200: 
          description: get driver task successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "get driver task successfully",
              "total" : 0,
              "data": [{
                "type": "string",
                "status": "string",
                "driver": "string",
                "car": "string",
                "comfirmStaff": "string",
                "warehouse": "string",
                "sealCodes": [],
                "orderIds": [],
                "destinations": [
                ],
                 "_id": "string",
              }]
            }
        400:
          description: Get driver task failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "string",
            }
      security:
      - ApiKeyAuth: []
  /admin/orderSeal/{id}:
    get: 
      tags:
        - "orderSeal"
      summary: Admin get 1 order seal 
      produces:
        - application/json     
      parameters:
      - in: path
        name: id
        type: string
        required: true
        description: objectId mongoose of order seal
      responses:
        200: 
          description: Get incoming successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "get order seal successfully",
              "total" : 0,
              "data": {
                "orders": [
                  {
                    "orderId": "string",
                    "status": "string",
                  }
                ],
                "code": "string",
                "isUsed" : boolean,
                "staffConfirm" : 'string',
                "warehouse" : 'string',
                "num_orders_in_seal" : 'string',
              }
            }
        400:
          description: Get order seal failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "string",
            }
      security:
      - ApiKeyAuth: []
    put:
      tags:
        - "orderSeal"
      summary: "Admin update order seal"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          type: string
          default: 'string'
          required: true
          description: objectId of order seal in mongoose.
        - in: formData
          name: warehouse
          type: string
          default: 'string'
          required: true
          description: objectId of warehouse in mongoose.
        - in: formData
          name: orderIds
          type: string
          default: 'orderId1 orderId2'
          description: This string include many orderIds, separated by 1 space.
          required: true    
      requestBody:
        content: 
           multipart/form-data:
            schema:            
              type: object
              properties:      
                warehouse:           
                  type: string
                orderIds:           
                  type: string            
      responses:
        200:
          description: Admin update order seal successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Admin update order seal in warehouse",
              "data": {
                  "orders": [
                  {
                    "orderId": "string",
                    "status": "string",
                  }
                  ],
                  "code": "string",
                  "isUsed" : boolean,
                  "staffConfirm" : 'string',
                  "warehouse" : 'string',
                  "num_orders_in_seal" : 'string',
                }
            }
        400:
          description: Admin update order seal in warehouse.
          schema:
            type: object
            example: {
             
            }
      security:
        - ApiKeyAuth: []
    delete: 
      tags:
        - "orderSeal"
      summary: Admin delete 1 order seal 
      produces:
        - application/json     
      parameters:
      - in: path
        name: id
        type: string
        required: true
        description: objectId mongoose of order seal
      responses:
        200: 
          description: delete order seal successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "delete order seal successfully",
              "total" : 0,
              "data": {
                "orders": [
                  {
                    "orderId": "string",
                    "status": "string",
                  }
                ],
                "code": "string",
                "isUsed" : boolean,
                "staffConfirm" : 'string',
                "warehouse" : 'string',
                "num_orders_in_seal" : 'string',
              }
            }
        400:
          description: delete order seal failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "string",
            }
      security:
      - ApiKeyAuth: []
  /admin/orderSeal:
    post:
      tags:
        - "orderSeal"
      summary: "Admin create a new order seal in warehouse"
      produces:
        - multipart/form-data
      parameters:
        - in: formData
          name: warehouse
          type: string
          default: 'string'
          required: true
          description: objectId of warehouse in mongo.
        - in: formData
          name: orderIds
          type: string
          default: 'orderId1 orderId2'
          description: This string include many orderIds, separated by 1 space.
          required: true    
      requestBody:
        content: 
           multipart/form-data:
            schema:            
              type: object
              properties:      
                warehouse:           
                  type: string
                orderIds:           
                  type: string            
      responses:
        200:
          description: Create new order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Admin create a new order seal in warehouse",
              "data": {
                  "orders": [
                  {
                    "orderId": "string",
                    "status": "string",
                  }
                  ],
                  "code": "string",
                  "isUsed" : boolean,
                  "staffConfirm" : 'string',
                  "warehouse" : 'string',
                  "num_orders_in_seal" : 'string',
                }
            }
        400:
          description: Admin create a new order seal in warehouse.
          schema:
            type: object
            example: {
             
            }
      security:
        - ApiKeyAuth: []
    get: 
      tags:
        - "orderSeal"
      summary: Admin get orderSeals 
      produces:
        - application/json     
      parameters:
      - in: query
        name: page
        type: integer
        required: true
        description: number of page
      - in: query
        name: pageSize
        type: integer
        required: true
        description: limit of 1 page
      - in: query
        name: warehouse
        type: string
        description: objectId mongoose of warehouse, can empty
      - in: query
        name: isUsed
        type: boolean
        description: order seal is in use
      - in: query
        name: searchKey
        type: string
        description: search code of order seal
      responses:
        200: 
          description: get order seal successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "get order seal successfully",
              "total" : 0,
              "data": [{
                "orders": [
                  {
                    "orderId": "string",
                    "status": "string",
                  }
                ],
                "code": "string",
                "isUsed" : boolean,
                "staffConfirm" : 'string',
                "warehouse" : 'string',
                "num_orders_in_seal" : 'string',
              }]
            }
        400:
          description: Get order seal failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "string",
            }
      security:
      - ApiKeyAuth: [] 
  /admin/order/in-warehouse:
     get: 
      tags:
        - "order"
      summary: Admin get orders in warehouse 
      produces:
        - application/json     
      parameters:
      - in: query
        name: page
        type: integer
        required: true
        description: number of page, value > 0
      - in: query
        name: pageSize
        type: integer
        required: true
        description: limit of 1 page, , value > 0
      - in: query
        name: warehouse
        type: string
        required: true
        description: objectId mongoose of warehouse, can empty
      - in: query
        name: postOfficeCode
        type: string
        description: code of post office, can empty
      responses:
        200: 
          description: get order in warehouse successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "get orders in warehouse successfully",
              "total" : 0,
              "data": [{
              }]
            }
        400:
          description: Get order in warehouse failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "string",
            }
      security:
      - ApiKeyAuth: []
  /admin/order/update-postoffice/{orderId}:
    patch:
      tags:
        - order
      summary: "Customer create a new order"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: orderId
          type: string
          description: 'id of order' 
          required: true
          default: 'string'
        - in: formData
          name: origin
          type: string
          default: 'string'
          required: true
          description : "post office code"
        - in: formData
          name: destination
          type: string
          default: 'string'
          required: true
          description : "post office code"
      requestBody:
        content: 
           multipart/form-data:
            schema:            
              type: object
              properties:      
                origin:           
                  type: string
                destination:           
                  type: string
      responses:
        200:
          description: Update order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update order successfully.",
              "data": {
              }
            }
        400:
          description: Update order failed.
          schema:
            type: object
            example: {
             
            }
      security:
        - ApiKeyAuth: []
  /admin/order/supervision-incoming/{postCode}:
    get: 
      tags:
        - "supervision"
      summary: Get report supervision incoming order 
      produces:
        - application/json     
      parameters:
      - in: params
        name: postCode
        type: string
        description: 'code of destination postoffice' 
        required: true
      - in: query
        name: beginDate
        type: string
        description: begin time of incoming_postoffice in tracking
      - in: query
        name: endDate
        type: string
        description: end time of incoming_postoffice in tracking
        required: true 
      - in: query
        name: originPostOffice
        type: string
        description: info of origin postoffice same as name, district, code
      - in: query
        name: destinationPostOffice
        type: string
        description: info of origin postoffice same as name, district, code
      responses:
        200: 
          description: Get incoming successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get incoming",
              "data": {
                "total": number,
                "notArrived": number,
                "totalArrived": number,
                "notDelivery": number,
                "notSigned": number,
                "notRecorded": number,
                "notSent": number,
              }
            }
        400:
          description: Get COD failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order not found",
            }
      security:
      - ApiKeyAuth: []
  /admin/order/supervision-incoming/{postCode}/detail:
    get: 
      tags:
        - "supervision"
      summary: Get report detail of supervision incoming order 
      produces:
        - application/json     
      parameters:
      - in: params
        name: postCode
        type: string
        description: 'code of destination postoffice' 
        required: true
      - in: query
        name: beginDate
        type: string
        description: begin time of incoming_postoffice in tracking
      - in: query
        name: endDate
        type: string
        description: end time of incoming_postoffice in tracking
        required: true 
      - in: query
        name: originPostOffice
        type: string
        description: info of origin postoffice same as name, district, code
      - in: query
        name: destinationPostOffice
        type: string
        description: info of origin postoffice same as name, district, code
      responses:
        200: 
          description: Get incoming successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get detail incoming",
              "data": {
                "filteredList": [
                  {
                    "orderId": "string",
                    "sendingPost": "string",
                    "sendingDate": "string",
                    "nextPost": "string",
                    "weight": "string",
                  }
                ],
                "count": number,
              }
            }
        400:
          description: Get COD failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order not found",
            }
      security:
      - ApiKeyAuth: []
  /admin/order/finance/cod/collecting:
    get:
      tags:
        - order
      summary: admin get COD not collected by cashier
      consumes:
        - application/json
      parameters:
      - in: query
        name: orderIds
        type: string
        description: order ID or a list of order IDs
      - in: query
        name: beginSendTime
        type: date
        description: Start time of order creation
      - in: query
        name: endSendTime
        type: date
        description: End time of order creation
      - in: query
        name: beginSignTime
        type: date
        description: Start time of successful delivery acknowledgment
      - in: query
        name: endSignTime
        type: date
        description: End time of successful delivery acknowledgment
      - in: query
        name: department
        type: string
        description: Name of the department where the shipper is located
      - in: query
        name: carFleet
        type: string
        description: Name of the car fleet where the shipper is located
      - in: query
        name: customer
        type: string
        description: Name of customer
      - in: query
        name: shipper
        type: string
        description: Name of shipper
      - in: query
        name: cashPayment
        type: string
        description: Payment method
      - in: query
        name: lastCodStatus
        type: string
        description: Current status of COD status
      responses: 
        200: 
          description: Get orders by delivery staff successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orders by delivery staff successfully",
              "data": [
                {
                  "staff": {
                    "office": string,
                    "loginAttempts": number,
                    "_id": "string",
                    "name": "string",
                    "address": "string",
                    "staff_type": "string",
                    "staff_position": "string",
                    "department": "string",
                    "car_fleet": "string",
                    "createdAt": "string",
                    "updatedAt": "string",
                    "__v": number,
                  },
                  "countPP": number,
                  "moneyPP": number,
                  "countCC": number,
                  "moneyCC": number,
                  "cod": number,
                  "total": number,
                },
              ]
            }
        400:
          description: Get COD failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "COD not found",
            }
      security:
      - ApiKeyAuth: []
    put:
      tags:
        - order
      summary: cashier collect COD
      consumes:
        - application/json
      parameters:
      - in: query
        name: orderIds
        type: string
        description: order ID or a list of order IDs
      - in: query
        name: beginSendTime
        type: date
        description: Start time of order creation
      - in: query
        name: endSendTime
        type: date
        description: End time of order creation
      - in: query
        name: beginSignTime
        type: date
        description: Start time of successful delivery acknowledgment
      - in: query
        name: endSignTime
        type: date
        description: End time of successful delivery acknowledgment
      - in: query
        name: department
        type: string
        description: Name of the department where the shipper is located
      - in: query
        name: carFleet
        type: string
        description: Name of the car fleet where the shipper is located
      - in: query
        name: customer
        type: string
        description: Name of customer
      - in: query
        name: shipper
        type: string
        description: Name of shipper
      - in: query
        name: cashPayment
        type: string
        description: Payment method
      - in: query
        name: lastCodStatus
        type: string
        description: Current status of COD status
      responses: 
        200: 
          description: Collected COD successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Collected COD successfully",
            }
        400:
          description: Get COD failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "COD not found",
            }
      security:
      - ApiKeyAuth: []
  
  /admin/order/finance/cod/collected:
    get:
      tags:
        - order
      summary: admin get COD collected by cashier
      consumes:
        - application/json
      parameters:
      - in: query
        name: beginCodCollectedTime
        type: date
        description: Start time of COD collection
      - in: query
        name: endCodCollectedTime
        type: date
        description: End time of COD collection
      - in: query
        name: shipper
        type: string
        description: Name of shipper
      - in: query
        name: collectedCodStaff
        type: string
        description: Name of the COD collection staff
      - in: query
        name: cashPayment
        type: string
        description: Payment method
      - in: query
        name: lastCodStatus
        type: string
        description: Current status of COD status
      - in: query
        name: serial
        type: string,
        description: Serial number
      responses: 
        200: 
          description: Get collected COD successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get collected COD successfully",
              "data": [
                {
                  "time": "string",
                  "shipper": "string",
                  "collectedMoney": number,
                  "cod": number,
                  "serial": "string",
                  "cashPayment": [
                    "string",
                  ],
                  "collectedCodStaff": "string",
                },
              ]
            }
        400:
          description: Get COD failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "COD not found",
            }
      security:
      - ApiKeyAuth: []

  /admin/order/finance/cod/collected/detail:
    get:
      tags:
        - order
      summary: admin get COD collected detail
      consumes:
        - application/json
      parameters:
      - in: query
        name: beginCodCollectedTime
        type: date
        description: Start time of COD collection
      - in: query
        name: endCodCollectedTime
        type: date
        description: End time of COD collection
      - in: query
        name: shipper
        type: string
        description: Name of shipper
      - in: query
        name: collectedCodStaff
        type: string
        description: Name of the COD collection staff
      - in: query
        name: cashPayment
        type: string
        description: Payment method
      - in: query
        name: lastCodStatus
        type: string
        description: Current status of COD status
      - in: query
        name: serial
        type: string,
        description: Serial number
      responses: 
        200: 
          description: Get collected COD successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get collected COD successfully",
              "data": [
                {
                  "shipper": {
                    "_id": "string",
                    "name": "string",
                    "address": "string",
                    "staff_type": "string",
                    "staff_position": "string",
                    "department": "string",
                    "car_fleet": "string",
                    "createdAt": "string",
                    "updatedAt": "string",
                    "__v": number,
                    "office": "string",
                    "code": "string",
                    "loginAttempts": number,
                  },
                  "time_collected": "string",
                  "total": {
                    "string": {
                      "moneyPP": number,
                      "moneyCC": number,
                      "cod": number,
                      "count": number,
                    }
                  },
                  "table": [
                    {
                      "time": "string",
                      "orderId": "string",
                      "moneyPP": number,
                      "moneyCC": number,
                      "COD": number,
                    },
                  ]
                },
              ]
            }
        400:
          description: Get COD failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "COD not found",
            }
      security:
      - ApiKeyAuth: []
  /admin/order/finance/cod:
    get:
      tags:
        - order
      summary: admin get COD not collected by cashier
      consumes:
        - application/json
      parameters:
      - in: query
        name: beginSendTime
        type: date
        description: Start time of order creation
      - in: query
        name: endSendTime
        type: date
        description: End time of order creation
      - in: query
        name: beginSignTime
        type: date
        description: Start time of successful delivery acknowledgment
      - in: query
        name: endSignTime
        type: date
        description: End time of successful delivery acknowledgment
      - in: query
        name: shipper
        type: string
        description: Name of shipper
      - in: query
        name: destinationPostOffice
        type: string
        description: Name of the Postal Office where the package is sent
      - in: query
        name: cashPayment
        type: string
        description: Payment method
      - in: query
        name: lastCodStatus
        type: string
        description: Current status of COD status
      responses: 
        200: 
          description: Get orders by delivery staff successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orders by delivery staff successfully",
              "data": {
                "resolvedData": [
                  {
                    "shipper": "string",
                    "moneyPP": number,
                    "moneyCC": number,
                    "cod": number,
                    "total": number,
                    "moneyCollected": number,
                    "notCollected": number,
                    "count": number,
                    "postOffice": "string",
                    "codCollected": number,
                  },
                ],
                "totalData": {
                  "moneyPP": number,
                  "moneyCC": number,
                  "cod": number,
                  "total": number,
                  "moneyCollected": number,
                  "notCollected": number,
                  "count": number,
                  "codCollected": number,
                }
              }
            }
        400:
          description: Get COD failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "COD not found",
            }
      security:
      - ApiKeyAuth: []
  /admin/compare-review/time-up:
    get:
        tags:
          - compare-review
        summary: admin get all compare-review time-up
        responses:
          200:
            description: get all compare-review time-up successfully.
            schema:
              type: object
              example: {
                "success": true,
                "message": "get all compare-review time-up successfully.",
                "data": [
                  {
                    "_id": "string",
                    "customer": "string",
                    "order": "string",
                    "selected_date": "string",
                    "isSent": false,
                    "schedule_type": "string",
                    "createdAt": "string",
                    "updatedAt": "string",
                    "__v": 0,
                  },
                ]              
              }
          400:
            description: get all compare-review time-up failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "get all compare-review time-up failed.",
              }
        security:
        - ApiKeyAuth: []
  /admin/compare-review:
    get:
        tags:
          - compare-review
        summary: admin get all compare-review
        responses:
          200:
            description: get all compare-review successfully.
            schema:
              type: object
              example: {
                "success": true,
                "message": "get all compare-review successfully.",
                "data": [
                  {
                    "_id": "string",
                    "customer": "string",
                    "order": "string",
                    "selected_date": "string",
                    "isSent": false,
                    "schedule_type": "string",
                    "createdAt": "string",
                    "updatedAt": "string",
                    "__v": 0,
                  },
                ]                    
              }
          400:
            description: get all compare-review failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "get all compare-review time-up failed.",
              }
        security:
        - ApiKeyAuth: []
  /admin/compare-review/{id}/do-sendgmail:
    patch:
        tags:
          - compare-review
        summary: admin do compare-review and send gmail
        consumes:
          - application/json
        parameters:
        - in: path
          name: id
        responses:
          200:
            description: do compare-review and send gmail successfully.
            schema:
              type: object
              example: {
                "success": true,
                "message": "do compare-review and send gmail successfully.",              
              }
          400:
            description: udo compare-review and send gmail failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "do compare-review and send gmail failed.",
              }
        security:
        - ApiKeyAuth: []
  /admin/compare-review/{id}:
    delete:
        tags:
          - compare-review
        summary: admin delete compare-review
        consumes:
          - application/json
        parameters:
        - in: path
          name: id
        responses:
          200:
            description: delete compare-review successfully.
            schema:
              type: object
              example: {
                "success": true,
                "message": "delete compare-review successfully.",              
              }
          400:
            description: delete compare-review failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "delete compare-review failed.",
              }
        security:
        - ApiKeyAuth: []
  /compare-review/schedule_type:
    get : 
        tags:
          - compare-review
        summary: customer get compare-review schedule_type
        responses:
          200:
            description: get compare-review schedule_type successfully.
            schema:
              type: object
              example: {
                "success": true,
                "message": "get compare-review schedule_type successfully.",
                "data" : {
                  "schedule_type": "once_a_month",
                }
              }
          400:
            description: get compare-review schedule_type failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "get compare-review schedule_type failed.",
              } 
        security:
        - ApiKeyAuth: []
  /compare-review:
    patch:
        tags:
          - compare-review
        summary: customer update schedual type of compare-review
        consumes:
          - application/json
        parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              schedule_type:
                type: string
                enum: ['once_a_day', 'once_a_week',  'twice_a_week','three_times_a_week','once_a_month','twice_a_month']
        security:
        - ApiKeyAuth: []
        responses:
          200:
            description: update schedual type of compare-review successfully.
            schema:
              type: object
              example: {
                "success": true,
                "message": "update schedual type of compare-review successfully.",
                "data" : {
                  "_id": "id of compare-review",
                  "customer": "id of customer",
                  "orders": "[]",
                  "total_price": 0,
                  "isSent": false,
                  "schedule_type": "three_times_a_week",
                  "createdAt": "2023-06-08T04:58:56.271Z",
                  "updatedAt": "2023-06-08T07:03:50.965Z",
                  "__v": 0,
                  "selected_date": "2023-06-09T07:03:50.956Z",
                }
              }
          400:
            description: update schedual type of compare-review failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "update schedual type of compare-review failed.",
              }      
              
  /admin/policy:
    post:
        tags:
          - "policy"
        summary: create policy
        consumes:
          - application/json
        parameters:
        - in: body
          name: policy information
          required: true
          schema:
            type: object
            required: 
              - companyName
              - brc
              - issuedBy
              - privacyPolicy
            properties:
              companyName:
                type: string
              brc:
                type: string
              issuedBy:
                type: string
              privacyPolicy:
                type: string
              returnPolicy:
                type: object
                properties:
                  info:
                    type: array
                    items:
                      type: string
                  process:
                    type: array
                    items:
                      type: string
              complaints:
                type: object
                properties:
                  complaintTimeLimit:
                    type: array
                    items:
                      type: string
                  complaintResolutionTime:
                    type: array
                    items:
                      type: string
                  complaintTypes:
                    type: array
                    items:
                      type: object
                      properties:
                        serviceType:
                          type: string
                        responseTime:
                          type: string
                        resolutionTime:
                          type: string
              Compensation:
                type: object
                properties:
                  damagedGoods:
                    type: object
                    properties:
                      lost:
                        type: array
                        items:
                          type: string
                      damage:
                        type: array
                        items:
                          type: string
                      notice:
                        type: array
                        items:
                          type: string
                  operatingError:
                    type: array
                    items:
                      type: string
                  transportationQuality:
                    type: array
                    items:
                      type: object
                      properties:
                        category:
                          type: string
                        detail:
                          type: string
                        amount:
                          type: string
                  lossOfGoods:
                    type: object
                    properties:
                      regulation:
                        type: array
                        items:
                          type: string
                      noPriceDeclaration:
                        type: array
                        items:
                          type: string
                      priceDeclaration:
                        type: array
                        items:
                          type: object
                          properties:
                            case:
                              type: string
                            detail:
                              type: string
                      validDocument:
                        type: array
                        items:
                          type: string
                      compensation:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                            level:
                              type: string
                            value:
                              type: string
                      notice:
                        type: array
                        items:
                          type: string
                  disclaimer:
                    type: array
                    items:
                      type: string
                  information:
                    type: array
                    items:
                      type: string
                  payment:
                    type: array
                    items:
                      type: string
              privacy:
                type: object
                properties:
                  collect:
                    type: string
                  purpose:
                    type: object
                    properties:
                      info:
                        type: string
                      customer:
                        type: array
                        items:
                          type: string
                      company:
                        type: array
                        items:
                          type: string
                  disclosure:
                    type: array
                    items:
                      type: string
                  method:
                    type: string
                  acceptance:
                    type: string
              others:
                type: array
                items:
                  type: object
        responses:
          200: 
            description: Create new Policy successfully
            schema:
            type: object
            example: {
                "message": "Create new Policy successfully.",
                "data": {
                  "companyName": "string",
                  "brc": "string",
                  "issuedBy": "string",
                  "privacyPolicy": "string",
                  "returnPolicy": {
                    "info": [
                      "string",
                      "string",
                    ],
                    "process": [
                      "string",
                      "string",
                    ]
                  },
                  "complaints": {
                    "complaintTimeLimit": [
                      "string",
                      "string",
                    ],
                    "complaintResolutionTime": [
                      "string",
                      "string",
                    ],
                    "complaintTypes": [
                      {
                        "serviceType": "string",
                        "responseTime": "string",
                        "resolutionTime": "string",
                        "_id": "string",
                      },
                      {
                        "serviceType": "string",
                        "responseTime": "string",
                        "resolutionTime": "string",
                        "_id": "string",
                      }
                    ]
                  },
                  "Compensation": {
                    "damagedGoods": {
                      "lost": [
                        "string",
                        "string",
                      ],
                      "damage": [
                        "string",
                        "string",
                      ],
                      "notice": [
                        "string",
                        "string",
                      ]
                    },
                    "operatingError": [
                      "string",
                      "string",
                    ],
                    "transportationQuality": [
                      {
                        "category": "string",
                        "detail": "string",
                        "amount": "string",
                        "_id": "string",
                      },
                      {
                        "category": "Category 2",
                        "detail": "string",
                        "amount": "$200",
                        "_id": "string",
                      }
                    ],
                    "lossOfGoods": {
                      "regulation": [
                        "string",
                        "string",
                      ],
                      "noPriceDeclaration": [
                        "string",
                        "string",
                      ],
                      "priceDeclaration": [
                        {
                          "case": "string",
                          "detail": "string",
                          "_id": "string",
                        },
                        {
                          "case": "string",
                          "detail": "string",
                          "_id": "string",
                        }
                      ],
                      "validDocument": [
                        "string",
                        "string",
                      ],
                      "compensation": [
                        {
                          "type": "string",
                          "level": "string",
                          "value": "string",
                          "_id": "string",
                        },
                        {
                          "type": "string",
                          "level": "string",
                          "value": "string",
                          "_id": "string",
                        }
                      ],
                      "notice": [
                        "string",
                        "string",
                      ]
                    },
                    "disclaimer": [
                      "string",
                      "string",
                    ],
                    "information": [
                      "string",
                      "string",
                    ],
                    "payment": [
                      "string",
                      "string",
                    ]
                  },
                  "privacy": {
                    "collect": "string",
                    "purpose": {
                      "info": "string",
                      "customer": [
                        "string",
                        "string",
                      ],
                      "company": [
                        "string",
                        "string",
                      ]
                    },
                    "disclosure": [
                      "string",
                      "string",
                    ],
                    "method": "string",
                    "acceptance": "string",
                  },
                  "others": [],
                  "_id": "string",
                  "createdAt": "2023-06-07T09:44:56.824Z",
                  "updatedAt": "2023-06-07T09:44:56.824Z",
                  "__v": 0,
                }
            }
          400:
            description: create policy fail
            schema:
              type: object
              example: {
                error1: {
                  "success": false,
                  "message": "Policy already exists",
                },
                error2: {
                  "success": false,
                  "message": [
                    "Company name field is required.",
                    "Business registration certificate field is required.",
                    "Licensing authority field is required.",
                    "Privacy policy field is required.",
                  ]
                }
              }
        security:
          - ApiKeyAuth: []
    get: 
      tags:
      - "policy"
      summary: "admin get policy"
      produces: 
      - application/json
      parameters: 
        - in: query
          name: "page"
          type: number
        - in: query
          name: "pageSize"
          type: number            
      responses:
        200:
          description: Get Policy successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get Policy successfully.",
              "data": [],
            }
    put:
      tags:
        - "policy"
      summary: admin change information of a policy
      consumes:
        - application/json  
      parameters:
        - in: body
          name: policy information
          required: true
          schema:
            type: object
            required: 
              - companyName
              - brc
              - issuedBy
              - privacyPolicy
            properties:
              companyName:
                type: string
              brc:
                type: string
              issuedBy:
                type: string
              privacyPolicy:
                type: string
              returnPolicy:
                type: object
                properties:
                  info:
                    type: array
                    items:
                      type: string
                  process:
                    type: array
                    items:
                      type: string
              complaints:
                type: object
                properties:
                  complaintTimeLimit:
                    type: array
                    items:
                      type: string
                  complaintResolutionTime:
                    type: array
                    items:
                      type: string
                  complaintTypes:
                    type: array
                    items:
                      type: object
                      properties:
                        serviceType:
                          type: string
                        responseTime:
                          type: string
                        resolutionTime:
                          type: string
              Compensation:
                type: object
                properties:
                  damagedGoods:
                    type: object
                    properties:
                      lost:
                        type: array
                        items:
                          type: string
                      damage:
                        type: array
                        items:
                          type: string
                      notice:
                        type: array
                        items:
                          type: string
                  operatingError:
                    type: array
                    items:
                      type: string
                  transportationQuality:
                    type: array
                    items:
                      type: object
                      properties:
                        category:
                          type: string
                        detail:
                          type: string
                        amount:
                          type: string
                  lossOfGoods:
                    type: object
                    properties:
                      regulation:
                        type: array
                        items:
                          type: string
                      noPriceDeclaration:
                        type: array
                        items:
                          type: string
                      priceDeclaration:
                        type: array
                        items:
                          type: object
                          properties:
                            case:
                              type: string
                            detail:
                              type: string
                      validDocument:
                        type: array
                        items:
                          type: string
                      compensation:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                            level:
                              type: string
                            value:
                              type: string
                      notice:
                        type: array
                        items:
                          type: string
                  disclaimer:
                    type: array
                    items:
                      type: string
                  information:
                    type: array
                    items:
                      type: string
                  payment:
                    type: array
                    items:
                      type: string
              privacy:
                type: object
                properties:
                  collect:
                    type: string
                  purpose:
                    type: object
                    properties:
                      info:
                        type: string
                      customer:
                        type: array
                        items:
                          type: string
                      company:
                        type: array
                        items:
                          type: string
                  disclosure:
                    type: array
                    items:
                      type: string
                  method:
                    type: string
                  acceptance:
                    type: string
              others:
                type: array
                items:
                  type: object 
      responses:
        200:
          description: Updated Policy successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Updated Policy successfully",
              "data": {
                
              }
            }
        400:
          description: Updated Policy failed
          schema:
            type: object
            example: {
              error1: {
                "success": false,
                "message": [
                  "Company name field is required.",
                  "Business registration certificate field is required.",
                  "Licensing authority field is required.",
                  "Privacy policy field is required.",
                ]
              },
              error2: {
                "success": false,
                "message": "Policy not found",
              }
            }
    delete:
      tags:
        - "policy"
      summary: "admin delete policy"
      produces:
        - application/json
      responses:
        200:
          description: Deleted policy successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Deleted policy successfully",
            }
        400:
          description: Delete FAQ failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Policy not found",
            }
      security:
        - ApiKeyAuth: []
  /policy:
    get: 
      tags:
      - "policy"
      summary: "admin get policy"
      produces: 
      - application/json
      parameters: 
        - in: query
          name: "page"
          type: number
        - in: query
          name: "pageSize"
          type: number            
      responses:
        200:
          description: Get Policy successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get Policy successfully.",
              "data": [],
            }
            
  /admin/faq:
    post:
        tags:
          - "FAQ"
        summary: create new FAQ
        consumes:
          - application/json
        parameters:
        - in: body
          name: FAQ information
          required: true
          schema:
            type: object
            required: 
              - question
              - answer
            properties:
              question:
                type: string
              answer:
                type: string
        responses:
          200:
            description: Create new FAQ successfully
            schema:
              type: object
              example: {
                "success": true,
                "message": "Create new FAQ successfully.",
                "data": {
                  "question": "string",
                  "answer": "string",
                  "_id": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
              }
          400: 
            description: 
            schema:
              type: object
              example: {
                "error1": {
                  "success": false,
                  "message": [
                    "question field is required.",
                    "answer field is required.",
                  ],
                },
                "error2": {
                  "success": false,
                  "message": "This FAQ already exists",
                },
              }
        security:
          - ApiKeyAuth: []
    get: 
      tags:
      - "FAQ"
      summary: "admin get FAQ list"
      produces: 
      - application/json
      parameters: 
        - in: query
          name: "page"
          type: number
        - in: query
          name: "pageSize"
          type: number
      responses:
        200:
          description: Get FAQs successfully
          schema: 
            type: object
            example: {
              "success": true,
              "message": "Get FAQs successfully",
              "data": [
                {
                  "_id": "string",
                  "question": "string",
                  "answer": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
              ]
            }
      security:
        - ApiKeyAuth: []
  /admin/faq/{id}:
    get: 
      tags:
        - "FAQ"
      summary: "admin get a FAQ by id"
      produces: 
      - application/json
      parameters: 
        - in: path
          name: id
          type: string
          required: true
          description: Id of a FAQ
      responses:
        200:
          description: Get FAQ successfully
          schema: 
            type: object
            example: {
              "success": true,
              "message": "Get FAQs successfully",
              "data": {
                  "_id": "string",
                  "question": "string",
                  "answer": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
            }
        400:
          description: get FAQ with an invalid id or a wrong id
          schema:
            type: object
            example: {
              error1: {
                "success": false,
                "message": "Invalid ID",
              },
              error2: {
                "success": false,
                "message": "FAQ not found.",
              },
            }
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "FAQ"
      summary: admin change information of a FAQ
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          description: id of a FAQ
        - in: body
          name: info
          required: true
          schema:
            type: object
            required: 
              - question
              - answer
            properties:
              question:
                type: string
              answer:
                type: string
      responses: 
        200: 
          description: Updated FAQ successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Updated FAQ successfully",
              "data": {
                  "_id": "string",
                  "question": "string",
                  "answer": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
            }
        400:
          description: ""
          schema:
            type: object
            example: {
              error1: {
                "success": false,
                "message": "Invalid ID",
              },
              error2: {
                "success": false,
                "message": "This FAQ already exists",
              },
              error3: {
                "success": false,
                "message": [
                  "question field is required.",
                  "answer field is required.",
                ],
              }
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "FAQ"
      summary: "Delete a existing FAQ by id"
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: Id of a FAQ
      responses:
        200:
          description: Deleted FAQ successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Deleted FAQ successfully",
            }
        400:
          description: Delete FAQ failed.
          schema:
            type: object
            example: {
              error1: {
                "success": false,
                "message": "Invalid ID",
              },
              error2: {
                "success": false,
                "message": "FAQ not found",
              },
            }
      security:
        - ApiKeyAuth: []
  /faq:
    get:
      tags:
      - "FAQ"
      summary: "admin get FAQ list"
      produces: 
      - application/json
      parameters: 
        - in: query
          name: "page"
          type: number
        - in: query
          name: "pageSize"
          type: number
        - in: query
          name: "question"
          type: string
        - in: body
          name: keyword
          description: filter the list with a question using a keyword
          required: true
          schema:
            type: object
            properties:
              keyword:
                type: string
      responses: 
        200: 
          description: Get FAQs successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get FAQs successfully",
              "data": [
                {
                  "_id": "string",
                  "question": "string",
                  "answer": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
              ]
            }
  /bankAccount/bank-update:
    post:
      tags:
      - "bankAccount"
      summary: "Customer update bank account information for authenticated users."
      produces:
        - multipart/form-data
      parameters:
      - in: formData
        name: bankName
        type: string
        default: "string"
        required: true
      - in: formData
        name: accountNumber
        type: string
        default: "123456789"
        required: true
      - in: formData
        name: branch
        type: string
        default: "string"
        required: true
      - in: formData
        name: bank_account_owner_name
        type: string
        default: "string"
        required: true
      - in: formData
        name: identity_card_number
        type: string
        default: "123456789"
        required: true
      - in: formData
        name: identity_card_front_image
        type: file
      - in: formData
        name: identity_card_back_image
        type: file
      responses:
        200:
          description: Update bank account information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update bank account information successfully.",
            }
        400:
          description: Update bank account information failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Update bank account information failed.",
            }
      security:
        - ApiKeyAuth: []
  /bankAccount/verify-otp:
    post:
      tags:
        - "bankAccount"
      summary: Verify OTP send through phone number.
      consumes:
        - application/json
      parameters:
      - in: body
        name: otp
        required: true
        schema:
          type: object
          properties:
            otp:
              type: string
      responses:
        200:
          description: Update bank account information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update bank account information successfully.",
            }
        400:
          description: validate failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "validate failed.",
            }
        404:
          description: Session error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Session error.",
            }
  /bankAccount/update-otp:
    post:
      tags:
        - "bankAccount"
      summary: Update OTP send through phone number.
      produces:
        - application/json
      parameters:
        - in: query
          name: verify_op
          type: string
          required: true
      responses:
        200:
          description: New OTP sent successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "New OTP sent successfully.",
            }
        400:
          description: Send OTP failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Send OTP failed.",
            }
        500:
          description: Internal server error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Internal server error.",
            }
  /bankAccount/:
    get:
      tags:
      - "bankAccount"
      summary: "Retrieve bank account information for the authenticated user."
      produces:
        - application/json
      responses:
        200:
          description: get about information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get about information successfully.",
              "data": {
                "bankName": "string",
                "accountNumber": "string",
                "branch": "string",
                "bank_account_number": "string",
                "bank_account_owner_name": "string",
                "identity_card_number": "string",
                "identity_card_front_image":"string",
                "identity_card_back_image":"string",
              },
            }
        500:
          description: Internal server error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Internal server error.",
            }
      security:
        - ApiKeyAuth: []
  /shippingcost/suggest/start-point:
    post:
      tags:
      - "shippingcost"
      summary: "When the user enters a keyword, a list of address suggestions starts to appear"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: keyword
        required: false
        schema:
          type: object
          properties:
            keyword:
              type: string
      responses:
        200:
          description: Show a list of suggestions.
          schema:
            type: object
            example: {
              "success": true,
              "data": {
                "address":[]
              }
            }
        401:
          description: null.
          schema:
            type: object
            example: {
              "data": {
                "address":[]
              }
            }
  /shippingcost/suggest/end-point:
    post:
      tags:
      - "shippingcost"
      summary: "When the user enters a keyword, a list of address suggestions starts to appear"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: keyword
        required: false
        schema:
          type: object
          properties:
            keyword:
              type: string
      responses:
        200:
          description: Show a list of suggestions.
          schema:
            type: object
            example: {
              "success": true,
              "data": {
                "address":[]
              }
            }
        400:
          description: null.
          schema: 
            type: object
            example: {
              "data": {
                "address":[]
              }
            }
  /shippingcost/shipping-cost:
    post:
      tags:
      - "shippingcost"
      summary: "Calculate freight when user enters origin, destination and weight"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: cost
        required: false
        schema:
          type: object
          properties:
            name1:
              type: string
            name2:
              type: string
            weight:
              type: string
            shippingtype:
              type: string
      responses:
        200:
          description: Offer freight rates.
          schema:
            type: object
            example: {
              "success": true,
              "data": {
                 "shippingCost":"string",
              }
            }
        400:
          description: null.
          schema: 
            type: object
            example: {
              "success": false,
              "message": "Please enter full information",
            }
  /auth/new-token:
    post:
      tags:
      - "auth"
      summary: "get new access and refresh token"
      consumes:
        - application/json
      parameters:
      - in: header
        name: Authorization
        type: string
        description: token of customer
        required: true
      responses:
        200:
          description: get token successfully.
          schema:
            type: object
            example: {
            }
        401:
          description: Unauthorized.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Unauthorized.",
            }
  /auth/email/register:
    post:
      tags:
      - "auth-customer"
      summary: "Customer register by email"
      produces:
        - multipart/form-data
      parameters:
        - in: formData
          name: email
          type: string
          default: 'string'
          required: true
      responses:
        200:
          description: send otp code successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "send otp code successfully.",
            }
        400:
          description: Send OTP failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "send OTP failed.",
            }
  /auth/email/verify-otp:
    post:
      tags:
        - "auth-customer"
      summary: Customer verify OTP send through email.
      produces:
        - multipart/form-data
      parameters:
        - in: formData
          name: email
          type: string
          default: 'string'
          required: true
        - in: formData
          name: otp
          type: string
          default: 'string'
          required: true
      responses:
        200:
          description: user registered successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "user registered successfully.",
            }
        400:
          description: validate failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "validate failed.",
            }
        404:
          description: Session error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Session error.",
            }
  /auth/phone/register:
    post:
      tags:
      - "auth-customer"
      summary: "Customer register by phone"
      produces:
        - multipart/form-data
      parameters:
        - in: formData
          name: phone
          type: string
          default: 'string'
          required: true
      responses:
        200:
          description: send otp code successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "send otp code successfully.",
            }
        400:
          description: Send OTP failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "send OTP failed.",
            }
  /auth/phone/verify-otp:
    post:
      tags:
        - "auth-customer"
      summary: Customer verify OTP send through phone.
      produces:
        - multipart/form-data
      parameters:
        - in: formData
          name: phone
          type: string
          default: 'string'
          required: true
        - in: formData
          name: otp
          type: string
          default: 'string'
          required: true
      responses:
        200:
          description: user registered successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "user registered successfully.",
            }
        400:
          description: validate failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "validate failed.",
            }
        404:
          description: Session error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Session error.",
            }
  /auth/update-basic-info:
    patch:
      tags:
        - "auth-customer"
      summary: Customer update basic info
      produces:
        - multipart/form-data
      parameters:
        - in: formData
          name: password
          type: string
          default: 'string'
          required: true
        - in: formData
          name: name
          type: string
          default: 'string'
          required: true
        - in: formData
          name: address
          type: string
          default: 'string'
          required: true
      responses:
        200:
          description: Customer update basic info successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Customer update basic info successfully.",
            }
        400:
          description: Customer update basic info failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Customer update basic info failed.",
            }
      security:
      - ApiKeyAuth: []
  /auth/email/login:
    post:
      tags:
        - "auth-customer"
      summary: Customer login by email
      produces:
        - multipart/form-data
      parameters:
        - in: formData
          name: email
          type: string
          default: 'string'
          required: true
        - in: formData
          name: password
          type: string
          default: 'string'
          required: true
      responses:
        200:
          description: Customer login by email successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Customer login by email successfully.",
            }
        400:
          description: Customer login by email failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Customer login by email failed.",
            } 
  /auth/phone/login:
    post:
      tags:
        - "auth-customer"
      summary: Customer login by phone
      produces:
        - multipart/form-data
      parameters:
        - in: formData
          name: phone
          type: string
          default: 'string'
          required: true
        - in: formData
          name: password
          type: string
          default: 'string'
          required: true
      responses:
        200:
          description: Customer login by phone successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Customer login by phone successfully.",
            }
        400:
          description: Customer login by phone failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Customer login by phone failed.",
            }
  /auth/login:
    post:
      tags:
        - "auth"
      summary: Customer login with email/phone and password.
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: user
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
            phone:
              type: string
            password:
              type: string
      responses:
        200:
          description: Login successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Login successfully.",
              "data": {
              "accessToken":"string",
              "refreshToken":"string",
              "user": {
                "id":"string",
                "email":"string",
                "phone":"string",
                "role": {
                  "_id": "_id",
                  "name": "string",
                  "address": "string",
                  "description": string,
                  "customer_type": "business",
                  "rank_passers": {
                    "point": number,
                    "level": "string",
                    "_id": "string",
                  },
                "companyTaxcode_business": "string",
                "bank_name": "string",
                "bank_account_name": "string",
                },
              }
              },
            }
        400:
          description: email/phone or password is wrong.
          schema:
            type: object
            example: {
              "success": false,
              "message": "email/phone or password is wrong.",
            }
        403:
          description: your role is not valid. access denied.
          schema:
            type: object
            example: {
              "success": false,
              "message": "your role is not valid. access denied.",
            }
  /auth/staff-login:
    post:
      tags:
        - "auth"
      summary: Staff login with email/phone and password.
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: user
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
            phone:
              type: string
            password:
              type: string
      responses:
        200:
          description: Login successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Login successfully.",
              "data": {
              "accessToken":"string",
              "refreshToken":"string",
              "user": {
                "id":"string",
                "email":"string",
                "phone":"string",
                "role": {
                  "_id": "_id",
                  "name": "string",
                  "staff_type": "string",
                },
              }
              },
            }
        400:
          description: email/phone or password is wrong.
          schema:
            type: object
            example: {
              "success": false,
              "message": "email/phone or password is wrong.",
            }
        403:
          description: your role is not valid. access denied.
          schema:
            type: object
            example: {
              "success": false,
              "message": "your role is not valid. access denied.",
            }
  /shipper/auth/login:
    post:
      tags:
        - "auth"
      summary: Shipper login with code Office, code employee and password.
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: user
        required: true
        schema:
          type: object
          properties:
            codeOffice:
              type: string
            codeStaff:
              type: string
            password:
              type: string
      responses:
        200:
          description: Login successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Login successfully.",
              "data": {
              "accessToken":"string",
              "refreshToken":"string",
              "user": {
                "id":"string",
                "name":"string",
                "staff_type":"string",
                "office":"string",
                "addresss":"string",
                "role":"string",
              }
              },
            }
        400:
          description: Bad request
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Invalid office code.",
              },
              "error2": {
                "success": false,
                "message": "Invalid staff code.",
              },
              "error3": {
                "success": false,
                "message": "User not found.",
              },
              "error4": {
                "success": false,
                "message": "Account locked. Please contact the nearest post office.",
              },
              "error5": {
                "success": false,
                "message": "Account locked",
              },
              "error6": {
                "success": false,
                "message": "Invalid password",
              },
              "error7": {
                "success": false,
                "message": "Not a shipper",
              }
            }
  /auth/forgot-pw:
    post:
      tags:
        - auth
      summary: help users renew their password
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: info
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
            phone:
              type: string
      responses:
        200:
          description: generate new password successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "generate new password successfully.",
            }
        400:
          description: send new password failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "send new password failed.",
            }
        404:
          description: email/phone doesn't exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "email/phone doesn't exist.",
            }
  /auth/change-pw:
    put:
      tags:
        - auth
      summary: user change current password
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: info
        required: true
        schema:
          type: object
          properties:
            oldPw:
              type: string
            newPw:
              type: string
            verify_password:
              type: string
      responses:
        200:
          description: change your password successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "change your password successfully.",
            }
        400:
          description: current password isn't correct.
          schema:
            type: object
            example: {
              "success": false,
              "message": "current password isn't correct.",
            }
      security:
        - ApiKeyAuth: []
  /auth/logout:
    post:
      tags:
        - auth
      summary: user log out
      consumes:
        - application/json
      parameters:
      - in: body
        name: token
        required: true
        schema:
          type: object
          properties:
            refreshToken:
              type: string
      responses:
        200:
          description: log out successfully. see you soon.
          schema:
            type: object
            example: {
              "success": true,
              "message": "log out successfully. see you soon.",
            }
        401:
          description: refresh token is invalid.
          schema:
            type: object
            example: {
              "success": false,
              "message": "refresh token is invalid.",
            }
      security:
        - ApiKeyAuth: []
  /admin/auth/register:
    post:
      tags:
        - auth
      summary: create a new staff
      produces:
        - multipart/form-data
      parameters:
      - in: formData
        name: name
        type: string
        default: 'string'
        required: true
      - in: formData
        name: address
        type: string
        default: 'string'
        required: true
      - in: formData
        name: email
        type: string
        default: 'string@gmail.com'
        required: true
      - in: formData
        name: password
        type: string
        default: 'string'
        required: true
      - in: formData
        name: phone
        type: string
        default: 'string'
        required: true
      - in: formData
        name: staff_type
        type: string
        required: true
        default : 'admin'
        enum: ['admin','driver','shipper','storekeeper','staff']
      - in: formData
        name: staff_position
        type: string
        default : 'Intern'
        required: true
        enum: ['Intern','Junior','Senior','Contributor']
      - in: formData
        name: department
        description : 'objectId in mongoose of department'
        type: string
      - in: formData
        name: car_fleet
        type: string  
        description : 'objectId in mongoose of car fleet'
      - in: formData
        name: postOfficeCode
        type: string  
        description : post office code
      responses:
        200:
          description: user registered successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "user registered successfully.",
            }
        400:
          description: user already exists.
          schema:
            type: object
            example: {
              "success": false,
              "message": "user already exists.",
            }
      security:
        - ApiKeyAuth: []
  /about:
    get:
      tags:
        - about
      summary: get aboutUs information
      produces:
        - application/json
      responses:
        200:
          description: get about information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get about information successfully.",
              "data": {
                "description": "string",
                "vision": "string",
                "values": "string",
                "logo": "path",
                "banners": ["path1", "path2"],
              },
            }
        400:
          description: about information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "about information is not found.",
            }
  /admin/about/logo:
    post:
      tags:
        - about
      summary: upload logo aboutUs
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: logo
        required: true
        description: file
        type: file
      responses:
        200:
          description: upload logo successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "upload logo successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/about/banners:
    post:
      tags:
        - about
      summary: upload banners aboutUs
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: banners
        required: true
        description: array of files
        type: file
      responses:
        200:
          description: upload banners successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": " upload banners successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/about:
    post:
      tags:
        - about
      summary: update aboutUs informations
      consumes:
        - application/json
      parameters:
      - in: body
        name: about informations
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            vision:
              type: string
            values:
              type: string
            history:
              type: string
            networkCoverage:
              type: string
            video:
              type: string
            businessLicense:
              type: string
            licenseOrgan:
              type: string
            licenseDetail:
              type: string
      responses:
        200:
          description: set about-us information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "set about-us information successfully.",
            }
      security:
        - ApiKeyAuth: []
  /contactus:
    get:
      tags:
        - contactUs
      summary: get contactUs information
      produces:
        - application/json
      responses:
        200:
          description: get contact information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "set about-us information successfully.",
              "data": {
                "address":"string",
                "phone":"phone",
                "email":"email",
                "facebook":"url",
                "instagram":"url",
                "tiktok":"url",
                "youtube":"url",
                "hr_mailbox": "email",
              }
            }
        400:
          description: contact information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "contact information is not found.",
            }
  /admin/contactus:
    post:
      tags:
        - contactUs
      summary: update contactUs informations
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: formData
          name: address
          description: address
          type: string
          required: true
        - in: formData
          name: phone
          description: phone
          type: string
        - in: formData
          name: email
          description: email
          type: string
        - in: formData
          name: hr_mailbox
          description: hr_mailbox
          type: string
        - in: formData
          name: android_app
          description: android_app
          type: string
        - in: formData
          name: ios_app
          description: ios_app
          type: string
      responses:
        200:
          description: set contact-us information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "set contact-us information successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/contactus/qr:
    post:
      tags:
        - contactUs
      summary: update contactUs informations
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: QR_code
          description: img of qr_code
          type: file
          required: true
        
      responses:
        200:
          description: set contact-us information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "set contact-us information successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/contactus/social-network/{id}:
    post:
      tags:
        - contactUs
      summary: Add a social network to contact information
      description: Add a social network to the contact information by providing its ID.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the social network to add to contact information.
          type: string
      responses:
        200:
          description: Social network added to contact information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set SocialNetwork successfully.",
            }
        404:
          description: Social network does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "SocialNetwork does not exist.",
            }
        500:
          description: Internal Server Error
          schema:
            type: object
            example: {
              "success": false,
              "message": "Internal Server Error",
            } 
      security:
        - ApiKeyAuth: []
  /admin/contactus/social-network/{socialId}:
    delete:
      tags:
        - contactUs
      summary: Remove a social network from contact information by ID
      description: Remove a social network from contact information by ID
      parameters:
        - in: path
          name: socialId
          required: true
          description: socialId
          type: string
      responses:
        200:
          description: remove socialNetwork successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "remove socialNetwork successfully.",
            }
        404:
          description: Social network does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "SocialNetwork does not exist.",
            }
        500:
          description: Internal Server Error
          schema:
            type: object
            example: {
              "success": false,
              "message": "Internal Server Error",
            } 
      security:
        - ApiKeyAuth: []
  /admin/contactus/top-banner:
    post:
      tags:
        - contactUs
      summary: Upload the top banner for contact information.
      description: Upload the top banner for contact information.
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: top_banner
          description: The top banner image file.
          type: file
          required: true
      responses:
        200:
          description: set contact-us information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "set contact-us information successfully.",
            }
        500:
          description: Internal Server Error
          schema:
            type: object
            example: {
              "success": false,
              "message": "Internal Server Error",
            }
      security:
        - ApiKeyAuth: []
  /admin/contactus/bottom-banner:
    post:
      tags:
        - contactUs
      summary: Upload the bottom banner for contact information.
      description: Upload the bottom banner for contact information.
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: bottom_banner
          description: The bottom banner image file.
          type: file
          required: true
      responses:
        200:
          description: set contact-us information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "set contact-us information successfully.",
            }
        500:
          description: Internal Server Error
          schema:
            type: object
            example: {
              "success": false,
              "message": "Internal Server Error",
            }
      security:
        - ApiKeyAuth: []
  /public/uploads/{dirName}/{fileName}:
    get:
      tags:
        - public
      summary: get uploaded resource
      parameters:
      - in: path
        name: dirName
        type: string
        required: true
        description: directory name of request file
      - in: path
        name: fileName
        type: string
        required: true
        description: file name of request file
      responses:
        200:
          description: resource file downloaded
          schema:
            type: file
  /public/{dirName}/{fileName}:
    get:
      tags:
        - public
      summary: get public assets
      parameters:
      - in: path
        name: dirName
        type: string
        required: true
        description: directory name of request file
      - in: path
        name: fileName
        type: string
        required: true
        description: file name of request file
      responses:
        200:
          description: resource file downloaded
          schema:
            type: file
  /commitment:
    get:
      tags:
        - "commitment"
      summary: get commitments
      produces:
        - application/json
      parameters:
      responses:
        200:
          description: get commitments successfully.
          schema:
            type: object
            example: {        
            }
        400:
          description: commitment is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "commitment is not found.",
            }
  /admin/commitment:
    post:
      tags:
        - "commitment"
      summary: "Create a new commitment"
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: name
          description: name
          type: string
          required: true
      responses:
        200:
          description: Create commitment successfully.
          schema:
            type: object
            example: {
            }
        400:
          description: Create commitment failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create commitment failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/commitment/banner:
    post:
      tags:
        - "commitment"
      summary: "Create a new commitment"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: formData
          name: banner
          description: banner commitment.
          type: file
      responses:
        200:
          description: Create commitment successfully.
          schema:
            type: object
            example: {
            }
        400:
          description: Create commitment failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create commitment failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/commitment/img:
    post:
      tags:
        - "commitment"
      summary: "Create a new commitment"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: formData
          name: img
          description: img commitment.
          type: file
      responses:
        200:
          description: Create commitment successfully.
          schema:
            type: object
            example: {
            }
        400:
          description: Create commitment failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create commitment failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/commitment/{subcommitmentId}:
    delete:
      tags:
        - "commitment"
      summary: "Remove a existing subcommitment"
      produces:
        - application/json
      parameters:
        - in: path
          name: subcommitmentId
          type: string
          required: true
          description: Id of a subcommitment 
      responses:
        200:
          description: remove subcommitment successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete commitment successfully.",
            }
        400:
          description: Delete commitment failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Delete commitment failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/sub-commitment:
    post:
      tags:
        - "subCommitment"
      summary: "create a subcommitment"
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: logo
          description: logo
          type: file
          required: true
        - in: formData
          name: name
          description: name
          type: string
          required: true
        - in: formData
          name: description
          description: description
          type: string
          required: true
      responses:
        200:
          description: Create subcommitment successfully.
          schema:
            type: object
            example: {
            }
        400:
          description: Create commitment failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create commitment failed.",
            }
      security:
        - ApiKeyAuth: []
    get:
      tags:
        - "subCommitment"
      summary: get sub-commitment
      produces:
        - application/json
      parameters:
      responses:
        200:
          description: get sub-commitment successfully.
          schema:
            type: object
            example: {        
            }
        400:
          description: commitment is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "commitment is not found.",
            }
      security:
        - ApiKeyAuth: []
  /admin/sub-commitment/{subcommitmentId}:
    put:
      tags:
        - "subCommitment"
      summary: "Update a subcommitment"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: subcommitmentId
          description: subcommitmentId
          type: string
          required: true
        - in: formData
          name: name
          description: name
          type: string
          required: true
        - in: formData
          name: description
          description: description
          type: string
          required: true
      responses:
        200:
          description: update subcommitment successfully.
          schema:
            type: object
            example: {
            }
        400:
          description: Create commitment failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create commitment failed.",
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "subCommitment"
      summary: "update a subcommitment"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: subcommitmentId
          description: subcommitmentId
          type: string
          required: true
        - in: formData
          name: logo
          description: logo
          type: file
          required: true
      responses:
        200:
          description: Create subcommitment successfully.
          schema:
            type: object
            example: {
            }
        400:
          description: Create commitment failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create commitment failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/sub-commitment/logo/{subcommitmentId}:
    put:
      tags:
        - "subCommitment"
      summary: "update a subcommitment"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: subcommitmentId
          description: subcommitmentId
          type: string
          required: true
        - in: formData
          name: logo
          description: logo
          type: file
          required: true
      responses:
        200:
          description: Create subcommitment successfully.
          schema:
            type: object
            example: {
            }
        400:
          description: Create commitment failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create commitment failed.",
            }
      security:
        - ApiKeyAuth: []
    
  /partner:
    get:
      tags:
        - "partner"
      summary: get partners
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of partner in a page  
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
        - in: query
          name: keyword
          type: string
          description: search by keyword
      responses:
        200:
          description: get partners successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get partner successful.",
              "data": {
                "length": "number",
                "partners": [
                  {
                    "_id": "id",
                    "name": "string",
                    "logo": "path",
                  },
                  
                ]
              }
            }
        400:
          description: partner is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "partner is not found.",
            }
  /partner/{partnerId}:
    get:
      tags:
        - "partner"
      summary: get partner by id
      produces:
        - application/json
      parameters:
        - in: path
          name: partnerId
          type: string
          required: true
          description: Id of a partner 
      responses:
        200:
          description: get partner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get partner successful.",
              "data": {
                "_id": "id",
                "name": "string",
                "logo": "path",
              }
            }
        400:
          description: partnerId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "partner is not found.",
            }
  /admin/partner:
    post:
      tags:
        - "partner"
      summary: "Create a new partner"
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: name
          description: a new partner name.
          type: string
          required: true
        - in: formData
          name: logo
          description: a logo commitment.
          type: file  
          required: true      
      responses:
        200:
          description: Create partner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create partner successfully",
              "data": {
                "name": "string",
                "logo": "path",
              }
            }
        400:
          description: Create partner failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create partner failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/partner/{partnerId}:
    put:
      tags:
        - "partner"
      summary: "Update a existing commitment"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: partnerId
          type: string
          required: true
          description: partner id
        - in: formData
          name: name
          description: a new partner name.
          type: string
        - in: formData
          name: logo
          description: a logo commitment.
          type: file  
      responses:
        200:
          description: Update partner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update partner successfully",
              "data": {
                "name": "string",
                "logo": "path",
              }
            }
        400:
          description: Update partner failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Update partner failed.",
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "partner"
      summary: "Delete a existing partner"
      produces:
        - application/json
      parameters:
        - in: path
          name: partnerId
          type: string
          required: true
          description: partner Id
      responses:
        200:
          description: Delete partner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete partner successfully",
              "data": {
                "_id": "id",
                "name": "string",
                "logo": "path",
              }
            }
        400:
          description: Delete partner failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Delete partner failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/message:
    get:
      tags:
        - "message"
      summary: get message
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of message in a page          
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: status
          type: string
          description: filter by status (seen/unseen)
      responses:
        200:
          description: get message successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get message information successfully.",
              "data": {
                "length": "number",
                "messages": [
                  {
                    "_id": "id",
                    "name": "string",
                    "email": "string",
                    "phone": "string",
                    "message": "string",
                    "status": "string",
                  }
                ]
              }          
            }          
        400:
          description: message information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "message information is not found.",
            }
      security:
        - ApiKeyAuth: []
  /admin/message/{messageId}:
    get:
      tags:
        - "message"
      summary: get message by id
      produces:
        - application/json
      parameters:
        - in: path
          name: messageId
          type: string
          required: true
          description: Id of a message 
      responses:
        200:
          description: get message successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get message information successfully.",
              "data": {
                "_id": "id",
                "name": "string",
                "email": "string",
                "phone": "string",
                "message": "string",
                "status": "string",
              }         
            }          
        400:
          description: message information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "message information is not found.",
            }
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "message"
      summary: "Update status of a existing message"
      consumes:
        - application/json
      parameters:
        - in: path
          name: messageId
          schema: 
            type: string
          required: true
          description: message id
        - in: body
          name: message
          description: a existing message's status.
          schema:
            type: object
            properties:
              status:
                type: string
      responses:
        200:
          description: Update message successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get message information successfully.",
              "data": {
                "status": "string",
              }         
            }          
        400:
          description: This message is not existed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "This message is not existed.",     
            }       
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "message"
      summary: "Delete a existing message"
      produces:
        - application/json
      parameters:
        - in: path
          name: messageId
          type: string
          required: true
          description: Id of a message 
      responses:
        200:
          description: Delete message successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete message successfully.",
            }                
        400:
          description: Message does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Message does not exist.",     
            }
      security:
        - ApiKeyAuth: []
  /message:
    post:
      tags:
        - "message"
      summary: "Create a new message"
      consumes:
        - application/json
      parameters:
        - in: body
          name: message
          description: a new message.
          schema:
            type: object
            required:
              - name, email, phone, message
            properties:
              name:
                type: string
              email:
                type: string 
              phone: 
                type: string
              message:
                type: string 
      responses:
        200:
          description: Send email successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Send email successfully.",  
            }    
        400:
          description: Send email failed.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Send email failed.",  
            }    
  /user/customer:
    put:
      tags:
        - "user"
      summary: update customer 
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: customer
          description: update customer information
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              phone:
                type: string
              address:
                type: string
              description:
                type: string
              taxcode:
                type: string
      responses:
        200:
          description: Update user's information successfully.
        400:
          description: Bad request
          schema:
            type: object
            example: {
              "error": {
                "success": false,
                "message": "Email/Phone is used.",
              }
            }
      security:
        - ApiKeyAuth: []
  /user/staff:
    put:
      tags:
        - "user"
      summary: update staff 
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: staff
          description: update staff information
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              phone:
                type: string
              department:
                type: string
              car_fleet:
                type: string
      responses:
        200:
          description: Update user's information successfully.
        400:
          description: Bad request
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Email/Phone is used.",
              },
              "error2": {
                "success": false,
                "message": "Department does not exist.",
              },
              "error3": {
                "success": false,
                "message": "Car Fleet does not exist.",
              }
            }
      security:
        - ApiKeyAuth: []
  /user/delete:
    patch:
      tags:
        - "user"
      summary: delete account 
      produces:
        - application/json
      consumes:
        - application/json
      responses:
        200:
          description: delete successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Account has been deleted",
            }
        400:
          description: Bad request
          schema:
            type: object
            example: {
              "success": false,
              "message": "User not found",
              }
      security:
        - ApiKeyAuth: []      
  /admin/user:
    get: 
      tags:
        - "user"
      summary: get list of user
      produces:
        - application/json      
      parameters:
        - in: query
          name: page
          type: string
          description: Number of page
        - in: query
          name: pageSize
          type: string
          description: Number of order in a page
        - in: query
          name: keyword
          type: string
          description: keyword       
        - in: query
          name: sortBy
          type: string
          description: sort by field, RegEx "[-]field[.[-]field]*"
        - in: query
          name: email
          type: string
          description: email       
        - in: query
          name: phone
          type: string
          description: phone
      responses:
        200:
          description: Get users successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get users successfully.",
              "data": {
                "length": "number",
                "users": [
                  
                ]
              }
            }
      security:
        - ApiKeyAuth: []
  /admin/user/{id}:    
    get: 
      tags:
        - "user"
      summary: Customer get information of an user
      produces:
        - application/json     
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: id of an user 
      responses:
        200:
          description: Get user successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get user successfully.",
              "data": {
                
              }
            }          
        400:
          description: No information found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "No information found.",
            }
      security:
        - ApiKeyAuth: []
  /admin/user/{id}/status:
    put:
      tags:
        - "user"
      summary: update status 
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          schema: 
            type: string
          required: true
          description: user id
        - in: body
          name: user
          description: a existing user.
          schema:
            type: object
            required:
              - isActive
            properties:
              isActive:
                type: Boolean
      requestBody:
        content: 
          multipart/form-data: 
            schema:            
              type: object
              properties:      
                name:           
                  type: string
      responses:
        200:
          description: Update active account successfully
        400:
          description: Bad request
          schema:
            type: object
            example: {
              "error": {
                "success": false,
                "message": "User does not existed",
              }
            }
      security:
        - ApiKeyAuth: []
  /admin/car:
    get:
      tags:
        - "car"
      summary: get cars
      produces:
        - application/json
      parameters:
        - in: query
          name: car_type
          type: string
          description: car_type of car (ex 8_ton, 20_ton)
        - in: query
          name: plate
          type: string
          description: plate of car 
        - in: query
          name: page
          type: string
          description: number of page 
        - in: query
          name: pageSize
          type: string
          description: number of page size 
      responses:
        200:
          description: get car successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Get car successfully.",
                "data": {
                  "length": "number",
                  "listCar": [
                    {
                      "plate": "string",
                      "car_type": "string",
                      "volumn": "string",
                      "tonnage": "string",
                      "car_fleet": "string",
                      "insurance": {
                        "seri": "string",
                        "expired": "date",  
                      }
                    },
                  ],
                },
            }
        400:
          description: car in not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
      security:
        - ApiKeyAuth: []
  /admin/car/{carId}:
    get:
      tags:
        - "car"
      summary: get car by id
      produces:
        - application/json
      parameters:
        - in: path
          name: carId
          type: string
          required: true
          description: Id of a car 
      responses:
        200:
          description: get car successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Get car successfully.",
                "data": {
                  "plate": "string",
                  "car_type": "string",
                  "volumn": "string",
                  "tonnage": "string",
                  "car_fleet": "string",
                   "insurance": {
                     "seri": "string",
                    "expired": "date",  
                  }
                },
            }
        400:
          description: CarId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "car"
      summary: Admin update car 
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - in: path
          name: carId
          type: string
          required: true
          description: Id of an car 
        - in: body
          name: road
          description: update car information
          schema:
            type: object
            required:
              - plate
              - car_type 
              - volumn
              - tonnage
              - car_fleet
              - seri
              - expired
            properties:
              plate: 
                  type: string
              car_type:
                type: string
                enum: ['8_ton', '20_ton']
              volumn: 
                  type: number
              tonnage:
                  type: number
              car_fleet:
                  type: string
              seri:
                  type: string
              expired:
                  type: string
      responses:
        200:
          description: Update car successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Update car successfully.",
                "data": {
                  "plate": "string",
                  "car_type": "string",
                  "volumn": "string",
                  "tonnage": "string",
                  "car_fleet": "string",
                },
            }
        400:
          description: Update car failed
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "ID does not exists.",
              },
              "error2": {
                "success": false,
                "message": "This car fleet is not existed.",
              },
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "car"
      summary: "Delete a existing car"
      produces:
        - application/json
      parameters:
        - in: path
          name: carId 
          type: string
          required: true
          description: car Id
      responses:
        200:
          description: Delete car successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete car successfully.",
            }
        400:
          description: Delete car failed.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Car does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /admin/car/{carId}/fuel_control:
    get:
      tags:
        - "car"
      summary: control fuel consumption per car
      produces:
        - application/json
      parameters:
        - in: path
          name: carId
          type: string
          required: true
          description: Id of a car 
      responses:
        200:
          description: get car successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Get car successfully.",
                "data": {
                  "actual_fuel": "number",
                  "theoretical_fuel": "number",
                  "fuel difference": "number",
                },
            }
        400:
          description: CarId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
      security:
        - ApiKeyAuth: []
  /admin/car/create:
    post:
      tags:
        - "car"
      summary: "Create a new car"
      produces:
        - multipart/form-data
      parameters:
        - in: formData
          name: plate
          type: string
          default: 'string'
          required: true
        - in: formData
          name: car_type
          type: string
          default: '8_ton'
          enum: ['8_ton', '20_ton']
          required: true  
        - in: formData
          name: volumn
          type: integer
          default: 1
          required: true
        - in: formData
          name: tonnage
          type: integer
          default: 1
          required: true
        - in: formData
          name: car_fleet
          type: string
          default: 'string'
          description: 'objectId of car fleet in mongoose'
          required: true
        - in: formData
          name: seri
          type: string
          default: 'string'
          required: true
        - in: formData
          name: expired
          type: string
          default: '2023-07-23:00:10:00'
          description : time expired with format yyyy-mm-dd:hh:mm:ss
          required: true
      responses:
        200:
          description: Create car successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "set car information successfully.",
            }
        400:
          description: Create car failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "This car plate is already existed.",
              },
              "error2": {
                  "success": false,
                  "message": "This car fleet is not existed.",
                }
            }
      security:
        - ApiKeyAuth: []
  /prohibited-product:
    get:
      tags:
        - "prohibited-product"
      summary: get prohibited products
      produces:
        - application/json
      parameters:
        - in: query
          name: keyword
          type: string
          description: keyword of prohibited product 
        - in: query
          name: page
          type: string
          description: number of page 
        - in: query
          name: pageSize
          type: string
          description: number of page size 
      responses:
        200:
          description: get prohibited product successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Get prohobited product successfully.",
                "data": {
                  "length": "number",
                  "list": [
                    {
                      "name": "string",
                      "image": "path",
                      "detail": "string",
                    },
                  ]
                }
            }
        400:
          description: Prohibited product in not found.   
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
  /prohibited-product/{id}:
    get:
      tags:
        - "prohibited-product"
      summary: get prohibited product by id
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: Id of a prohibited product 
      responses:
        200:
          description: get prohibited product successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Get information of prohibited product successfully.",
                "data": {
                  "name": "string",
                  "detail": "string",
                  "image": "path",
                }  
            }
        400:
          description: Id is not found. 
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information of prohibited product is not found.",
            }

  /admin/prohibited-product/create:
    post:
      tags:
        - "prohibited-product"
      summary: "Create a new prohibited product"
      consumes:
        - application/json
      parameters:
        - in: formData
          name: name
          type: string
          required: true
          description: name of prohibited product
        - in: formData
          name: detail
          type: string
          required: true
          description: detail of prohibited product
        - in: formData
          name: image
          type: file
          description: Image of prohibited product
      responses:
        200:
          description: Create prohibited product successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Create prohibied product successfully.",
                "data": {
                  "name": "string",
                  "image": "string",
                  "detail": "path",
                },
            }
        400:
          description: Create prohibited product failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Name is already existed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/prohibited-product/image/{id}:
      put:
        tags:
          - "prohibited-product"
        summary: "Update a existing prohibited product"
        consumes:
          - multipart/form-data
        parameters:
          - in: path
            name: id
            required: true
            description: prohibited product id
          - in: formData
            name: image
            type: file
            description: Image of prohibited product
        responses:
          200:
            description: Update image prohibited product successfully.
            schema:
              type: object
              example: {
                  "success": true,
                  "message": "Update image prohibited product successfully.",
              }
          400:
            description: Update image prohibited product failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "Prohibited product not exists.",
              }
        security:
          - ApiKeyAuth: []
  /admin/prohibited-product/{id}:
    put:
      tags:
        - "prohibited-product"
      summary: "Update a existing prohibited product"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          required: true
          description: prohibited product id
        - in: formData
          name: name
          type: string
          description: name of prohibited product
        - in: formData
          name: detail
          type: string
          description: detail of prohibited product
      responses:
        200:
          description: Update information prohibited product successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Update information prohibited product successfully.",
                "data": {
                  "name": "string",
                  "detail": "string",
                },
            }
        400:
          description: Update information prohibited product failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Name is existed.",
              },
              "error2": {
                "success": false,
                "message": "Prohibited product not exists.",
              }
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "prohibited-product"
      summary: "Delete a existing prohibited product"
      produces:
        - application/json
      parameters:
        - in: path
          name: id 
          type: string
          required: true
          description: prohibited product Id
      responses:
        200:
          description: Delete prohibited product successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete prohibited product successfully.",
            }
        400:
          description: Update prohibited product failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Prohibited product not exists.",
            }
      security:
        - ApiKeyAuth: []
  /admin/road:
    get:
      tags:
        - "road"
      summary: get roads
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of road on a page
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sort by
        - in: query
          name: distance
          type: string
          description:  distance
        - in: query
          name: origin
          type: string
          description: origin
        - in: query
          name: destination
          type: string
          description:  destination
      responses:
        200:
          description: get road successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get road information successfully.",
              "data": {
                "length": "number",
                "road": [
                  {
                    "origin": "string",
                    "destination": "string",
                    "distance": "string",
                  },
                ]
              }
            }
        400:
          description: Road information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Road information is not found.",
            }
      security:
        - ApiKeyAuth: []
  /admin/road/{roadId}:
    get:
      tags:
        - "road"
      summary: get road by id
      produces:
        - application/json
      parameters:
        - in: path
          name: roadId
          type: string
          required: true
          description: Id of a road 
      responses:
        200:
          description: get road successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get road information successfully.",
              "data": {
                "origin": "string",
                "destination": "string",
                "distance": "string",
              }
            }
        400:
          description: Road information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Road information is not found.",
            }
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "road"
      summary: Admin update road 
      consumes:
        - application/json
      parameters:
        - in: path
          name: roadId
          type: string
          required: true
          description: Id of an road 
        - in: body
          name: road
          description: a new road.
          schema:
            type: object
            properties:
              distance: 
                  type: number
              origin:
                  type: string
              destination: 
                  type: string
      responses:
        200:
          description: Update road successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update road successfully.",
              "data": {
                "origin": "string",
                "destination": "string",
                "distance": "string",
              },
            }
        400:
          description: road cannot be found.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Origin does not exist.",
              },
              "error2": {
                "success": false,
                "message": "Destination does not exist.",
              },
              "error3": {
                "success": false,
                "message": "This road is not existed.",
              },
              "error4": {
                "success": false,
                "message": "This road is already existed.",
              }
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "road"
      summary: "Delete an existing road"
      produces:
        - application/json
      parameters:
        - in: path
          name: roadId
          type: string
          required: true
          description: Id of an road 
      responses:
        200:
          description: Delete road successfully.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Delete road successfully.",
              "data": {
                "origin": "string",
                "destination": "string",
                "distance": "string",
              }
            }
        400:
          description: Delete road failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Road does not exist.",
            }
      security:
          - ApiKeyAuth: []
  /admin/road/create:
    post:
      tags:
        - "road"
      summary: "Create a new road"
      consumes:
        - application/json
      parameters:
        - in: body
          name: road
          description: a new road.
          schema:
            type: object
            required:
              - distance
              - origin 
              - destination
            properties:
              distance:           
                  type: number
              origin: 
                  type: string
              destination: 
                  type: string
      responses:
        200:
          description: Set road information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set road information successfully.",
            }
        400:
          description: Create road failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Origin does not exist.",
              },
              "error2": {
                "success": false,
                "message": "Destination does not exist.",
              },
            }
      security:
        - ApiKeyAuth: []
  /admin/bill:
    get:
      tags:
        - "bill"
      summary: get bills
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of bill on a page
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sort by
        - in: query
          name: service
          type: string
          description:  service
        - in: query
          name: road
          type: string
          description:  road
        - in: query
          name: car
          type: string
          description:  car
        - in: query
          name: driver
          type: string
          description:  driver
        - in: query
          name: status
          type: string
          description:  status (ex waiting, processing, completed)
      responses:
        200:
          description: get bill successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get bill information successfully.",
              "data": {
                "length": "number",
                "bills": [
                  {
                    "_id": "id",
                    "service": "string",
                    "road": "string",
                    "car": "string",
                    "driver": "string",
                    "product_shipments": [
                      {
                        "shipment": "string",
                        "turnover": "number",
                      },
                    ],
                    "status": "string",
                    "actual_fuel": "number",
                    "theoretical_fuel": "number",
                  },
                ]
              }
            }
        400:
          description: Bill information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Bill information is not found.",
            }
      security:
        - ApiKeyAuth: []
  /admin/bill/{billId}:
    get:
      tags:
        - "bill"
      summary: get bill by id
      produces:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id of a bill 
      responses:
        200:
          description: get bill successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get bill successfully.",
              "data": {
                "_id": "id",
                "service": "string",
                "road": "string",
                "car": "string",
                "driver": "string",
                "product_shipments": [
                  {
                    "shipment": "id",
                    "turnover": "number",
                  },
                ],
                "status": "string",
                "actual_fuel": "number",
                "theoretical_fuel": "number",
              }
            }
        400:
          description: Bill information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Bill information is not found.",
            }
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "bill"
      summary: Admin update bill 
      consumes:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id of an bill 
        - in: body
          name: bill
          description: a new bill.
          schema:
            type: object
            required:
              - product_shipment
            properties:
              service:
                type: string 
              road:
                type: string
              car:
                type: string 
              driver:
                type: string 
              product_shipment:
                type: string 
              status:
                type: string
                enum: ['waiting', 'accepted', 'processing', 'completed', 'refused']
      responses:
        200:
          description: Update bill  successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update bill successfully.",
              "data": {
                "service": "string",
                "road": "string",
                "car": "string",
                "driver": "string",
                "status": "string",
                "actual_fuel": "number",
                "theoretical_fuel":"number",
              },
            }
        400:
          description: bill cannot be found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "This bill is existed.",
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "bill"
      summary: "Delete an existing bill"
      produces:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id of an bill 
      responses:
        200:
          description: Delete bill successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete product shipment successfully.",
              "data": {
                 "_id": "id",
                "service": "string",
                "road": "string",
                "car": "string",
                "driver": "string",
                "product_shipments": [
                  {
                    "shipment": "id",
                    "turnover": "number",
                  },
                ],
                "status": "string",
                "actual_fuel": "number",
                "theoretical_fuel": "number",
              },
            }
        400:
          description: Delete bill failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Bill does not exist.",
            }
      security:
          - ApiKeyAuth: []
  /admin/bill/create:
    post:
      tags:
        - "bill"
      summary: "Create a new bill"
      consumes:
        - application/json
      parameters:         
        - in: body      
          name: bill
          description: a new bill.
          schema:
            type: object
            properties:
              service:
                type: string 
              road:
                type: string
              car:
                type: string 
              driver:
                type: string 
              actual_fuel:
                type: number 
              theoretical_fuel: 
                type: number 
              status:
                type: string
                enum: ['waiting', 'accepted', 'processing', 'completed', 'refused']
      responses:
        200:
          description: Set bill information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set bill information successfully.",
            }
        400:
          description: Create bill failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Service/Road/Car/Car fleet/Driver does not exist.",
            }
      security:
        - ApiKeyAuth: []
        
  /admin/bill/debt/driver:
    get:
      tags:
        - "bill"
      summary: get information about the driver debt
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of bill on a page
        - in: query
          name: page
          type: string
          description: number of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sortBy
        - in: query
          name: service
          type: string
          description: service
        - in: query
          name: road
          type: string
          description: road
        - in: query
          name: car
          type: string
          description: car
        - in: query
          name: driver
          type: string
          description: driver
        - in: query
          name: status
          type: string
          description: status ( waiting, processing, completed )
      responses:
        200:
          description: get bill successfully.
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get bill information successfully.",
              "data": {
                "length": "number",
                "totalCollect": "number",
                "totalPay": "number",
                "bills": [
                  {
                    "cost": "number",
                    "costDriver": "number",
                    "collect": "number",
                    "pay": "number",
                    "bill": {
                      "other_costs": {
                        "toll_cost": "number",
                        "police_cost": "number",
                        "food_cost": "number",
                        "carrepair_cost": "number",
                        "warehouse_cost": "number",
                        "other_cost": "number",
                      },
                      "current_fuel_price": "number",
                      "cost": "number",
                      "_id": "id",
                      "service": "string",
                      "road": "string",
                      "car": "string",
                      "driver": "string",
                      "status": "string",
                      "product_shipments": [
                        {
                          "shipment": "string",
                          "turnover": "number",
                          "_id": "string",
                        }
                      ],
                      "actual_fuel": "number",
                      "theoretical_fuel": "number",
                    }
                  }
                ]
              }
            }
        400:
          description: There is no bill with completed status
          schema:
            type: object
            example: {
              "success": false,
              "message": "There is no bill with completed status.",
            }
      security:
        - ApiKeyAuth: []

  /admin/bill/fee_ride/{billId}:
    post:
      tags:
        - "bill"
      summary: Fee of ride
      produces:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id Of bill
        - in: body
          name: Fee of ride
          description: Enter fee 
          schema:
            type: object
            properties:
              price_fuel:
                type: number
              tollFee:
                type: number
              whFee:
                type: number
              otherFee:
                type: number
      responses:
        200:
          description: Valid role.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get bill successfully.",
              "data": {
                "car": "string",
                "costOfRide": "number",
              }
            }
        400:
          description: Invalid role.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Forbidden.",
            }
      security:
        - ApiKeyAuth: []
  /admin/bill/product_shipments/{billId}:
    post:
      tags:
        - "bill"
      summary: "Update a turnover, shipment of bill"
      consumes:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id of an bill 
        - in: body
          name: bill
          description: a new bill.
          schema:
            type: object
            properties:
              shipment:
                type: string 
              turnover:
                type: number
      responses:
        200:
          description: Add product shipment successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Add product shipment successfully.",
            }
        400:
          description: Update bill failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The shipment/Bill is not existed",
            }
      security:
        - ApiKeyAuth: []

  /admin/bill/report/info:
    get:
      tags:
        - "bill"
      summary: "get report of bill"
      consumes:
        - application/json
      responses:
        200:
          description: Get report successful.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get report successful.",
              "data": [
                {
                  "_id": "63969a8836f1d1f774332096",
                  "sender": null,
                  "receiver": "636db72036fc232c43f0a0bb",
                  "title": "Tài xế nhận bill",
                  "message": "Bạn cần nhận bill  637597a2aaa9e91c0a987d2a",
                  "status": false,
                  "createdAt": "2022-12-12T03:05:44.654Z",
                  "updatedAt": "2022-12-12T03:05:44.654Z",
                  "__v": 0,
                },
                {
                  "_id": "63969a9236f1d1f77433209a",
                  "sender": null,
                  "receiver": "636db72036fc232c43f0a0bb",
                  "title": "Tài xế nhận bill",
                  "message": "Bạn cần nhận bill  636dbaad36fc232c43f0a0ca",
                  "status": false,
                  "createdAt": "2022-12-12T03:05:54.431Z",
                  "updatedAt": "2022-12-12T03:05:54.431Z",
                  "__v": 0,
                },
              ]
            }
        400:
          description: Get report of bill failed
          schema:
            type: object
            example: {
              "success": false,
              "message": "Not information found.",
            }
      security:
        - ApiKeyAuth: []
  /bill/{billId}:
    get:
      tags:
        - "bill"
      summary: get a list of Bills with storekeeper starting or ending point
      produces:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id of a bill 
      responses:
        200:
          description: Valid role.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get bill successfully.",
              "data": {
                "_id": "id",
                "service": {
                  "_id": "string",
                  "name": "string",
                  "sub_detail": "string",
                  "target": "string",
                  "tip": "number",
                  "quotes": [quote1, quote2],
                  "logo": "path",
                  "banner": "path",
                  "features": [feature1, feature2],
                  "participants": [participant1, participant2],
                  "price": "string",
                  "distances": [distance1, distance2],
                  "price_files": [
                    {
                      "province": "string",
                      "file": "path",
                      "_id": "string",
                    }
                  ]
                },
                "road": {
                  "_id": "string",
                  "origin": {
                    "_id": "string",
                    "name": "string",
                    "phone": "string",
                    "street": "string",
                    "ward": "string",
                    "district": "string",
                    "province": "string",
                    "lon": "number",
                    "lat": "number",
                    "storekeeper": "string",
                    "turnover": "number",
                    "inventory_product_shipments": [
                      {
                        "shipments": "string",
                        "turnover": "number",
                        "status": "string",
                      }
                    ]
                  },
                  "destination": {
                    "_id": "string",
                    "name": "string",
                    "phone": "string",
                    "street": "string",
                    "ward": "string",
                    "district": "string",
                    "province": "string",
                    "lon": "number",
                    "lat": "number",
                    "storekeeper": "string",
                    "turnover": "number",
                    "inventory_product_shipments": [
                      {
                        "shipments": "string",
                        "turnover": "number",
                        "status": "string",
                      }
                    ]
                  }
                },
                "car": {
                  "insurance": {
                    "seri": "string",
                    "expired": "datetime",
                  },
                  "_id": "string",
                  "plate": "number",
                  "car_type": "string",
                  "volumn": "number",
                  "tonnage": "number",
                  "car_fleet": "string",
                },
                "driver": {
                  "staff_position": "string",
                  "_id": "string",
                  "name": "string",
                  "staff_type": "string",
                },
                "product_shipments": [
                  {
                    "shipment": "id",
                    "turnover": "number",
                    "_id": "string",
                  }
                ],
                "status": "string",
                "actual_fuel": "number",
                "theoretical_fuel": "number",
              }
            }
        400:
          description: Invalid role.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Forbidden.",
            }
      security:
        - ApiKeyAuth: []

  /bill/{billId}/driver:
    get:
      tags:
        - "bill"
      summary: get inforamtion of bills by driver
      produces:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id of a bill 
      responses:
        200:
          description: Valid role.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get bill successfully.",
              "data": {
                "_id": "id",
                "service": "object",
                "road": "string",
                "car": "string",
                "driver": "string",
                "product_shipments": [
                  {
                    "shipment": "id",
                    "turnover": "number",
                  },
                ],
                "status": "string",
                "actual_fuel": "number",
                "theoretical_fuel": "number",
              }
            }
        400:
          description: Invalid role.
          schema:
            type: object
            example: {
              "success": false,
              "message": "There was no information found.",
            }
      security:
        - ApiKeyAuth: []

  /bill/{billId}/actual_fuel:
    put:
      tags:
        - "bill"
      summary: put about actual fuel of bill by driver
      consumes:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id of an bill
        - in: body
          name: bill
          description: update actual fuel.
          schema:
            type: object
            properties:
              actual_fuel:
                type: number
      responses:
        200:
          description: Valid login account.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update actual fuel successfully.",
              "data": {
                "actual_fuel": "number",
              },
            }
        400:
          description: Incorrect login account.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Forbidden.",
            }
      security:
        - ApiKeyAuth: []
  /bill/{id}:
    put:
      tags:
        - "bill"
      summary: put about information of bill by driver
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: turnover
          description: Id of an bill
        - in: body
          name: bill
          description: update information of bill
          schema:
            type: object
            properties:
              current_fuel_price:
                type: number
              toll_cost:
                type: number
              police_cost:
                type: number
              food_cost:
                type: number
              carrepair_cost:
                type: number
              warehouse_cost:
                type: number
              other_cost:
                type: number
      responses:
        200:
          description: Valid loin account.
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Update bill successfully.",
              "data": {
                "current_fuel_price": "number",
                "toll_cost": "number",
                "police_cost": "number",
                "food_cost": "number",
                "carrepair_cost": "number",
                "warehouse_cost": "number",
                "other_cost": "number",
              },
            }
        400:
          description: Incorrect login account
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Forbidden.",
            }
      security:
        - ApiKeyAuth: []
  /admin/consultancy:
    get:
      tags:
        - "consultancy"
      summary: get consultancy
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of consultancy in a page 
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: status
          type: string
          description: filter by value true/false
        - in: query
          name: sortBy
          type: string
          description: sort by field, -updatedAt        
      responses:
        200:
          description: Get consultancy information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get consultancy information successfully.",
              "data": {
                "length": "number",
                "consultancy": [
                  {
                  "name": "string",
                  "email": "string",
                  "phone": "string",
                  "service" : "string",
                  "fulladdress" : "string",
                  "parcel": "string",
                  "quantity": number,
                  "solved_status": "boolean",
                  }
                ]
              }
            }
        400:
          description: Consultancy information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Consultancy information is not found.",
            }
      security:
        - ApiKeyAuth: []
  /admin/consultancy/{consultancyId}:
    get:
      tags:
        - "consultancy"
      summary: get consultancy by id
      produces:
        - application/json
      parameters:
        - in: path
          name: consultancyId
          type: string
          required: true
          description: Id of a consultancy 
      responses:
        200:
          description: Get consultancy information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get consultancy information successfully.",
              "data": {
                "name": "string",
                "email": "string",
                "phone": "string",
                "service" : "string",
                "fulladdress" : "string",
                "parcel": "string",
                "quantity": "string",    
                "solved_status": "boolean",
              }
            }          
        400:
          description: consultancy is not found.    
          schema:
            type: object
            example: {
              "success": false,
              "message": "Consultancy information is not found.",
            }
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "consultancy"
      summary: "Update a existing consultancy"
      consumes:
        - application/json
      parameters:
        - in: path
          name: consultancyId
          schema: 
            type: string
          required: true
          description: consultancy id
        - in: body
          name: consultancy
          description: an updated consultancy.
          schema:
            type: object
            properties:
              service:
                type: string
              name:
                type: string
              email:
                type: string 
              phone: 
                type: string    
              district:
                type: string
              province:
                type: string
              ward:
                type: string          
              fulladdress:
                type: string 
              parcel: 
                type: string
              quantity:
                type: number 
              solved_status:
                type: boolean
      responses:
        200:
          description: Update consultancy successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update consultancy successfully.",
              "data": {
                "name": "string",
                "email": "string",
                "phone": "string",
                "service" : "string",
                "district": "string",
                "province": "string",
                "ward": "string",
                "fulladdress" : "string",
                "parcel": "string",
                "quantity": "string",    
                "solved_status": "boolean",
              }
            }
        400:
          description: Update consultancy failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "This consultancy is not existed.",
              },
              "error2": {
                "success": false,
                "message": "The service is not existed.",
              }
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "consultancy"
      summary: "Delete a existing consultancy"
      produces:
        - application/json
      parameters:
        - in: path
          name: consultancyId
          type: string
          required: true
          description: Id of a consultancy 
      responses:
        200:
          description: Delete consultancy successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete successfully.",
            }
        400:
          description: Delete consultancy failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Consultancy does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /consultancy:
    post:
      tags:
        - "consultancy"
      summary: "Create a new consultancy"
      consumes:
        - application/json
      parameters:
        - in: body
          name: consultancy
          description: a new consultancy.
          schema:
            type: object            
            properties:
              service:
                type: string
              name:
                type: string
              email:
                type: string 
              phone: 
                type: string    
              district:
                type: string
              province:
                type: string
              ward:
                type: string          
              fulladdress:
                type: string 
              parcel: 
                type: string
              quantity:
                type: number 
              solved_status:
                type: boolean
      responses:
        200:
          description: Send consultancy successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Send email successfully.",
            }
        400:
          description: Create consultancy failed. 
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Send email failed.",
              },
              "error2": {
                "success": false,
                "message": "The service is not existed.",
              }
            }
  /admin/warehouse:
    post:
      tags:
        - "warehouse"
      summary: "Create a new warehouse"
      consumes:
        - application/json
      parameters:
        - in: body
          name: warehouse
          description: a new warehouse.
          schema:
            type: object      
            required: 
            - name, street, ward, district, province, phone     
            properties:
              name:
                type: string
              phone: 
                type: string
              street:
                type: string               
              ward:
                type: string 
              district: 
                type: string
              province:
                type: string
              storekeeper:
                type: string
      responses:
        200:
          description: Create new warehouse successfully.
          schema:
            type: object
            example:  {
              "success": true,
              "message": "Create new warehouse successfully.",
            }
        400:
          description: Error
          schema:
            type: object
            example:  {
              "error1": {
                "success": false,
                "message": "Supplied address does not exist.",
              },
              "error2": {
                "success": false,
                "message": "the warehouse's name is existed.",
              }
            }
      security:
        - ApiKeyAuth: []
  /admin/warehouse/{warehouseId}:
    put:
      tags:
        - "warehouse"
      summary: "Update a existing warehouse"
      consumes:
        - application/json
      parameters:
        - in: path
          name: warehouseId
          schema: 
            type: string
          required: true
          description: warehouse id
        - in: body
          name: warehouse
          description: a existing warehouse.
          schema:
            type: object
            properties:
              name:
                type: string
              phone: 
                type: string
              street:
                type: string               
              ward:
                type: string 
              district: 
                type: string
              province:
                type: string            
      responses:
        200:
          description: Update warehouse successfully.
          schema:
            type: object
            example:  {
              "success": true,
              "message": "Update warehouse successfully",
              "data": {
                "name": "string",
                "phone": "string",
                "street": "string",
                "ward": "string",
                "district": "string",
                "province": "string",
                "lon": "number",
                "lat": "number",
              }
            }
        400:
          description: Update warehouse failed.
          schema:
            type: object
            example:  {
              "error1": {
                "success": false,
                "message": "Supplied address does not exist.",
              },
              "error2": {
                "success": false,
                "message": "the warehouse's name is existed.",
              },
              "error3": {
                "success": false,
                "message": "New name is existed.",
              },
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "warehouse"
      summary: "Delete a existing warehouse"
      produces:
        - application/json
      parameters:
        - in: path
          name: warehouseId
          type: string
          required: true
          description: Id of a warehouse 
      responses:
        200:
          description: Delete warehouse successfully.
          schema:
            type: object
            example:  {
              "success": true,
              "message": "Delete warehouse successfully.",
              "data": {
                "_id": "id",
                "name": "string",
                "phone": "string",
                "street": "string",
                "ward": "string",
                "district": "string",
                "province": "string",
                "lon": "number",
                "lat": "number",
              }
            }
        400:
          description: Delete warehouse failed.
          schema:
            type: object
            example:  {
              "success": false,
              "message": "Warehouse does not exist",
            }
      security:
        - ApiKeyAuth: []
  /warehouse:
    get:
      tags:
        - "warehouse"
      summary: get warehouse
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of warehouse in a page 
        - in: query
          name: district
          type: string
          description: district
        - in: query
          name: province
          type: string
          description: province
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
      responses:
        200:
          description: get warehouse successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get warehouse successful.",
              "data": {
                "length": "number",
                "warehouses": [
                  {
                    "_id": "id",
                    "name": "string",
                    "phone": "string",
                    "street": "string",
                    "ward": "string",
                    "district": "string",
                    "province": "string",
                    "lon": "number",
                    "lat": "number",
                    "storekeeper": "id",
                    "turnover": "number",
                    "inventory_product_shipments": [
                      {
                        "shipment": "id",
                        "turnover": "number",
                        "status": "string",
                        "_id": "id",
                      },
                    ],
                  }
                ]
              }     
            }
        400:
          description: No warehouse found
          schema:
            type: object
            example: {
              "success": false,
              "message": "No warehouse found",
            }
  /warehouse/{warehouseId}:
    get:
      tags:
        - "warehouse"
      summary: get warehouse by id
      produces:
        - application/json
      parameters:
        - in: path
          name: warehouseId
          type: string
          required: true
          description: Id of a warehouse 
      responses:
        200:
          description: get warehouse successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get warehouse successful.",
              "data": {
                "_id": "id",
                "name": "string",
                "phone": "string",
                "street": "string",
                "ward": "string",
                "district": "string",
                "province": "string",
                "lon": "number",
                "lat": "number",
                "storekeeper": "id",
                "turnover": "number",
                "inventory_product_shipments": [
                  {
                    "shipment": "id",
                    "turnover": "number",
                    "status": "string",
                    "_id": "id",
                  },
                ],
              }     
            }
        400:
          description: No warehouse found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "No warehouse found",
            }
  /warehouse/add-inventory/{warehouseId}:
    put:
      tags:
        - "warehouse"
      summary: add inventory product shipment to warehouse for storekeeper
      produces:
        - application/json
      parameters:
        - in: path
          name: warehouseId
          type: string
          required: true
          description: Id of a warehouse
        - in: body
          name: warehouse
          description: inventory product shipment.
          schema:
            type: object
            properties:
              productShipmentId:
                type: string
              turnover:
                type: number
      responses:
        200:
          description: Add  product shipment successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Add  product shipment successfully.",
            }
        400:
          description: Add  product shipment failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "No information",
            }
      security:
        - ApiKeyAuth: []
  /warehouse/update-inventory/{warehouseId}:
    put:
      tags:
        - "warehouse"
      summary: change inventory status of warehouse for storekeeper
      produces:
        application/json
      parameters:
        - in: path
          name: warehouseId
          type: string
          required: true
          description: Id of a warehouse
        - in: body
          name: warehouse
          description: inventory product shipment and status.
          schema:
            type: object
            properties:
              productShipmentId:
                type: string
              status:
                type: string
      responses:
        200:
          description: Update inventory status successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "${status} successfully",
            }
        400:
          description: Update inventory status failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "No information.",
              },
              "error2": {
                "success": false,
                "message": "This product shipment can not be found in this warehouse.",
              },
              
            }
      security:
        - ApiKeyAuth: []
  /participant:
     get:
      tags:
        - "participant"
      summary: get all participant
      produces:
        - application/json
      parameters:        
        - in: query
          name: limit
          type: string
          description: number of participant in a page         
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
      responses:
        200:
          description: get participant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get participant successfully.",
              "data": [
                {
                  "name": "string",
                  "banner": "path",    
                  "description": "string",
                },
              ]
            }
        400:
          description: participant is not found. 
          schema:
            type: object 
            example: {
              "success": false,
              "message": "No information found.",
            }
  /participant/{participantId}:
    get:
      tags:
        - "participant"
      summary: get participant by id
      produces:
        - application/json
      parameters:
        - in: path
          name: participantId
          type: string
          required: true
          description: Id of a participant 
      responses:
        200:
          description: get participant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get participant successfully.",
              "data": {
                "name": "string",
                "banner": "path",    
                "description": "string",
              },
            }
        400:
          description: participant is not found.
          schema:
            type: object 
            example: {
              "success": false,
              "message": "No information found.",
            } 
  /participant/service/{serviceId}:
    get:
      tags:
        - "participant"
      summary: get list of participants by serviceId
      produces:
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
      responses:
        200:
          description: Get participant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get participant successfully.",
              "data": [
                {
                  "name": "string",
                  "banner": "path",    
                  "description": "string",     
                },
              ] 
            }          
        400:
          description: participant is not found.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Service is not existed",
            }  
  /admin/participant:
    post:
      tags:
        - "participant"
      summary: "Create a new participant"
      consumes: 
        - multipart/form-data
      parameters:
        - in: formData
          name: name
          description: name of participant.
          type: string  
          required: true
        - in: formData
          name: description
          description: description of participant.
          type: string  
          required: true
        - in: formData
          name: name_detail
          description: name_detail of participant.
          type: string  
          required: true
        - in: formData
          name: banner
          description: banner of participant.
          type: file  
      responses:
        200:
          description: Create participant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create participant successfully.",
              "data": {
                "name": "string",
                "banner": "path",    
                "description": "string",       
              },
            }        
        400:
          description: Create participant failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Service is not existed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/participant/{participantId}:
    put:
      tags:
        - "participant"
      summary: "Update an existing participant"
      consumes: 
        - multipart/form-data
      parameters:
        - in: path
          name: participantId
          type: string
          description: Id of a participant
        - in: formData
          name: name
          description: name of participant.
          type: string  
        - in: formData
          name: name_detail
          description: name_detail of participant.
          type: string  
          required: true
        - in: formData
          name: description
          description: description of participant.
          type: string  
      responses:
        200:
          description: Update participant successfully.
          schema:
            type: object
            example: {}   
        400:
          description: Create participant failed.
          schema:
            type: object
            example: {
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "participant"
      summary: "Delete a existing participant"
      produces:
        - application/json
      parameters:
        - in: path
          name: participantId
          type: string
          required: true
          description: Id of a participant 
      responses:
        200:
          description: Delete participant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Deleted participant successfully.",
            }
        400:
          description: Delete participant failed.
          schema:
            type: object
            example: {
              "success": false,
              "message" : "Participant does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /admin/participant/banner/{participantId}:
    put:
      tags:
        - "participant"
      summary: "Update an existing participant"
      consumes: 
        - multipart/form-data
      parameters:
        - in: path
          name: participantId
          type: string
          description: Id of a participant
        - in: formData
          name: banner
          description: banner of participant.
          type: file     
      requestBody:
        content:
          multipart/form-data:
            schema:            
              type: object
              properties:     
                name:           
                  type: string
                banner:
                  type: string
                  format: base64
                description:  
                  type: string
      responses:
        200:
          description: Update participant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update participant successfully.",
              "data": {
                "name": "string",
                "banner": "path",    
                "description": "string",     
              },
            }        
        400:
          description: Create participant failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "New name is existed",
              },
              "error2": {
                "success": false,
                "message": "Participant does not exist.",
              },
            }
      security:
        - ApiKeyAuth: []
    
  /quote:
     get:
      tags:
        - "quote"
      summary: get all quote
      produces:
        - application/json
      parameters:        
        - in: query
          name: limit
          type: string
          description: number of participant in a page         
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
      responses:
        200:
          description: get quote successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get quote successfully.",
              "data": [
                {
                  "name": "string",
                  "description": "string", 
                  "quote": "string",
                  "avatar": "path",
                },
              ]
            }
        400:
          description: quote is not found. 
          schema:
            type: object
            example: {
              "success": false,
              "message": "No information found.",
            }
  /quote/{quoteId}:
    get:
      tags:
        - "quote"
      summary: get quote by id
      produces:
        - application/json
      parameters:
        - in: path
          name: quoteId
          type: string
          required: true
          description: Id of a quote 
      responses:
        200:
          description: Get quote successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get quote successfully.",
              "data":{
                "name": "string",
                "description": "string", 
                "quote": "string",
                "avatar": "path",
              },
            }
        400:
          description: Quote is not found. 
          schema:
            type: object
            example: {
              "success": false,
              "message": "No information found.",
            }
  /quote/service/{serviceId}:
    get:
      tags:
        - "quote"
      summary: get list of quotes by serviceId
      produces:
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
      responses:
        200:
          description: Get quote successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get quote successfully.",
              "data": [
                {
                "name": "string",
                "description": "string", 
                "quote": "string",
                "avatar": "path",    
                },
              ]
            }          
        400:
          description: quote is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Service is not existed.",
            }
  /admin/quote/{serviceId}:
    post:
      tags:
        - "quote"
      summary: "Create a new quote"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: formData
          name: name
          description: name of customer.
          type: string 
          required: true
        - in: formData
          name: description
          description: description of customer.
          type: string 
          required: true
        - in: formData
          name: quote
          description: detail of quote.
          type: string 
          required: true  
        - in: formData
          name: avatar
          description: avatar of quote.
          type: file   
      responses:
        200:
          description: Create quote successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Created quote successfully.",
              "data": {
                "name": "string",
                "description": "string", 
                "quote": "string",
                "avatar": "path",    
              }
            }        
        400:
          description: Create quote failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Service is not existed.",
              },
              "error2": {
                "success": false,
                "message": "This person is existed !",
              }
            }
      security:
        - ApiKeyAuth: []
  /admin/quote/{quoteId}:
    put:
      tags:
        - "quote"
      summary: "Update an existing quote"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: quoteId
          type: string
          required: true
          description: Id of a quote 
        - in: formData
          name: name
          description: name of customer.
          type: string 
        - in: formData
          name: description
          description: description of customer.
          type: string 
        - in: formData
          name: quote
          description: detail of quote.
          type: string
      responses:
        200:
          description: Update quote successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update quote successfully.",
              "data": {
                "name": "string",
                "description": "string", 
                "quote": "string",
                "avatar": "path",        
              }
            }        
        400:
          description: Create quote failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Quote does not exist.",
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "quote"
      summary: "Delete a existing quote"
      produces:
        - application/json
      parameters:
        - in: path
          name: quoteId
          type: string
          required: true
          description: Id of a quote 
      responses:
        200:
          description: Delete quote successfully.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Delete quote successfully.",
            }
        400:
          description: Delete quote failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Quote does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /order:
    post:
      tags:
        - "order"
      summary: "Customer create a new order"
      consumes:
        - application/json
      parameters:
        - in: body
          name: order
          description: new order information.
          schema:
            type: object
            properties: 
              origin:
                type: string
                required: true
              destination:
                type: string
                required: true
              note:
                type: string          
              sender:
                type: object
                properties:
                  name:
                    type: string
                    required: true
                  phone:
                    type: string
                    required: true
                  address:
                    type: string
                    required: true
              receiver: 
                type: object
                properties:
                  name:
                    type: string
                    required: true
                  phone:
                    type: string
                    required: true
                  address:
                    type: string
                    required: true
              shipping:
                type: object
                properties:
                  type_shipping:
                    type:  string
                    enum: [express, fast, super]
                  standard_fee:
                    type: string
                    required: true
                  receiver_fee:
                    type: string
                  fuel_surcharge:
                    type: string
                  other:
                    type:  string
                  remote_areas_surcharge:
                    type:  string
                  VAT_code:
                    type:  string
                  VAT_fee:
                    type: string
                  before_discount:
                    type: string
                  insurance_fee:
                    type: string
                  after_discount:
                    type: string
                  after_discount_tax:
                    type: string
              product:
                type: object
                properties:
                  product_name:
                    type: string
                    required: true
                  cash_payment:
                    type: string
                    required: true
                    enum: [CC_CASH,PP_CASH,PP_PM]
                  quantity:
                    type:  string
                    required: true
                  weight:
                    type:  string
                    required: true
                  product_types:
                    type:  string
                    enum: [goods, fresh,letter]
                  goods_value:
                    type: string
                  note:
                    type: string
                  transportation:
                    type: string
                    required: true
                    enum: [A,T]
              cod:
                type: object
                properties:
                  cod:
                    type: string
                  fee:
                    type:  string
              company:
                type: object
                properties:
                  name:
                    type: string
                  address:
                    type:  string                     
      responses:
        200:
          description: Create new order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create new order successfully.",
              "data": {}
            }
        400:
          description: Create order failed.
          schema:
            type: object
            example: {
             
            }
      security:
        - ApiKeyAuth: []
    
  /order/{orderId}:    
    get: 
      tags:
        - "order"
      summary: Customer get information of an order
      produces:
        - application/json     
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id of a order 
      responses:
        200:
          description: get order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get order successfully.",
              "data": {
                
              }
            }          
        400:
          description: The order ${orderId} does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The order ${orderId} does not exist.",
            }
      security:
        - ApiKeyAuth: []
    put: 
      tags:
        - "order"
      summary: Customer update information of an waiting order
      produces:
        - application/json     
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id of a order 
        - in: body
          name: order
          description: new order information. service is delivery service's name.
          schema:
            type: object
            properties:              
              sender:
                type: object
                properties:
                  name:
                    type: string
                  phone:
                    type: string
                  address:
                    type: string
              receiver: 
                type: object
                properties:
                  name:
                    type: string
                  phone:
                    type: string
                  address:
                    type: string
              shipping:
                type: object
                properties:
                  insurance_fees:
                    type: string
                    enum: ['collected', 'waiting', 'paid']
                  note:
                    type:  string
                  total_fee:
                    type:  string
                  pick_up_time:
                    type: string
              product:
                type: object
                properties:
                  name:
                    type: string
                  quantity:
                    type:  string
                  types:
                    type:  string
                  goods_value:
                    type: string
                  weight:
                    type: string
                  other:
                    type:  string
                  note:
                    type:  string
                  service:
                    type: string   
      responses:
        200:
          description: Update the order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update the order successfully.",
              "data": {
                "_id": "6323e46331bbe8e3bb11ffc5",
                "orderId": "60772673",
                "service": {},
                "customer": {},
                "sender": {},
                "receiver": {},
                "origin": {},
                "destination": {},
                "status": "completed",
                "feedback": [],
                "createdAt": "2022-09-16T02:50:11.347Z",
                "updatedAt": "2022-09-20T03:40:49.920Z",
                "__v": 0,
                "products": []
              }
            }  
        400:
          description: The order ${orderId} does not exist.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "The order ${orderId} does not exist.",
              },
              "error2": {
                "success": false,
                "message": "Can not edit this order because it is not in waiting process.",
              },
              "error3": {
                "success": false,
                "message": "Origin is not existing.",
              },
              "error4": {
                "success": false,
                "message": "Origin warehouse doesn't exist.",
              },
              "error5": {
                "success": false,
                "message": "Destination is not existing.",
              },
              "error6": {
                "success": false,
                "message": "Destination warehouse doesn't exist.",
              }
            }
      security:
        - ApiKeyAuth: []
  /order/customer:
    get:
      tags:
        - "order"
      summary: "get all order of customer by date"
      consumes:
        - application/json
      parameters:
        - in: query
          name: page
          type: integer
          required: true
          default: 1
        - in: query
          name: pageSize
          type: integer
          required: true
          default: 20
        - in: query
          name: keyword
          type: String
          description: receiver's name or receiver's phone or product's name or shipping's id
        - in: query
          name: status
          type: String
          description: status of order
          enum : ['waiting for pickup','in progress','dispatching','dispatched','in return','return confirmation',"return success",'problem order','canceled']
        - in: query
          name: startDate
          type: string  
          description: with format yyyy-mm-dd:hh:mm:ss - 2022-07-23:00:00:00
        - in: query
          name: endDate
          type: string  
          description: with format yyyy-mm-dd:hh:mm:ss -2025-07-23:00:00:00
      responses:
        200:
          description: Get order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get order successfully.",
              "data": [
                {      }
              ]
            }
        400:
          description: Information not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - ApiKeyAuth: []  
  /order/finance/:startDate/:endDate:
    get:
      tags:
        - "order"
      summary: "get all order of customer by date to finance management"
      consumes:
        - application/json
      parameters:
        - in: path
          name: startDate
          type: Date
          required: true
          description: startDate
        - in: path
          name: endDate
          type: Date
          required: true
          description: endDate
      responses:
        200:
          description: Get list order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get list order successfully.",
              "data": [
               
              ]
            }
        400:
          description: Information not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - ApiKeyAuth: []
  /order/feedlback/{orderId}:
    put:
      tags:
        - "order"
      summary: send Feedlback to staff or customer
      produces:
        - application/json
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id Of a order
        - in: body
          name: Content
          description: Create Feedlback 
          schema:
            type: object
            properties:
              content:
                type: string
      responses:
        200:
          description: create order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create Feeback successfully",
            }          
        400:
          description: The order ${orderId} does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The order ${orderId} does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /order/{orderId}/feedback:
    get:
      tags:
        - "order"
      summary: get feedlback by Staff or customer order
      produces:
        - application/json
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id Of a order
      responses:
        200: 
          description: get feedback successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get feedback successfully",
              "data": {
                      "user": "string",
                      "content": "string",
                      "_id": "objectId",
                      },
            }
        400:
          description: the order does not exits or forbidden
          schema: 
            type: object
            example: {
              "success": false,
              "message": "The order does not exist or forbidden",
            }
      security:
        - ApiKeyAuth: []
  /admin/order/tracking/scan/{orderId}:
     patch: 
      tags:
        - "order"
      summary: admin update tracking of an order by orderId
      produces:
        - multipart/form-data    
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id of a order
        - in: formData
          type: string
          name: scan_type
          default: 'received_order'
          description: scan type
          enum: ['received_order','sending_postoffice','incoming_postoffice','sending_warehouse','incoming_warehouse','shipping','unusual_order','packaging','remove_packaging']
          required: true
        - in: formData
          name: scan_code_time
          type : string
          description: time do action with format yyyy-mm-dd:hh:mm:ss
          default: "2023-07-23:00:10:00"
          required: true
        - in: formData 
          type : string
          name: transportation
          description: not required if scan_type = received_order
          enum: ['truck', 'boat', 'plane' , 'motorbike']
        - in: formData
          name: post_office
          type : string
          description: ObjectId mongoose of post_office; required if scan_type = received_order/shipper/sending_postoffice/incoming_postoffice/remove_packaging
        - in: formData 
          name: warehouse
          type : string
          description: ObjectId mongoose of warehouse; required if scan_type = sending_warehouse/incoming_warehouse/packaging
        - in: formData
          name: driver
          type : string
          description: ObjectId mongoose of staff, staff type = driver;required when action send/receive
        - in: formData
          name: shipper
          type : string
          description: ObjectId mongoose of staff, staff type = shipper;required if scan_type = shipping
        - in: formData
          name: issueType
          type : string
          description: type of issue; required if  scan_type = unusual_order
          enum: ['Khách hẹn lại ngày nhận','Không liên lạc được với khách hàng','Bưu kiện chuyển hoàn','Khách từ chối nhận hàng, từ chối trả phí','Hàng cấm gửi','Khách tự đến bưu cục lấy hàng','Khách báo hủy đơn','Không liên hệ được người gửi','Người gửi hẹn lại ngày lấy','Đóng gói không đảm bảo','Bưu kiện chưa sẵn sàng','Sai thông tin người gửi','Người gửi đăng ký sai trọng lượng','Quá khổ quá tải']    
        - in: formData
          name: seal_code
          type : string
          description: type of issue; required if  scan_type = packaging/remove_packaging
      requestBody:
        content: 
           multipart/form-data:
            schema:            
              type: object
              properties:      
                orderId:           
                  type: string
                scan_type:
                  type: string
                transportation:
                  type: string
                scan_code_time:
                  type: string
                post_office:
                  type: string
                warehouse:
                  type: string
                driver:
                  type: string
                shipper:
                  type: string
                issueType:
                  type: string
                seal_code:
                  type: string
      responses:
        200:
          description: admin update tracking of an order by orderId successfully.
          schema:
            type: object
            example: {
             
            }          
        400:
          description: The order ${orderId} does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The order ${orderId} does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /admin/order:
    get:
      tags:
        - "order"
      summary: Admin get list of orders
      produces:
        - application/json      
      parameters:
        - in: query
          name: keyword
          type: String
          description: receiver's name or receiver's phone or product's name or shipping's id
        - in: query
          name: status
          type: String
          description: status of order
        - in: query
          name: startDate
          type: Date  
          description: startDate
        - in: query
          name: endDate
          type: Date  
          description: endDate
      responses:
        200:
          description: get list of orders successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get list of orders successfully.",
              "data": {
                "length": "number",
                "orders": [
                  
                ]
              }
            }
      security:
        - ApiKeyAuth: []       
    post:
      tags:
        - "order"
      summary: "Admin create a new order for a customer"
      consumes:
        - application/json
      parameters:
        - in: body
          name: order
          description: new order information.
          schema:
            type: object
            properties: 
              origin:
                type: string
                required: true
              destination:
                type: string
                required: true
              pickup_staff:
                type: string
                required: true
              customer:
                type: string
                required: true
              note:
                type: string          
              sender:
                type: object
                properties:
                  name:
                    type: string
                    required: true
                  phone:
                    type: string
                    required: true
                  email:
                    type: string
                    required: true
                  address:
                    type: string
                    required: true
              receiver: 
                type: object
                properties:
                  name:
                    type: string
                    required: true
                  phone:
                    type: string
                    required: true
                  email:
                    type: string
                    required: true
                  address:
                    type: string
                    required: true
              shipping:
                type: object
                properties:
                  type_shipping:
                    type:  string
                    enum: [express, fast, super]
                  standard_fee:
                    type: string
                    required: true
                  receiver_fee:
                    type: string
                  fuel_surcharge:
                    type: string
                  other:
                    type:  string
                  remote_areas_surcharge:
                    type:  string
                  VAT_code:
                    type:  string
                  VAT_fee:
                    type: string
                  before_discount:
                    type: string
                  insurance_fee:
                    type: string
                  after_discount:
                    type: string
                  after_discount_tax:
                    type: string
              product:
                type: object
                properties:
                  product_name:
                    type: string
                    required: true
                  cash_payment:
                    type: string
                    required: true
                    enum: [CC_CASH,PP_CASH,PP_PM]
                  quantity:
                    type:  string
                    required: true
                  weight:
                    type:  string
                    required: true
                  product_types:
                    type:  string
                    enum: [goods, fresh, letter]
                  goods_value:
                    type: string
                  note:
                    type: string
                  transportation:
                    type: string
                    required: true
                    enum: [A,T]
              cod:
                type: object
                properties:
                  cod:
                    type: string
                  fee:
                    type:  string
              company:
                type: object
                properties:
                  name:
                    type: string
                  address:
                    type:  string                     
      responses:
        200:
          description: Create new order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create new order successfully.",
              "data": {}
            }
        400:
          description: Create order failed.
          schema:
            type: object
            example: {
             
            }
      security:
        - ApiKeyAuth: []
  /admin/order/{orderId}:
    get: 
      tags:
        - "order"
      summary: Admin get information of an order
      produces:
        - application/json     
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id of a order 
      responses:
        200:
          description: get order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get order successfully.",
              "data": {
                
              }
            }          
        400:
          description: The order ${orderId} does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The order ${orderId} does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /admin/order/status/{orderId}:
    put:
      tags:
        - "order"
      summary: Admin update order status
      produces:
        - application/json     
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id of a order 
        - in: body
          name: status
          description: update status (waiting, accepted, processing, completed, refused, cancel, pay, unpay)    
          type: string
          required: true
      responses:
        200:
          description: Change status of the order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Change status of the order successfully.",
              "data": {
              }
            }  
        400:    
          description: Can not change the status of this order.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Can not change the status of this order.",
            }    
        404:
          description: Order does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /admin/order/profit/{Id}:
    get: 
      tags:
        - "order"
      summary: Get profit report of each order by Id
      produces:
        - application/json     
      parameters:
        - in: path
          name: Id
          type: string
          required: true
          description: Id of a order 
      responses:
        200:
          description: Get profit of order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get profit of order successfully.",
              "data": {
                  "Id": "string",
                  "profit": "number",
              }
            }          
        400:
          description: The order has not been completed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The order has not been completed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/order/order-form/{orderId}:
    get: 
      tags:
        - "order"
      summary: Get pdf order form by Id
      produces:
        - application/json     
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: orderId of a order 
      responses:
        200:
          description: Get pdf order form.
          schema:
            type: object
        400:
          description: The order does not exits.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The order does not exits",
            }
        500:
          description: Server Internal Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Internal Error.",
            }
      security:
        - ApiKeyAuth: []

  /admin/order/supervision-delivery/{startDate}/{endDate}/{postCode}:
    get: 
      tags:
        - "order"
      summary: get delivery monitoring
      produces:
        - application/json     
      parameters:
        - in: path
          name: postCode
          type: string
          required: true
          description: code of postOffice
        - in: path
          name: startDate
          type: string
          required: true
          description: date format yyyy-mm-dd hh:mm:ss 
        - in: path
          name: endDate
          type: string
          required: true
          description: date format yyyy-mm-dd hh:mm:ss 
      responses:
        200:
          description: Get order success.
          schema:
            type: object
        400:
          description: Failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The order does not exits",
            }
        500:
          description: Server Internal Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Internal Error.",
            }
      security:
        - ApiKeyAuth: []
  /admin/order/supervision-delivery-detail/{staffCode}/{startDate}/{endDate}/{postCode}:
    get: 
      tags:
        - "order"
      summary: get delivery monitoring
      produces:
        - application/json     
      parameters:
        - in: path
          name: postCode
          type: string
          required: true
          description: code of postOffice
        - in: path
          name: staffCode
          type: string
          required: true
          description: code of staff
        - in: path
          name: startDate
          type: string
          required: true
          description: date format yyyy-mm-dd hh:mm:ss 
        - in: path
          name: endDate
          type: string
          required: true
          description: date format yyyy-mm-dd hh:mm:ss 
      responses:
        200:
          description: Get order success.
          schema:
            type: object
        400:
          description: Failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The order does not exits",
            }
        500:
          description: Server Internal Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Internal Error.",
            }
      security:
        - ApiKeyAuth: []
  /admin/order/supervision-sending-detail/{postOfficeCode}:
    get: 
      tags:
        - "order"
      summary: Get orders of report supervision sending  
      produces:
        - application/json     
      parameters:
        - in: path
          name: postOfficeCode
          type: string
          default: 'string'
          description: 'code of post office' 
          required: true
        - in: query
          name: page
          type: integer
          default: 1
          description: 'page of this query' 
          required: true
        - in: query
          name: pageSize
          type: integer
          default: 20
          description: 'pageSize of this query' 
          required: true
        - in: query
          name: from_date
          type: string
          default: '2020-07-23:00:10:00'
          description: 'from date string must have format yyyy-mm-dd:hh:mm:ss' 
          required: true
        - in: query
          name: to_date
          type: string
          default: '2026-07-23:00:10:00'
          description: 'to date string must have format yyyy-mm-dd:hh:mm:ss' 
          required: true
        - in: query
          name: detail_type
          type: string
          default: 'sent'
          description: 'detail type'
          enum : ['sent','not_sent','not_shipped','not_reviced','not_sign_reviced',] 
          required: true 
      responses:
        200:
          description: Get orders of report supervision sending 
          schema:
            type: object
            example: {
              "success": true,
              "message": "successfully.",
              "data": [{
              }]
            }    
        400:
          description: Miss required field.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Miss required field",
            }
        500:
          description: Server Internal Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Internal Error.",
            }
      security:
        - ApiKeyAuth: []
  /admin/order/supervision-sending/{postOfficeCode}:
    get: 
      tags:
        - "order"
      summary: Get report supervision sending order with post office code
      produces:
        - application/json     
      parameters:
        - in: path
          name: postOfficeCode
          type: string
          default: 'string'
          description: 'code of post office' 
          required: true
        - in: query
          name: from_date
          type: string
          default: '2020-07-23:00:10:00'
          description: 'from date string must have format yyyy-mm-dd:hh:mm:ss' 
          required: true
        - in: query
          name: to_date
          type: string
          default: '2026-07-23:00:10:00'
          description: 'to date string must have format yyyy-mm-dd:hh:mm:ss' 
          required: true 
      responses:
        200:
          description: Get report supervision sending order
          schema:
            type: object
            example: {
              "success": true,
              "message": "successfully.",
              "data": {
                  "postOfficeId": "string",
                  "num_orders_Sent": 1,
                  "num_orders_NotSent": 0,
                  "num_orders_NotShipped": 1,
                  "num_orders_NotReviced": 0,
                  "num_orders_NotSignReviced": 1,
                  "post_office": {}
              }
            }    
        400:
          description: Miss required field.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Miss required field",
            }
        500:
          description: Server Internal Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Internal Error.",
            }
      security:
        - ApiKeyAuth: []
  /orderIssue/:orderId/return:
    put: 
      tags:
        - "orderIssues"
      summary: Customers return goods
      produces:
        - application/json     
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: orderId of a order 
        - in: body
          name: orderIssue
          description: orderIssue.
          schema:
            type: object      
            properties:
              description:
                type: string
                required: true
      responses:
        200:
          description: successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "successfully.",
              "data": {
                  "orderId": "string",
                  "issuesType": "string",
                  "description": "string",
              }
            }          
        400:
          description: This orderIssues is already existed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "This orderIssues is already existed.",
            }
        404:
          description: Order not found or status of order not processing.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order not found or status of order not processing",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error ",
            }
      security:
        - ApiKeyAuth: []   
  /admin/orderIssue/orderIssues:
    post: 
      tags:
        - "orderIssues"
      summary: Update Order Issue
      produces:
        - application/json     
      parameters:
        - in: body
          name: orderId
          type: string
          required: true
          description: orderId of a order 
        - in: body
          name: issueType
          type: string
          required: true
          description: Type issue return, lost, damage, prohibited, unreachable, customerRefused, returnToSender, appointment
        - in: body
          name: description
          type: string
          description: description issue of order
          schema:
            type: object      
            properties:
              description:
                type: string
                required: true
              productIds:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: objectId
      responses:
        200:
          description: successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "successfully.",
              "data": {
                  "orderId": "string",
                  "issuesType": "string",
                  "description": "string",
                  "productIds": [],
              }
            }          
        400:
          description: This orderIssues is already existed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "This orderIssues is already existed.",
            }
        404:
          description: Order not found or status of order not processing
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order not found or status of order not processing",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error ",
            }
      security:
        - ApiKeyAuth: []   
  /admin/orderIssue/:id:
    get:
      tags:
        - "orderIssues"
      summary: "Get orderIssues by id"
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          type: ObjectId
          required: true
          description: id of OrderIssues
      responses:
        200:
          description: Get orderIssue successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orderIssue successfully.",
              "data": [
                {
                "issuesType": "string",
                "description": "string",
                "orderId": "string",
                "productIds": [],
                }
              ]
            }
        400:
          description: Information not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - ApiKeyAuth: []
  /admin/orderIssue:
    get:
      tags:
        - "orderIssues"
      summary: "Get list orderIssues"
      consumes:
        - application/json
      responses:
        200:
          description: Get orderIssue successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orderIssue successfully.",
              "data": [
                {
                "issuesType": "string",
                "description": "string",
                "orderId": "string",
                "productIds": [],
                }
              ]
            }
        400:
          description: Information not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - ApiKeyAuth: []
  orderIssue/orders/issuses:
    get:
      tags:
        - "orderIssues"
      summary: "Get orderIssue of customer"
      consumes:
        - application/json
      responses:
        200:
          description: Get orderIssue successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orderIssue successfully.",
              "data": [
                {
                "issuesType": "string",
                "description": "string",
                "orderId": "string",
                "productIds": [],
                }
              ]
            }
        400:
          description: Information not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - ApiKeyAuth: []
  /orderIssue/:
    get:
      tags:
        - "orderIssues"
      summary: "Get order return of customer"
      consumes:
        - application/json
      parameters:
        - in: path
          name: orderId
          type: string
          description: orderid of Order
        - in: path
          name: issueType
          type: string
          description: issueType of OrderIssue
      responses:
        200:
          description: Get orderIssue successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orderIssue successfully.",
              "data": [
                {
                "issuesType": "string",
                "description": "string",
                "orderId": "string",
                "productIds": [],
                }
              ]
            }
        400:
          description: Information not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - ApiKeyAuth: []   
  /orderIssue/orderId/:orderId:
    get:
      tags:
        - "orderIssues"
      summary: "Get orderIssues by orderid"
      consumes:
        - application/json
      parameters:
        - in: path
          name: orderid
          type: string
          required: true
          description: orderid of Order
      responses:
        200:
          description: Get orderIssue successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orderIssue successfully.",
              "data": [
                {
                "issuesType": "string",
                "description": "string",
                "orderId": "string",
                "productIds": [],
                }
              ]
            }
        400:
          description: Information not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - ApiKeyAuth: []
  /order/COD/{startDate}/{endDate}:
    get:
      tags:
        - order
      summary: get cod order information
      consumes:
        - application/json
      parameters:
        - in: path
          name: startDate
          type: string
          required: true
          description: startDate
        - in: path
          name: endDate
          type: string
          required: true
          description: endDate
      responses:
        200:
          description: get about information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get cod information successfully.",
              "data": {},
            }
        400:
          description: cod information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "cod information is not found.",
            }
      security:
        - ApiKeyAuth: []
  /order/endCOD/{startDate}/{endDate}:
    get:
      tags:
        - order
      summary: get cod order information
      consumes:
        - application/json
      parameters:
        - in: path
          name: startDate
          type: string
          required: true
          description: startDate
        - in: path
          name: endDate
          type: string
          required: true
          description: endDate
      responses:
        200:
          description: get about information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get cod information successfully.",
              "data": {},
            }
        400:
          description: cod information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "cod information is not found.",
            }
      security:
        - ApiKeyAuth: []
  /product/{orderId}:
    post:
      tags:
        - "product"
      summary: "Customer add a new product to order"
      consumes:
        - application/json
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id of order
        - in: body
          name: products
          description: array of products.
          schema:
            type: object      
            properties:
              products:
                type: array
                items:
                  type: object    
                  properties:              
                    name: 
                      type: string
                    quantity:
                      type: integer
                    unit: 
                      type: string   
                      enum: ['m3', 'kg', 'ton']
      responses:
        200:
          description: Add product(s) successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Add product to order successfully.",
              "data": [
                {
                "name": "string",
                "quantity": "number",
                "unit": "string",
                }
              ]
            }
        400:
          description: Add product(s) failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Order is not found.",
              },
              "error2": {
                "success": false,
                "message": "Orders can't add more products.",
              },
              "error3": {
                "success": false,
                "message": "quantity not valiable.",
              },
              "error4": {
                "success": false,
                "message": "Unit Not valiable.",
              }
            }
      security:
        - ApiKeyAuth: []
    get:
      tags:
        - "product"
      summary: "Customer get product of an order"
      consumes:
        - application/json
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id of order         
      responses:
        200:
          description: Get product successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get products successfully.",
              "data": [
                {
                "name": "string",
                "quantity": "number",
                "unit": "string",
                "order": "string",
                "product_shipments": [],
                }
              ]          
            }
        400:
          description: Get product failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order is not found.",
            }
      security:
        - ApiKeyAuth: []
  /product/{productId}:
    put:
      tags:
        - "product"
      summary: "Customer update product in waiting order"
      consumes:
        - application/json
      parameters:
        - in: path
          name: productId
          type: string
          required: true
          description: productId
        - in: body
          name: product
          description: updated product
          schema:
            type: object      
            properties:
              name: 
                type: string
              quantity:
                type: integer
              unit: 
                type: string   
                enum: ['m3', 'kg', 'ton']            
      responses:
        200:
          description: Update product successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update product successfully.",
            }
        400:
          description: Update product failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Product does not exist.",
              },
              "error2": {
                "success": false,
                "message": "Order for this product is not found.",
              },
              "error3": {
                "success": false,
                "message": "Product can't be changed.",
              },
              "error4": {
                "success": false,
                "message": "quantity not valiable.",
              },
              "error5": {
                "success": false,
                "message": "Unit Not valiable.",
              }
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "product"
      summary: "Customer delete product in waiting order"
      consumes:
        - application/json
      parameters:
        - in: path
          name: productId
          type: string
          required: true
          description: productId                      
      responses:
        200:
          description: Delete product successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete product successfully.",
            }
        400:
          description: Delete product failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Product does not exist.",
              },
              "error2": {
                "success": false,
                "message": "Order for this product is not found.",
              },
              "error3": {
                "success": false,
                "message": "Product can't be changed.",
              }
            }
      security:
        - ApiKeyAuth: []
  /admin/product:
    get:
      tags:
        - "product"
      summary: "Admin get list of products"
      consumes:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of product on a page
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sort by (name, quantity, updatedAt)
        - in: query
          name: orderId
          type: string
          description:  orderId
      responses:
        200:
          description: Get product successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get product successfully.",
              "data": [
                {
                "name": "string",
                "quantity": "number",
                "unit": "string",
                "order": "string",
                "product_shipments": [],                  
                }
              ],          
            }
        400:
          description: Get product failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order is not found.",
            }
      security:
        - ApiKeyAuth: []
  /admin/product/{orderId}:
    post:
      tags:
        - "product"
      summary: "Admin add a new product to order"
      consumes:
        - application/json
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: orderId of order
        - in: body
          name: products
          description: array of products.
          schema:
            type: object      
            properties:
              products:
                type: array
                items:
                  type: object    
                  properties:              
                    name: 
                      type: string
                    quantity:
                      type: integer
                    unit: 
                      type: string   
                      enum: ['m3', 'kg', 'ton']
      
      responses:
        200:
          description: Add product(s) successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Add product to order successfully.",
              "data": [
                {
                "name": "string",
                "quantity": "number",
                "unit": "string",
                }
              ]
            }
        400:
          description: Add product(s) failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Order is not found.",
              },
              "error2": {
                "success": false,
                "message": "Orders can't add more products.",
              },
              "error3": {
                "success": false,
                "message": "quantity not valiable.",
              },
              "error4": {
                "success": false,
                "message": "Unit Not valiable.",
              }
            }
      security:
        - ApiKeyAuth: []
  /admin/product/{productId}:
    get:
      tags:
        - "product"
      summary: "Admin get a product"
      consumes:
        - application/json
      parameters:
        - in: path
          name: productId
          type: string
          description:  productId
      responses:
        200:
          description: Get product information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get product successfully.",
              "data":
                {
                "name": "string",
                "quantity": "number",
                "unit": "string",
                "order": "string",
                "product_shipments": [],                  
                }
            }
        400:
          description: Get product failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Product is not found.",
            }
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "product"
      summary: "Admin update product in waiting order"
      consumes:
        - application/json
      parameters:
        - in: path
          name: productId
          type: string
          required: true
          description: productId
        - in: body
          name: product
          description: updated product
          schema:
            type: object      
            properties:
              name: 
                type: string
              quantity:
                type: integer
              unit: 
                type: string   
                enum: ['m3', 'kg', 'ton']            
      responses:
        200:
          description: Update product successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update product successfully.",
            }
        400:
          description: Update product failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Product does not exist.",
              },
              "error2": {
                "success": false,
                "message": "Order for this product is not found.",
              },
              "error3": {
                "success": false,
                "message": "Product can't be changed.",
              }
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "product"
      summary: "Admin delete product in waiting order"
      consumes:
        - application/json
      parameters:
        - in: path
          name: productId
          type: string
          required: true
          description: productId                      
      responses:
        200:
          description: Delete product successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete product successfully.",
            }
        400:
          description: Delete product failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Product does not exist.",
              },
              "error2": {
                "success": false,
                "message": "Order for this product is not found.",
              },
              "error3": {
                "success": false,
                "message": "Product can't be changed.",
              }
            }
      security:
        - ApiKeyAuth: []
  /admin/product/{productId}/movement:
    get:
      tags:
        - "product"
      summary: "Admin get movement information of product"
      consumes:
        - application/json
      parameters:
        - in: path
          name: productId
          type: string
          description:  productId
      responses:
        200:
          description: Get product movement successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get product movement information successfully.",
              "data": [
                {
                "origin": "string",
                "destination": "string",
                "shipments": [],                  
                }
              ],          
            }
        400:
          description: Get product movement failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Product does not exist",
            }
      security:
        - ApiKeyAuth: []
  /carriageContract:
    get:
      tags: 
        - "carriageContract"
      summary: "Get list of carriagecontract"
      productes:
        - application/json
      parameters:
        - in: query
          name: car_maintenance
          type: string
          description: car_maintenance
        - in: query
          name: leases
          type: string
          description: leases
      responses:
        200:
          description: get distance information successfully.
          schema:
            type: object
            example: {
                  "car_maintenance": "string",
                  "type-fee": "number",
                  "leases":  "number",
            }
        400:
          description: distance information is not found.  
      security:
        - ApiKeyAuth: []
  /carriageContract/{_Id}:
    get:
      tags: 
        - "carriageContract"
      summary: "Get list carriagecontract By Id"
      productes:
        - application/json
      parameters:
        - in: path
          name: _Id
          type: string
          description: _Id
      responses:
        200:
          description: get distance information successfully.
          schema:
            type: object
            example: {
                  "car_maintenance": "string",
                  "type-fee": "number",
                  "leases":  "number",
            }
        400:
          description: distance information is not found.  
      security:
        - ApiKeyAuth: []

  /admin/carriageContract/:
    get:
      tags:
        - "carriageContract" 
      summary: "Get Admin list carriageContract"
      productes:
        - application/json
      parameters:
        - in: query
          name: car_maintenance
          type: string
          description: car_maintenance
        - in: query
          name: leases
          type: string
          description: leases
      responses:
        200:
          description: get distance information successfully.
          schema:
            type: object
            example: {
                  "car_maintenance": "Date",
                  "type-fee": "Number",
                  "leases":  "String",
            }
        400:
          description: distance information is not found.
      security:
        - ApiKeyAuth: []
  /admin/carriageContract/create:
    post:
      tags: 
        - "carriageContract"
      summary: "Post Admin of carriageContract"
      consumes:
        - application/json
      parameters:
        - in: body
          name: CarriageContract"
          schema:
            type: "object"
            required: true
            properties:
              car_maintenance: 
                type: Date
              type-fee: 
                type: Number
              leases: 
                type: String   
      responses:
        200:
          description: get distance information successfully.
          schema:
            type: object
            example: {
                  "car_maintenance": "String",
                  "type-fee": "Number",
                  "leases":  "String",
            }
        404:
          description: receiver's ID didn't exist.
      security:
        - ApiKeyAuth: []
  /admin/carriageContract/{_id}:
    put:
      tags: 
        - "carriageContract"
      summary: "Put Admin list of carriageContract"
      consumes:
        - application/json
      productes:
        - application/json
      parameters:
        - in: path
          name: _id
          type: string
          required: true
          description: Id of a department
        - in: body
          name: movingcontract"
          schema:
            type: "object"
            required: true
            properties:
              car_maintenance: 
                type: String
              type-fee: 
                type: Number
              leases:  
                type: String
      responses:
        200:
          description: get distance information successfully.
          schema:
            type: object
            example: {
                  "car_maintenance": "string",
                  "type-fee": "Number",
                  "leases":  "String",
            }
        400:
          description: distance information is not found.  
      security:
        - ApiKeyAuth: []
  /admin/carriageContract/delete/{_id}:
    delete:
      tags: 
        - "carriageContract"
      summary: "Delete Admin list of carriageContract"
      productes:
        - application/json
      parameters:
        - in: path
          name: _id
          type: string
          required: true
          description: Id of a department      
      responses:
        200:
          description: get distance information successfully.
          schema:
            type: object
            example: {
                  "car_maintenance": "String",
                  "type-fee": "Number",
                  "leases":  "String",
            }
        400:
          description: distance information is not found.  
      security:
        - ApiKeyAuth: []
          description: Delete feature failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Feature does not exist.",
            }
  /department:
    get:
      tags:
        - "department"
      summary: get department information
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of careers on a page
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sort by
      responses:
        200:
          description: get department information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get department information successfully.",
              "data": {
                "length": "number",
                "department": [
                  {
                    "_id": "id",
                    "name": "string",
                    "description": "string",
                    "location": "string",
                    "director": "string",
                    "scale": 0,
                    "careers": []
                  }
                ]
              }
            }
        400:
          description: department information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Department information is not found.",
            }
  /department/{departmentId}:
    get:
      tags:
        - "department"
      summary: get department by id
      produces:
        - application/json
      parameters:
        - in: path
          name: departmentId
          type: string
          required: true
          description: Id of a department
      responses:
        200:
          description: get department successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get department information successfully.",
              "data": {
                "_id": "id",
                "name": "string",
                "description": "string",
                "location": "string",
                "director": "string",
                "scale": 0,
                "careers": [],
              }
            }
        400:
          description: departmentId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Department information is not found.",
            }
  /admin/department:
    post:
      tags:
        - "department"
      summary: "Create a new department"
      parameters:
        - in: body
          name: department
          schema:
            type: object
            required: true
            properties:
              name:
                type: string
              description:
                type: string
              location:
                type: string
              director:
                type: string
              scale:
                type: number
      responses:
        200:
          description: Department registered successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Department registered successfully.",
            }
        400:
          description: Create department failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The director staff does not exist.",
            }
      security:
        - ApiKeyAuth: [] 
  /admin/department/{departmentId}:
    put:
      tags:
        - "department"
      summary: admin update department
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - in: path
          name: departmentId
          type: string
          required: true
          description: Id of a department
        - in: body
          name: department
          schema:
            type: object
            required: true
            properties:
              name:
                type: string
              description:
                type: string
              location:
                type: string
              director:
                type: string
              scale:
                type: number
      responses:
        200:
          description: Update department successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Update department successfully.",
                "data": {
                  "name": "string",
                  "description": "string",
                  "location": "string",
                  "director": "string",
                  "scale": 0,
                }
            }
        400:
          description: Update department failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "The director staff does not exist.",
              },
              "error2": {
                "success": false,
                "message": "Department does not exist.",
              }
            }
      security:
        - ApiKeyAuth: [] 
    delete:
      tags:
        - "department"
      summary: "Delete an existing department"
      produces:
        - application/json
      parameters:
        - in: path
          name: departmentId
          type: string
          required: true
          description: Id of a department
      responses:
        200:
          description: Delete department successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete department successfully.",
            }
        400:
          description: Delete department failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Department does not exist.",
            }
      security:
        - ApiKeyAuth: [] 
  /feature:
    get:
      tags:
        - "feature"
      summary: get feature information
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of features on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: name
          type: string
          description: filter by name
        - in: query
          name: detail
          type: string
          description: filter by detail 
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
      responses:
        200:
          description: Get feature information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get feature information successfully.",
              "data": {
                "length": "number",
                "feature": [
                  {
                  "name": "string",
                  "logo": "path",
                  "detail": "string",
                  }
                ]
              }
            }
        400:
          description: Feature information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Feature information is not found.",
            }
  /feature/{featureId}:
    get:
      tags:
        - "feature"
      summary: get feature by id
      produces:
        - application/json
      parameters:
        - in: path
          name: featureId
          type: string
          required: true
          description: Id of a feature 
      responses:
        200:
          description: Get feature information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get feature information successfully.",
              "data": {
                "name": "string",
                "logo": "path",
                "detail": "string",              
              }
            }
        400:
          description: Feature does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Feature does not exist.",
            }
  /feature/service/{serviceId}:
    get:
      tags:
        - "feature"
      summary: get features by service id
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of features on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
      responses:
        200:
          description: Get feature information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get feature information successfully.",
              "data": {
                "length": "number",
                "feature": [
                  {
                  "name": "string",
                  "logo": "path",
                  "detail": "string",
                  }
                ]
              }
            }
        400:
          description: Feature information is not found.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Service does not exist.",
              },
              "error2": {
                "success": false,
                "message": "Feature information is not found.",
              }
            }
  /admin/feature/{serviceId}:
    post:
      tags:
        - "feature"
      summary: "Create a new feature"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: service id to add feature in
        - in: formData
          name: name
          type: string
          description: name for feature.
          required: true
        - in: formData
          name: detail
          type: string
          description: detail for feature.
          required: true    
        - in: formData
          name: logo
          type: file
          description: a logo for feature.
          required: true
      requestBody:
        content: 
           multipart/form-data:
            schema:            
              type: object
              properties:      
                name:           
                  type: string
                detail:   
                  type: string
                logo: 
                  type: string
                  format: base64
      responses:
        200:
          description: Create new feature successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create new feature successfully.",
            }
        400:
          description: Create feature failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create new feature fail.",
            }
      security:
        - ApiKeyAuth: []
    
  /admin/feature/logo/{featureId}:
    put:
      tags:
        - "feature"
      summary: "Update a existing feature"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: featureId
          type: string
          required: true
          description: feature id
        - in: formData
          name: logo
          type: file
          description: a logo for feature.
          required: true
      responses:
        200:
          description: Update feature successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update feature successfully.",
              "data": {
                "name": "string",
                "logo": "path",
                "detail": "string",
              }
            }
        400:
          description: Update feature failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Feature does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /admin/feature/{featureId}:
    put:
      tags:
        - "feature"
      summary: "update a existing feature"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: featureId
          type: string
          required: true
          description: featureId 
        - in: formData
          name: name
          type: string
          description: name for feature.
          required: true
        - in: formData
          name: detail
          type: string
          description: detail for feature.
          required: true 
      responses:
        200:
          description: Delete feature successfully.
          schema:
            type: object
            example: {
            }
        400:
          description: Update feature failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Feature does not exist.",
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "feature"
      summary: "featureId a existing feature"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: featureId
          type: string
          required: true
          description: service id to add feature in
      responses:
        200:
          description: Delete feature successfully.
          schema:
            type: object
            example: {
            }
        400:
          description: Delete feature failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Feature does not exist.",
            }
      security:
        - ApiKeyAuth: []

  /notification:
    get:
      tags:
        - notification
      summary: Get list of notifications
      produces:
        - application/json
      parameters:
        - in: query
          name: limit
          type: string
          description: limitation of notifications in response
      responses:
        200:
          description: Request successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Request successfully.",
            }
      security:
        - ApiKeyAuth: []
    post:
      tags:
        - notification
      summary: Send a notification to another
      consumes:
        - application/json
      parameters:
        - in: body
          name: content
          schema:
            type: object
            properties:
              receiverId:
                type: string
              title:
                type: string
              message:
                type: string
              link:
                type: string
      responses:
        200:
          description: send the notification successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Send the notification successfully.",
            }
        401:
          description: receiver's ID didn't exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Receiver's ID didn't exist.",
            }
      security:
        - ApiKeyAuth: []

  /orderNotification/:
    get:
      tags:
      - "orderNotification"
      summary: "Get all order notifications and filter notifications by date and issue."
      produces:
        - application/json
      parameters:
        - in: query
          name: fromDate
          type: string
          description: from date
        - in: query
          name: toDate
          type: string
          description: to date
      responses:
        200:
          description: Request successful
          schema:
            type: object
            example: {
              "success": false,
              "message": "Get all order notifications and filter notifications by date and issue successfully.",
              "data":{
                "_id": "string",
                "sender": "string",
                "receiver": "string",
                "title": "string",
                "message": "string",
                "link": "string",
                "createdAt": "date-time",
                "updatedAt": "date-time",
                }   
              }
      security:
        - ApiKeyAuth: []
  /admin/orderNotification/create-issue/{orderId}:
    post:
      tags:
      - "orderNotification"
      summary: "Update order issues and send a notification to customer order"
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - in: path
          name: orderId
          type: string
          description: orderId for order.
        - in: formData
          name: issueType
          type: string
          description: issueType for order.
        - in: formData
          name: description
          type: string
          description: description for order.
        - in: formData
          name: image
          type: file
          description: image for order.
        - in: formData
          name: statusIssues
          type: string
          description: statusIssues for order.
      responses:
        200:
          description: Order issue updated successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Order issue updated successfully.",
            }  
        404:
          description: Order not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order not found.",
            }
      security:
        - ApiKeyAuth: []
  /detail-issues/{notificationId}:
    get:
      tags:
      - "orderNotification"
      summary: "Get detail order issue."
      produces:
        - application/json
      parameters:
        - in: query
          name: notificationId
          type: string
          description: id of the orderNotification.
      responses:
        200:
          description: Request successful.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get detail order issue successfully.",
              "data":{
                "orderId": "string",
                "issuesType": "string",
                "description": "string",
                "productIds": [],
                }
              }
      security:
        - ApiKeyAuth: []
  /distance:
    get:
      tags:
        - "distance"
      summary: get distance information
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of distances on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: sortBy
          type: string
          description: sort in order
        - in: query
          name: fromProvince
          type: string
          description: Origin province
          required: true
        - in: query
          name: toProvince
          type: string
          description: Destination province
          required: true
      responses:
        200:
          description: get distance information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get distance information successfully.",
              "data": {
                "length": "number",
                "distance": [
                  {
                  "fromProvince": "string",
                  "toProvince": "string",
                  "zonecode": "string",
                  "distance":  "number",
                  }
                ]
              }
                    
            }
        400:
          description: Dsistance information is not found.  
          schema:
            type: object
            example: {
              "success": false,
              "message": "Distance information is not found.",
            }
  /distance/{distanceId}:
    get:
      tags:
        - "distance"
      summary: get distance by id
      produces:
        - application/json
      parameters:
        - in: path
          name: distanceId
          type: string
          required: true
          description: Id of a distance 
      responses:
        200:
          description: get distance successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get distance information successfully.",
              "data": {
                "fromProvince": "string",
                "toProvince": "string",
                "zonecode": "string",
                "distance":  "number",  
              }
            }
        400:
          description: Distance information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Distance information is not found.",
            }
    put:
      tags:
        - "distance"
      summary: "Update an existing distance zonecode"
      consumes:
        - application/json
      parameters:
        - in: path
          name: distanceId
          schema: 
            type: string
          required: true
          description: distance id
        - in: body
          name: distance
          description: an existing distance.
          schema:
            type: object
            required:
              - zonecode
            properties:              
              zonecode:
                type: string
      responses:
        200:
          description: Update distance successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update distance successfully.",
              "data": {
                "zonecode": "string", 
              }
            }
        400:
          description: Update distance failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Distance does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /distance/service/{serviceId}:
    get:
      tags:
        - "distance"
      summary: get distances by service id
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of distances on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: query
          name: sortBy
          type: string
          description: sort in order
        - in: query
          name: fromProvince
          type: string
          description: Origin province
        - in: query
          name: toProvince
          type: string
          description: Destination province
      responses:
        200:
          description: get distance successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get distance information successfully.",
              "data": {
                "length": "number",
                "distance": [
                  {
                    "fromProvince": "string",
                    "toProvince": "string",
                    "zonecode": "string",
                    "distance":  "number",     
                  }
                ]
              }
     
            }
        400:
          description: Distance information is not found.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Service does not exist.",
              },
              "error2": {
                "success": false,
                "message": "Distance information is not found.",
              }
            }
  /admin/distance/create/{serviceId}:
    post:
      tags:
        - "distance"
      summary: "Create a new distance"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          name: serviceId
          schema: 
            type: string
          required: true
          description: service id to add distance in
        - in: body
          name: distance
          description: a new distance.
          schema:
            type: object
            required:
              - fromProvince
              - toProvince
              - zonecode
              - dist
            properties:
              fromProvince:
                type: string
              toProvince:
                type: string
              zonecode:
                type: string
              dist:
                type: number
      responses:
        200:
          description: Create distance successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create distance successfully.",
            }
        400:
          description: Create distance failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Distance already exists.",
            }
      security:
        - ApiKeyAuth: []
  /admin/distance/{distanceId}:
    put:
      tags:
        - "distance"
      summary: "Update an existing distance"
      consumes:
        - application/json
      parameters:
        - in: path
          name: distanceId
          schema: 
            type: string
          required: true
          description: distance id
        - in: body
          name: distance
          description: an existing distance.
          schema:
            type: object
            required:
              - fromProvince
              - toProvince
              - zonecode
              - dist
            properties:
              fromProvince:
                type: string
              toProvince:
                type: string
              zonecode:
                type: string
              dist:
                type: number
      responses:
        200:
          description: Update distance successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update distance successfully.",
              "data": {
                "fromProvince": "string",
                "toProvince": "string",
                "zonecode": "string",
                "distance":  "number",
              }
            }
        400:
          description: Update distance failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Distance does not exist.",
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "distance"
      summary: "Delete an existing distance"
      produces:
        - application/json
      parameters:
        - in: path
          name: distanceId
          type: string
          required: true
          description: Id of a distance 
      responses:
        200:
          description: Delete distance successfully.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Delete distance successfully.",
              "data": {
                "fromProvince": "string",
                "toProvince": "string",
                "zonecode": "string",
                "distance":  "number",
              }
            }
        400:
          description: Delete distance failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Distance does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /price/{priceId}:
    get:
      tags:
        - "price"
      summary: get price by id
      produces:
        - application/json
      parameters:
        - in: path
          name: priceId
          type: string
          required: true
          description: Id of a price 
      responses:
        200:
          description: get price successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get price information successfully.",
              "data": {
                "uKG": "string",
                "uM3": "string",
                "uTON": "string",        
              }
            }
        400:
          description: price is not found.
          schema: 
            type: object
            example: {
              "success": false,
              "message": "Price information not found.",
            }
  /price/service/{serviceId}:
    get:
      tags:
        - "price"
      summary: get prices by service id
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of prices on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
      responses:
        200:
          description: Get price information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get price information successfully.",
              "data": {
                "length": "number",
                "price": [
                  {
                  "uKG": "string",
                  "uM3": "string",
                  "uTON": "string",        
                  }
                ]
              }
            }
        400:
          description: price is not found.
          schema: 
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Service does not exist.",
              },
              "error2": {
                "success": false,
                "message": "Price information not found.",
              }
            }
  /admin/price/create/{serviceId}:
    post:
      tags:
        - "price"
      summary: "Create a new price"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          name: serviceId
          schema: 
            type: string
          required: true
          description: service id to add price in
        - in: body
          name: price
          description: a new price.
          schema:
            type: object
            required:
              - kg
              - ton
              - m3
            properties:
              kg:
                type: array
                items:
                  type: object
                  required:
                    - next
                    - sidestep
                    - prices
                  properties:
                    next:
                      type: boolean
                    sidestep:
                      type: number
                    prices:
                      type: array
                      items:
                        type: number
                      example: [1, 2, 3, 4]
              ton:
                type: array
                items:
                  type: object
                  required:
                    - next
                    - sidestep
                    - prices
                  properties:
                    next:
                      type: boolean
                    sidestep:
                      type: number
                    prices:
                      type: array
                      items:
                        type: number
                      example: [1, 2, 3, 4]
              m3:
                type: array
                items:
                  type: object
                  required:
                    - next
                    - sidestep
                    - prices
                  properties:
                    next:
                      type: boolean
                    sidestep:
                      type: number
                    prices:
                      type: array
                      items:
                        type: number
                      example: [1, 2, 3, 4]
      responses:
        200:
          description: Create price table successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create price table successfully.",
            }
        400:
          description: Create price failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Request's body is incorrect.",
            }
      security:
        - ApiKeyAuth: []
  /admin/price/{priceId}:
    put:
      tags:
        - "price"
      summary: "Update an existing price"
      consumes:
        - application/json
      parameters:
        - in: path
          name: priceId
          schema: 
            type: string
          required: true
          description: price id
        - in: body
          name: price
          description: a new price.
          schema:
            type: object
            required:
              - kg
              - ton
              - m3
            properties:
              kg:
                type: object
                required:
                  - next
                  - sidestep
                  - prices
                properties:
                  next:
                    type: string
                  sidestep:
                    type: number
                  prices:
                    type: array
                    items:
                      type: number
              ton:
                type: object
                required:
                  - next
                  - sidestep
                  - prices
                properties:
                  next:
                    type: string
                    description: "true"
                  sidestep:
                    type: number
                  prices:
                    type: array
                    items:
                      type: number
              m3:
                type: object
                required:
                  - next
                  - sidestep
                  - prices
                properties:
                  next:
                    type: string
                  sidestep:
                    type: number
                  prices:
                    type: array
                    items:
                      type: number
      responses:
        200:
          description: Update price successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update price successfully.",
              "data": {
                "uKG": "string",
                "uM3": "string",
                "uTON": "string", 
              }
            }
        400:
          description: Update price failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Price does not exist.",
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "price"
      summary: "Delete an existing price"
      produces:
        - application/json
      parameters:
        - in: path
          name: priceId
          type: string
          required: true
          description: Id of a price 
      responses:
        200:
          description: Delete price successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete price successfully.",
              "data": {
                "uKG": "string",
                "uM3": "string",
                "uTON": "string", 
              }
            }
        400:
          description: Delete price failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Price does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /priceList:
    get:
      tags:
        - "priceList"
      summary: get priceList by province
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of priceLists on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: province
          type: string
          required: true
          description: Province of a priceList 
      responses:
        200:
          description: Get pricelist information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get pricelist information successfully.",
              "data": {
                "length": "number",
                "files": [
                  {
                    "province": "string",
                    "file": "path",
                  }
                ]
              },
            }
        400:
          description: priceList is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Price list information is not found.",
            }
  /admin/priceList/{serviceId}:
    post:
      tags:
        - "priceList"
      summary: "Create a new priceList"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: formData
          name: province
          description: Province name to which the price files are associated.
          type: string
          required: true   
        - in: formData
          name: file
          description: file for priceList.
          type: file  
          required: true        
      requestBody:
        content: 
          multipart/form-data: 
            schema:            
              type: object
              properties:      
                province:           
                  type: string                
                file: 
                  type: string
                  format: base64                 
      responses:
        200:
          description: Create priceList successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "upload pricelist file successfully",
            }
        400:
          description: Create priceList failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "The pricelist's province is already used.",
              },
              "error2": {
                "success": false,
                "message": "Upload price list failed.",
              }
            }
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "priceList"
      summary: "Modify a priceList"
      consumes:
        - multipart/form-data
      parameters:
        - in: query
          name: province
          type: string
          required: true
          description: Province of a priceList 
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: formData
          name: file
          description: New priceList file.
          type: file          
      requestBody:
        content: 
          multipart/form-data: 
            schema:            
              type: object
              properties:      
                file: 
                  type: string
                  format: base64
      responses:
        200:
          description: Update priceList successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update pricelist file successfully.",
            }
        400:
          description: Update priceList failed.
          schema: 
            type: object
            example: {
              "success": false,
              "message": "Service does not exist.",
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "priceList"
      summary: "Delete an existing priceList"
      produces:
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service containing priceList
        - in: query
          name: province
          type: string
          required: true
          description: province
      responses:
        200:
          description: Delete priceList successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete price list successfully.",
            }
        400:
          description: Delete priceList failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Pricelist does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /service:
    get:
      tags:
        - "service"
      summary: get delivery service
      produces:
        - application/json
      parameters:
      responses:
        200:
          description: get service successfully.
          schema:
            type: object
            example: {
             
            }
        400:
          description: Service information is not found.
          schema:
            type: object
            example: {
              "service": false,
              "message": "Service information is not found.",
            }
  /service/{service}:
    get:
      tags:
        - "service"
      summary: get delivery service by id or name
      produces:
        - application/json
      parameters:
        - in: path
          name: service
          type: string
          description: Id/Name of a service 
          required: true
      responses:
        200:
          description: get service successfully.
          schema:
            type: object
            example: {
            }          
        400:
          description: Service information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Service information is not found.",
            }
  /admin/service:
    post:
      tags:
        - "service"
      summary: "Create a new service"
      consumes:
        - application/json
      parameters:
        - in: body
          name: service
          description: a new service.
          schema:
            type: object      
            required: 
            - name, sub_detail, target   
            properties:
              name:
                type: string
              sub_detail: 
                type: string
              target:
                type: string     
              tip:
                type: string 
              video:
                type: string     
              introduce:
                type: string               
      responses:
        200:
          description: Create new service successfully.
          schema:
            type: object
            example: {
            }    
        400:
          description: Create service failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "This service is already existed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/service/banner/{serviceId}:
    post:
      tags:
        - "service"
      summary: "Upload service banner"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: formData
          name: banner
          description: banner of service.
          type: file     
      responses:
        200:
          description: Upload service banner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Upload banner successfully.",
              "data": {
                "banner": "path",
              }
            }     
        400:
          description: Upload service failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Upload banner failed",
            }    
      security:
        - ApiKeyAuth: []
  /admin/service/subbanner/{serviceId}:
    post:
      tags:
        - "service"
      summary: "Upload subbanner"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: formData
          name: sub_banner
          description: subbanner of service.
          type: file     
      responses:
        200:
          description: Upload service subbanner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Upload banner successfully.",
              "data": {
                "banner": "path",
              }
            }     
        400:
          description: Upload service failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Upload subbanner failed",
            }    
      security:
        - ApiKeyAuth: []
  /admin/service/quotebanner/{serviceId}:
    post:
      tags:
        - "service"
      summary: "Upload quotebanner"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: formData
          name: quote_banner
          description: quotebanner of service.
          type: file     
      responses:
        200:
          description: Upload service quotebanner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Upload quotebanner successfully.",
              "data": {
                "banner": "path",
              }
            }     
        400:
          description: Upload service failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Upload quotebanner failed",
            }    
      security:
        - ApiKeyAuth: []
  /admin/service/bottombanner/{serviceId}:
    post:
      tags:
        - "service"
      summary: "Upload bottombanner"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: formData
          name: bottom_banner
          description: bottombanner of service.
          type: file     
      responses:
        200:
          description: Upload service bottombanner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Upload bottombanner successfully.",
              "data": {
                "banner": "path",
              }
            }     
        400:
          description: Upload bottombanner failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Upload bottombanner failed",
            }    
      security:
        - ApiKeyAuth: []
  /admin/service/logo/{serviceId}:
    post:
      tags:
        - "service"
      summary: "Upload service logo"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: formData
          name: logo
          description: a logo service.
          type: file 
      responses:
        200:
          description: Create service successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create service successfully.",
              "data": {
                "logo": "path",
              }
            }
        400:
          description: Create service failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create service failed.",
            }      
      security:
        - ApiKeyAuth: []
  /admin/service/participant/{serviceId}:
    post:
      tags:
        - "service"
      summary: "Create a new participant"
      consumes: 
        - multipart/form-data
      parameters:
        - in: formData
          name: name_detail
          description: name_detail of participant.
          type: string  
          required: true
      responses:
        200:
          description: Create participant successfully.
          schema:
            type: object
            example: {
            }        
        400:
          description: Create participant failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Service is not existed.",
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "service"
      summary: "delete a existing participant"
      consumes:
        - application/json
      parameters:
        - in: path
          name: serviceId
          schema: 
            type: string
          required: true
          description: service id
        - in: body
          name: name_detail
          description: name_detail of participant.
          schema: 
            type: string                 
      responses:
        200:
          description: Update service successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update service successfully.",
              "data": {
                "name": "string",
                "sub_detail": "string",    
                "target": "string",   
                "tip" : "string",   
              }
            }      
        400:
          description: Update service failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Service does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /admin/service/{serviceId}:
    put:
      tags:
        - "service"
      summary: "Update a existing service"
      consumes:
        - application/json
      parameters:
        - in: path
          name: serviceId
          schema: 
            type: string
          required: true
          description: service id
        - in: body
          name: service
          description: an existing service.
          schema:
            type: object      
            required: 
            - name, sub_detail, target   
            properties:
              name:
                type: string
              sub_detail: 
                type: string
              target:
                type: string       
              tip:
                type: string
              video:
                type: string     
              introduce:
                type: string          
      responses:
        200:
          description: Update service successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update service successfully.",
              "data": {
                "name": "string",
                "sub_detail": "string",    
                "target": "string",   
                "tip" : "string",   
              }
            }      
        400:
          description: Update service failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Service does not exist.",
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "service"
      summary: "Delete an existing service"
      produces:
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
      responses:
        200:
          description: Delete service successfully.
          schema: 
            type: object
            example: {
              "success": true,
              "message": "Delete service successfully.",
            }
        400:
          description: Delete service failed.
          schema: 
            type: object
            example: {
              "success": false,
              "message": "Service does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /customer:
    get:
      tags:
        - customer
      summary: Get list of customers, get customer by id, search and sort, filter by customer type
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          type: string
          description: id of customer
        - in: query
          name: keyword
          type: string
          description: keyword to search
        - in: query
          name: sort
          type: string
          description: sort by 1 or -1 (ascending or descending)
        - in: query
          name: filter
          type: string
          description: business, passers or intermediary
      responses:
        200:
          description: Get customers successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get customers successfully",
              "data": [
                {
                  "name": "string",
                  "address": "tring",
                  "description": "string",
                  "customer_type": "string",
                  "rank_passers": {
                    "point": "number",
                    "level": "string",
                  },
                  "companyTaxcode_business": "string",
                }
              ]
            }
        400:
          description: Get customers failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "No information found.",
            }
      security:
        - ApiKeyAuth: []
  /customer/users:
    post:
      tags:
        - customer
      summary: Customer create child account
      produces:
        - application/json
      parameters:
        - in: body
          name: information create child account
          description: information create child account
          schema:
            type: object
            required:
              - name
              - phone
              - email
              - password
              - bank_name
              - bank_account_number
            properties:
              name:
                type: string
              phone:
                type: string
              password:
                type: string
              email:
                type: string
              bank_name:
                type: string
              bank_account_number:
                type: string
      responses:
        200:
          description: Create child account success.
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: Create child account success
              data:
                type: object
                properties:
                  newUser:
                    type: object
                    properties:
                      password:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      name:
                        type: string
                      role:
                        type: string
                  newCustomer:
                    type: object
                    properties:
                      name:
                        type: string
                      address:
                        type: string
                      description:
                        type: string
                      customer_type:
                        type: string
                      rank_passers:
                        type: object
                        properties:
                          point:
                            type: number
                          level:
                            type: string
                      companyTaxcode_business:
                        type: string
        404:
          description: Update customer failed
          schema:
            type: object
            example: {
              "success": false,
              "message": "Customer is not found",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - ApiKeyAuth: []
  /customer/users/:phone:
    get:
      tags:
        - customer
      summary: Customer get child account
      produces:
        - application/json
      parameters:
        - in: path
          name: phone of child account
          description: phone of child account
          required: true
      responses:
        200:
          description: Get child account success.
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: get account success
              data:
                type: object
                properties:
                  users:
                    type: object
                    properties:
                      password:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      name:
                        type: string
                      role:
                        type: string
                  Customer_infor:
                    type: object
                    properties:
                      name:
                        type: string
                      address:
                        type: string
                      description:
                        type: string
                      customer_type:
                        type: string
                      rank_passers:
                        type: object
                        properties:
                          point:
                            type: number
                          level:
                            type: string
                      companyTaxcode_business:
                        type: string
        404:
          description: Update customer failed
          schema:
            type: object
            example: {
              "success": false,
              "message": "Customer is not found",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - ApiKeyAuth: []
  /admin/customer/{id}:
    put:
      tags:
        - customer
      summary: Update a customer
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
        - in: body
          name: Customer information to update
          schema:
            type: object
            properties:
              name:
                type: string
              address:
                type: string
              description:
                type: string
              customer_type:
                type: string
              rank_passers:
                type: object
                properties:
                  point: 
                    type: number
                  level: 
                    type: string
              companyTaxcode_business:
                type: string
      responses:
        200:
          description: Update customer successfully.
          schema:
            type: object
            example: {
              "success":  true,
              "message": "Customer updated successfully.",
            }
        400:
          description: Update customer failed
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Customer does not exist.",
              },
              "error2": {
                "success": false,
                "message": "Invalid customer type.",
              }
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:      
        - customer
      summary: Delete a customer
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
      responses:
        200:
          description: Delete customer successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete customer user successfully.",
            }
        400:
          description: Delete customer failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Customer does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /admin/customer/customerDebt:
    get:
      tags:
        - customer
      summary: get customer debt
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
        - in: body
          name: Customer debt information 
          schema:
            type: object
            properties:
              name:
                type: string
              address:
                type: string
              description:
                type: string
              customer_type:
                type: string
              rank_passers:
                type: object
                properties:
                  point: 
                    type: number
                  level: 
                    type: string
              companyTaxcode_business:
                type: string
              accepted_business:
                type: boolean
      responses:
        200:
          description: Get customer debt successfully.
          schema:
            type: object
            example: {
              "success":  true,
              "message": "Get order information successfully.",
              "data":{
                "totalCusTomerDebt": number,
                "listCustomer":[
                  {
                    "customerDebt": number,
                    "order":{
                      "_id": string,
                      "orderId": string,
                      "service": string,
                      "customer":{
                        "_id": string,
                        "name": string,
                        "email": string,
                        "phone": string,
                        "address": string,
                      },
                      "receiver": string,
                      "status": string,
                      "origin": string,
                      "destination": string,
                      "total_price": number,
                    }
                  }
                ]
              }
            }
        400:
          description: Get customer debt failed
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get order failed.",
              
              
            }
      security:
        - ApiKeyAuth: []              
  /applicant/{careerId}:
    post:
      tags:
        - "applicant"
      summary: "Create a new applicant"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: path
          name: careerId
          type: string
          required: true
          description: Id of a career 
        - in: formData
          name: firstName
          description: firstName of applicant.
          type: string 
          required: true
        - in: formData
          name: lastName
          description: lastName of applicant.
          required: true
        - in: formData
          name: phoneNumber
          description: phoneNumber of applicant.
          type: string 
          required: true
        - in: formData
          name: email
          description: email of applicant.
          type: string 
          required: true
        - in: formData
          name: source
          description: source of interest of applicant(staff, friend, email, phone, facebook, linkedin, search, event, other).
          type: string 
          required: true
        - in: formData
          name: message
          description: Custom message.
          type: string  
          required: true  
        - in: formData
          name: file
          description: CV file of applicant.
          type: file 
          required: true         
      responses:
        200:
          description: Create applicant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Added applicant in career successfully.",
            }        
        400:
          description: Create applicant failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "send CV failed.",
              },
              "error2": {
                "success": false,
                "message": "Confirmation cannot be sent to applicant email.",
              }
            }
  /admin/applicant:
    get:
      tags:
        - "applicant"
      summary: get applicant
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of applicants in a page 
        - in: query
          name: sortBy
          type: string
          description: sort in order (firstName, lastName, -updatedAt)
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: department
          type: string
          description: filter by department
        - in: query
          name: type
          type: string
          description: filter by type
        - in: query
          name: location
          type: string
          description: filter by location
        - in: query
          name: status
          type: string
          description: filter by status
      responses:
        200:
          description: Get applicant information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get applicant information successfully.",
              "data": [
                {
                "firstName": "string",
                "lastName": "string",    
                "phoneNumber": "string",   
                "email" : "string",
                "source": "string",
                "message": "string",
                "status": "string",       
                }
              ]
            }          
        400:
          description: Applicant information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Applicant information is not found.",
            }
      security:
        - ApiKeyAuth: []
  /admin/applicant/{applicantId}:
    get:
      tags:
        - "applicant"
      summary: get applicant by id
      produces:
        - application/json
      parameters:
        - in: path
          name: applicantId
          type: string
          required: true
          description: Id of an applicant 
      responses:
        200:
          description: Get applicant information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get applicant information successfully.",
              "data": {
                "firstName": "string",
                "lastName": "string",    
                "phoneNumber": "string",   
                "email" : "string",
                "source": "string",
                "message": "string",
                "status": "string",       
              }
            }          
        400:
          description: Applicant does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Applicant does not exist.",
            }
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - "applicant"
      summary: "Update a existing applicant status"
      consumes:
        - application/json
      parameters:
        - in: path
          name: applicantId
          schema: 
            type: string
          required: true
          description: applicant id
        - in: body
          name: applicant
          description: an existing applicant.
          schema:
            type: object      
            required: 
            - status   
            properties:
              status:
                type: string
                description: (approved, pending, rejected)                 
      responses:
        200:
          description: Update applicant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update applicant successfully.",
              "data": {
                "status": "string",
              }
            }      
        400:
          description: Update applicant failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Applicant does not exist.",
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "applicant"
      summary: "Delete an existing applicant"
      produces:
        - application/json
      parameters:
        - in: path
          name: applicantId
          type: string
          required: true
          description: Id of a applicant 
      responses:
        200:
          description: Delete applicant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete applicant successfully.",
              "data": {
                "firstName": "string",
                "lastName": "string",    
                "phoneNumber": "string",   
                "email" : "string",
                "source": "string",
                "message": "string",
                "status": "string",       
              }
            }
        400:
          description: Delete applicant failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Applicant does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /admin/staff:
    get:
      tags: 
        - staff
      summary: get list of staffs
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          type: string
          description: id of staff
        - in: query
          name: keyword
          type: string
          description: keyword for searching staff 
        - in: query
          name: sort
          type: number
          description: sort staff by order
        - in: query
          name: filter
          type: string
          description: admin, driver, shipper, storekeeper or staff
      responses:
        200:
          description: Get staff information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get staffs information successfully",
              "data": [
                {
                  "name": "Storekeeper",
                  "staff_type": "storekeeper",
                  "department": "string",
                  "car_fleet": "string",
                }
              ]
            }
      security:
        - ApiKeyAuth: []
  /admin/staff/{staffId}:
    delete:
      tags:
        - staff
      summary: Delete staff by id
      produces:
        - application/json
      parameters:
        - in: path
          name: staffId
          type: string
          description: id of staff  
      responses:
        200:
          description: Delete staff user successfully.
          schema: 
            type: object
            example: {
              "success": true,
              "message": "Delete staff user successfully.",
            }
        400:
          description: Delete staff user failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Staff does not exist.",
            }
      security:
        - ApiKeyAuth: []
    put:
      tags:
        - staff
      summary: Update staff by id
      produces:
        - application/json
      parameters:
        - in: path
          name: staffId
          type: string
          description: id of staff
        - in: body
          name: update content
          schema:
            type: object
            properties:
              name:
                type: string
              staff_type:
                type: string
              department:
                type: string
              car_fleet:
                type: string
      responses:
        200:
          description: Update staff information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Staff updated successfully.",
            }
        400:
          description: Update staff information failed.
          schema: 
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Staff does not exist.",
              },
              "error2": {
                "success": false,
                "message": "Staff-type not found.",
              }
            }
      security:
        - ApiKeyAuth: []
  /admin/staff/department/{departmentId}:
    get:
      tags:
        - staff
      summary: Get staff by Department
      produces:
        - application/json
      parameters:
        - in: path
          name: departmentId
          type: string  
          description: Id of DepartmentId
      responses:
        200:
          description: Get departmental staff successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get departmental staff successfully.",
              "data": [
                {
                  "name": "string",
                  "staff_type": "string",
                  "department": "string",
                  "car_fleet": "string",
                }
              ]
            }
        400:
          description: get Infomation staff failer
          schema:
            type: object
            example: {
              "sucssess": false,
              "message": "Departmental does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /admin/carFleet:
    get:
      tags:
        - "carFleet"
      summary: "Admin get list of carfleets"
      consumes:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of carfleet on a page
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sort by (name)
        - in: query
          name: carfleetId
          type: string
          description:  carfleetId
      responses:
        200:
          description: Get carfleet successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get carfleet successfully.",
              "data": [
                {
                  "_id": "String",
                  "name": "String",
                  "director": "String",
                  "bills": [],                  
                }
              ],          
            }
        400:
          description: carFleet information is not found.
      security:
        - ApiKeyAuth: [] 
    post:
      tags:
        - "carFleet"
      summary: "Create a new carFleet"
      produces:
        - multipart/form-data
      parameters:
        - in: formData
          name: name
          type: string
          default: 'string'
          description : name of car fleet
          required: true
        - in: formData
          name: director
          type: string
          default: 'string'
          description : 'objectId of staff in mongoose'
          required: true
      responses:
        200:
          description: Create carFleet successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "director": "string",
            }
        400:
          description: Create carFleet failed.  
      security:
        - ApiKeyAuth: [] 
  /admin/carFleet/{carFleetId}:
    put:
      tags:
        - "carFleet"
      summary: update carFleet
      produces:
        - application/json        
      consumes:
        - application/json
      parameters:
        - in: path
          name: carFleetId
          type: string
          required: true
          description: Id of a carFleet
        - in: body
          name: carFleet
          description: an updated carFleet.
          schema:
            type: object
            properties:
              name:
                type: string
                required: true
              director:
                type: string
      responses:
        200:
          description: update carFleet successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "director": "string",
            }
        400:
          description: carFleet cannot be found. 
      security:
        - ApiKeyAuth: []                         
    delete:
      tags:
        - "carFleet"
      summary: "Delete an existing carFleet"
      produces:
        - application/json
      parameters:
        - in: path
          name: carFleetId
          type: string
          required: true
          description: Id of a carFleet 
      responses:
        200:
          description: Delete carFleet successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        400:
          description: Delete carFleet failed.      
      security:
        - ApiKeyAuth: [] 
  /admin/carFleet/{name}:
    get:
      tags:
        - "carFleet"
      summary: get car fleet turnover information
      produces:
        - application/json
      parameters:
        - in: path
          name: name
          type: string
          required: true
          description: Name of carFleet
      responses:
        200:
          description: get carFleet information successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "director": "string",
              "turnover": "number",
              "cars": "array",
            }
        400:
          description: cars turnover information is not found.     
      security:
        - ApiKeyAuth: []  
  /admin/carFleet/car/{plate}:
    get:
      tags:
        - "carFleet"
      summary: get a single car turnover information
      produces:
        - application/json
      parameters:
        - in: path
          name: plate
          type: string
          required: true
          description: Plate of a car
      responses:
        200:
          description: get carFleet information successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "director": "string",
              "turnover": "number",
              "cars": "array",
            }
        400:
          description: car turnover information is not found.
      security:
        - ApiKeyAuth: [] 
  /admin/carfleet:
    get:
      tags:
        - "carFleet"
      summary: get single, all & cost_car_Fleet the bills' actual fuel projection has been completed.
      produces:
        - application/json
      parameters:
        - in: query
          name: name
          type: string
          description: name a car fleet
        - in: query
          name: page
          type: string
          description: number of page 
        - in: query
          name: pageSize
          type: string
          description: number of page size     
      responses:
        200:
          description: get carFleet information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get car successfully.",
              "data": {
                "length": "number",
                "totalCostCarFleet": "number",
                "carsFleet": [
                  {
                    "_id": "string",
                    "name": "string",
                    "director": "string",
                    "bills": [
                      {
                        "_id": "string",
                        "actual_fuel": "number",
                        "theoretical_fuel": "number",
                        "status": "string",
                        "current_fuel_price":"number",
                        "product_shipments": [],
                      },
                    ],
                    "costCarFleet": "number",
                  },
                ],
              },
            }
        400:
          description: carFleet  information is not found.
      security:
        - ApiKeyAuth: []    
  /admin/carFleet/{carFleetId}/inventory:
    get:
      tags:
        - "carFleet"
      summary: get inventory of car fleet
      produces:
        - application/json
      parameters:
        - in: path
          name: carFleetId
          type: string
          required: true
          description: Id of car fleet
      responses:
        200:
          description: get inventory of car fleet successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get receivers successfully.",
              "data": [
                {
                  "shipment": "636b1eeb84aa30af66b63ded",
                  "product_name": "product_01",
                  "quantity": 1,
                  "unit": "kg",
                },
                {
                  "shipment": "636b1eeb84aa30af66b63dee",
                  "product_name": "product_01",
                  "quantity": 9,
                  "unit": "kg",
                },
              ]
            }
        400:
          description: car fleet or bills are not found.
      security:
        - ApiKeyAuth: []
  /admin/carRegistration/{carId}:
    get:
      tags:
        - carRegistration
      summary: get list of car registration
      produces:
        - application/json
      paramters:
        - in: path
          name: carId
          type: string
          description: id of car registration
      responses:
        200:
          description: Get car registration successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get registration successfully.",
              "data": [
                {
                  "_id": "string",
                  "registration_date": "string",
                  "expiration_date": "string",
                  "fee": "number",
                  "unit": "string",
                  "note": "string",
                }
              ]
            }
        400:
          description: Get registration failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "No information found.",
            }
      security:
        - ApiKeyAuth: []
    post:
      tags:
        - carRegistration
      summary: create a new carRegistration
      consumes:
        - application/json
      parameters:
        - in: body
          name: registration
          description: a new carRegistration.
          schema:
            type: object
            properties:
              car:
                type: string
                enum: ObjectId
              registration_date:
                type: Date
              expiration_date:
                type: Date  
              fee:
                type: number
              unit:
                type: string
              note:
                type: string       
      responses:
        200:
          description: Create car registration successfully.
        400:
          description: Create car registration failed.
      security:
        - ApiKeyAuth: []
  /admin/carRegistration/{carId}/{id}:
    put:
      tags:
        - carRegistration
      summary: Update car registration by id
      produces:
        - application/json
      parameters:
        - in: path
          name: carId
          type: string
          description: id of car
        - in: path
          name: id
          type: string
          description: id of car registration
        - in: body
          name: update content
          schema:
            type: object
            properties:
              registration_date:
                type: string                
              expiration_date:
                type: string
              fee:
                type: string
              unit:
                type: string
              note:
                type: string
      responses:
        200:
           description: Update receiver successfully. 
           schema:
            type: object
            example: {
              "success": true,
              "message": "car registration updated successfully.",
            }
        400:
          description: Update car registration failed
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "car does not exist.",
              },
              "error2": {
                "success": false,
                "message": "car registration is existed.",
              }
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - carRegistration
      summary: Delete receiver by id
      produces:
        - application/json
      parameters:
        - in: path
          name: carId
          type: string
          description: id of car
        - in: path
          name: id
          type: string
          description: id of car registration 
      responses:
        200:
          description: Receiver deleted successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Receiver deleted successfully.",
            }
        400:
          description: car registration not found.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "car does not exist.",
              },
              "error2": {
                "success": false,
                "message": "car registration is existed.",
              }
            }
      security:
        - ApiKeyAuth: []
  /admin/receiver:
    get:
      tags: 
        - receiver
      summary: get list of receivers
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          type: string
          description: id of receiver 
        - in: query
          name: keyword
          type: string
          description: keyword for searching receiver 
        - in: query
          name: sort
          type: number
          description: sort receiver by order
      responses:
        200:
          description: Get receivers successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get receivers successfully.",
              "data": [
                {
                  "name": "string",
                  "phone": "string",
                  "identity": "string",
                }
              ]
            }
        400:
          description: Get receivers failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "No information found.",
            }
      security:
        - ApiKeyAuth: []
  /admin/receiver/{receiverId}:
    put:
      tags:
        - receiver
      summary: Update receiver by id
      produces:
        - application/json
      parameters:
        - in: path
          name: receiverId
          type: string
          description: id of receiver 
        - in: body
          name: update content
          schema:
            type: object
            properties:
              name:
                type: string                
              phone:
                type: string
              identity:
                type: string
      responses:
        200:
           description: Update receiver successfully. 
           schema:
            type: object
            example: {
              "success": true,
              "message": "Receiver updated successfully.",
            }
        400:
          description: Update receiver failed
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Receiver does not exist.",
              },
              "error2": {
                "success": false,
                "message": "identity value is existed.",
              }
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - receiver
      summary: Delete receiver by id
      produces:
        - application/json
      parameters:
        - in: path
          name: receiverId
          type: string
          description: id of receiver  
      responses:
        200:
          description: Receiver deleted successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Receiver deleted successfully.",
            }
        400:
          description: Receiver not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Receiver does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /receiver/{orderId}:
    put:
      tags:
        - receiver
      summary: Update receiver by customer if order is waiting
      produces:
        - application/json
      parameters:
        - in: path
          name: orderId
          type: string
          description: id of order to check 
        - in: body
          name: update content
          schema:
            type: object
            properties:
              name:
                type: string
              phone:
                type: string
              identity:
                type: string
      responses:
        200:
           description: Update receiver successfully. 
           schema:
            type: object
            example: {
              "success": true,
              "message": "Receiver updated successfully.",
            }
        400:
          description: Update receiver failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Order not found.",
              },
              "error2": {
                "success": false,
                "message": "Cannot update receiver while order is completed.",
              }
            }
      security:
        - ApiKeyAuth: []
  /admin/turnover:
    get:
      tags:
        - "turnover"
      summary: get turnover information  
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of turnovers on a page
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sort by
        - in: query
          name: payment_method
          type: string
          description:  payment method
        - in: query
          name: type_of_turnover
          type: string
          description: type of turnover
      responses:
        200:
          description: get turnover information successfully.
          schema:
            type: object
            example: {
              "total": "number",
              "payment_method": "string",
              "paid": "number",
              "type_of_turnover": "string",
              "refund": "number",
              "bill": "object",
              "order": "object",
              "message": "string",
            }
        400:
          description: turnover information is not found.   
      security:
        - ApiKeyAuth: []     

  /admin/turnover/{turnoverId}:
    get:
      tags:
        - "turnover"
      summary: get turnover by id
      produces:
        - application/json
      parameters:
        - in: path
          name: turnoverId
          type: string
          required: true
          description: Id of a turnover
      responses:
        200:
          description: get turnover information successfully.
          schema:
            type: object
            example: {
              "total": "number",
              "payment_method": "string",
              "paid": "number",
              "type_of_turnover": "string",
              "refund": "number",
              "bill": "object",
              "order": "object",
              "message": "string",
            }
        400:
          description: turnover does not exist.
        402:
          description: turnover information is not found.
      security:
        - ApiKeyAuth: [] 
  /admin/turnover/warehouse/{idwarehouse}:  
    get:
      tags:
        - "turnover"
      summary: get turnover by idWarehouse
      produces: 
        - application/json
      parameters:
        - in: path
          name: idwarehouse
          type: string
          required: turnover
          description: Id of a warehouse
      responses:
        200:
          description: get turnover warehouse successfully
          schema:
            type: object
            example: {
              "Name": "string",
              "Turnover": "number",
            }
        400:
          description: Id a warehouse does not exitst/Id a warehouse field is not avaliable.
      security:
        - ApiKeyAuth: []
  /admin/turnover/car/{carid}:
    get:
      tags:
        - "turnover"
      summary: get turnover by ID Car
      produces:
        - application/json
      parameters:
        - in: path
          name: carid
          type: string
          required: turnover
          description: Id of a Car
        - in: query
          name: fromdate
          type: date
          description: From Date (EX:2022-11-07) if you type in from date you need type in todate 
        - in: query
          name: todate
          type: date
          description: To Date          
      responses:
        200:
          description: get turnover car successfully
          schema:
            type: object
            example: {
              "Name Car": "String",
              "Total revenue": "number",
              "Acctual Fuel": "number",
              "Carrepair": "number",
              "Profit": "number",
            }
        400:
          description: Id a car does not exitst/Id a car field is not avaliable.
      security:
        - ApiKeyAuth: []
  /admin/turnover/carfleet/{carfleetid}:
    get:
      tags:
        - "turnover"
      summary: get turnover by ID Cafllet
      produces:
        - application/json
      parameters:
        - in: path
          name: carfleetid
          type: string
          required: true
          description: Id of turnover
        - in: query
          name: fromdate
          type: date
          description: From Date (EX:2022-11-07) if you type in from date you need type in todate 
        - in: query
          name: todate
          type: date
          description: To Date  
      responses:
        200:
          description: get turnover car successfully
          schema:
            type: object
            example: {
              "Name Cafleet": "String",
              "Total revenue": "number",
              "Acctual Fuel": "number",
              "ToTalPriceRepair": "number",
              "Profit": "number",
            }
        400:
          description: Id a carFleet does not exitst/Id a carFleet field is not avaliable.
      security:
        - ApiKeyAuth: []
  /admin/turnover/enterprise/total:
    get:
      tags:
        - "turnover"
      summary: get turnover by ID Car
      produces:
        - application/json
      parameters:
        - in: query
          name: fromdate
          type: date
          description: From Date (EX:2022-11-07) if you type in from date you need type in todate 
        - in: query
          name: todate
          type: date
          description: To Date          
      responses:
        200:
          description: get turnover car successfully
          schema:
            type: object
            example: {
              "Name Car": "String",
              "Total revenue": "number",
              "Theoretical Fuel": "number",
              "Carrepair": "number",
              "Profit": "number",
            }
        400:
          description: Id a car does not exitst/Id a car field is not avaliable.
      security:
        - ApiKeyAuth: []
  /admin/carrepair:
    get: 
      tags:
        - "carrepair"
      summary: get carrepair
      produces:
        - application/json
      parameters:
        - in: query
          name: repairCar_type
          type: string
          description: repairCar_type of car(ex Repair, Replace)
        - in: query
          name: device
          type: string
          description: device of car(ex Shell, Battery, Oil, Tire, Other)
        - in: query
          name: page
          type: string
          description: number of page 
        - in: query
          name: pageSize
          type: string
          description: number of page size 
      responses:
        200:
          description: get carrepair successfully.
          schema:
            type: object
            example: {
                
                "car": "ObjectID",
                "repairCar_type": "String",
                "device": "String",
                "price": int,
                "note": "String",
            }
        400:
          description: carrpair in not found
      security:
        - ApiKeyAuth: []    
  /admin/carrepair/{carrepairId}:
    get:
      tags:
        - "carrepair"
      summary: get carrepair by id
      produces:
        - application/json
      parameters:
        - in: path
          name: carrepairId
          type: string
          required: true
          description: Id of a carrent
      responses:
        200:
          description: get carrepair successfully.
          schema:
            type: object
            example: {
                "car": "ObjectID",
                "repairCar_type": "String",
                "device": "String",
                "price": int,
                "note": "String",
            }
        400:
          description: Carrepair is not found
      security:
        - ApiKeyAuth: []   
    put:
      tags:
        - "carrepair"
      summary: Update carrepair by id
      produces:
        - application/json
      parameters:
        - in: path
          name: carrepairId
          type: string
          description: Id Of an Carrepair
        - in: body
          name: update content
          schema:
            type: object
            properties:
              car:
                type: String
                enum: ObjectId
              carepairCar_typer:
                type: string
                enum: ['Repair', 'Replace']
              device:
                type: string
                enum: ['Shell', 'Battery', 'Oil', 'Tire', 'Other']  
              price:
                type: number
              note:
                type: string              
      responses:
        200:
          description: update carrepair successfully.
          schema:
            type: object
            example: {
                "car": "ObjectID",
                "repairCar_type": "String",
                "device": "String",
                "price": int,
                "note": "String",
            }
        400:
          description: update carrepair failed
      security:
        - ApiKeyAuth: []   
        
    delete:
      tags:
        - "carrepair"
      summary: delete carrepair by ID
      produces:
         - application/json
      parameters:
        - in: path
          name: carrepairId
          type: String
          description: id of Carrepair
      responses:
        200:
          description: delete carrepair successfully.
        400:
          description: Id carrepair not found
      security:
        - ApiKeyAuth: []    
  /admin/carrepair/car/{plate}:
    get:
      tags:
      - "carrepair"
      summary: get history repair car by plate
      consumes:
        - application/json
      parameters:
        - in: path
          name: plate
          type: string
          required: true
          description: plate car
      responses:
        200:
          description: get history repair car successfully.
          schema:
            type: object
            example: {
                "car": ObjectId,
                "repairCar_type": String,
                "device": String,
                "price": int,
                "note": string,
                "createdAt": Date,
                "updatedAt": Date,
            }
        400:
          description: Not information found.
      security:
        - ApiKeyAuth: []
  /admin/carrepair/create:
    post:
      tags:
      - "carrepair"
      summary: "create a new Carrepair"
      consumes:
        - application/json
      parameters:
        - in: body
          name: road
          description: a new carrepair.
          schema:
            type: object
            properties:
              car:
                type: string
                enum: ObjectId
              repairCar_type:
                type: string
                enum: ['Repair', 'Replace']
              device:
                type: string
                enum: ['Shell', 'Battery', 'Oil', 'Tire', 'Other']  
              price:
                type: number
              note:
                type: string       
      responses:
        200:
          description: Create carrepair successfully.
        400:
          description: Create carrepair failed.
      security:
        - ApiKeyAuth: []
  /admin/notification:
    post:
      tags:
        - notificationtocarfleet
      summary: post mail to carfleet when car expired 
      produces:
        - application/json
      responses:
        200:
          description: create Notification successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "create Notification successfully",
            }   
        400:
          description: post Notification Failed    
      security:
        - ApiKeyAuth: []
  /admin/blog/{id}/create-a-paragraph:
    patch:
      tags:
        - "blog"
      summary: "Admin create a paragraph in blog"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          type: string
          description: objectId in mongoose of blog
          required: true
      responses:
        200:
          description: create a paragraph successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "create a paragraph successfully",
              "data": {
                "title": "string",
                "description": "string",
                "date": "string",
                "type": "string",
                "_id": "string",
                "paragraphs": [],
                "createdAt": "string",
                "updatedAt": "string",
                "__v": "number",
              }
            }
        400:
          description: create a paragraph failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "create a paragraph failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/blog/{id}/delete-a-paragraph/{paragraphId}:
    patch:
      tags:
        - "blog"
      summary: "Admin delete a paragraph in blog"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          type: string
          description: objectId in mongoose of blog
          required: true
        - in: path
          name: paragraphId
          type: string
          description: objectId in mongoose of paragraph in blog
          required: true
      responses:
        200:
          description: delete a paragraph in blog successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "delete a paragraph in blog successfully",
              "data": {
                "title": "string",
                "description": "string",
                "date": "string",
                "type": "string",
                "_id": "string",
                "paragraphs": [],
                "createdAt": "string",
                "updatedAt": "string",
                "__v": "number",
              }
            }
        400:
          description: delete a paragraph in blog failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "delete a paragraph in blog failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/blog/{id}/update-content-paragraph/{paragraphId}:
    patch:
      tags:
        - "blog"
      summary: "Admin update content paragraph in blog"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          type: string
          description: objectId in mongoose of blog
          required: true
        - in: path
          name: paragraphId
          type: string
          description: objectId in mongoose of paragraph in blog
          required: true
        - in: formData
          name: content
          type: string
          default: string
          required: true
      responses:
        200:
          description: update content paragraph in blog successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "update content paragraph in blog successfully",
              "data": {
                "title": "string",
                "description": "string",
                "date": "string",
                "type": "string",
                "_id": "string",
                "paragraphs": [],
                "createdAt": "string",
                "updatedAt": "string",
                "__v": "number",
              }
            }
        400:
          description: update content paragraph in blog failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "update content paragraph in blog failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/blog/{id}/update-imgs-paragraph/{paragraphId}:
    patch:
      tags:
        - "blog"
      summary: "Admin update imgs paragraph in blog"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          type: string
          description: objectId in mongoose of blog
          required: true
        - in: path
          name: paragraphId
          type: string
          description: objectId in mongoose of paragraph in blog
          required: true
        - in: formData
          name: file
          description: list image file
          type: file
          required: true
      responses:
        200:
          description: update imgs paragraph in blog successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "update imgs paragraph in blog successfully",
              "data": {
                "title": "string",
                "description": "string",
                "date": "string",
                "type": "string",
                "_id": "string",
                "paragraphs": [],
                "createdAt": "string",
                "updatedAt": "string",
                "__v": "number",
              }
            }
        400:
          description: update imgs paragraph in blog failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "update imgs paragraph in blog failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/blog/{id}/replace-one-img-paragraph/{paragraphId}:
    patch:
      tags:
        - "blog"
      summary: "Admin replace one img paragraph in blog"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          type: string
          description: objectId in mongoose of blog
          required: true
        - in: path
          name: paragraphId
          type: string
          description: objectId in mongoose of paragraph in blog
          required: true
        - in: formData
          name: file
          description: list image file
          type: file
          required: true
        - in: formData
          name: urlImg
          description: url of image need to replace in paragraph
          type: string
          required: true
      responses:
        200:
          description: replace one img paragraph in blog successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "replace one img paragraph in blog successfully",
              "data": {
                "title": "string",
                "description": "string",
                "date": "string",
                "type": "string",
                "_id": "string",
                "paragraphs": [],
                "createdAt": "string",
                "updatedAt": "string",
                "__v": "number",
              }
            }
        400:
          description: replace one img paragraph in blog failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "replace one img paragraph in blog failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/blog/{id}/delete-one-img-paragraph/{paragraphId}:
    patch:
      tags:
        - "blog"
      summary: "Admin delete one img paragraph in blog"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          type: string
          description: objectId in mongoose of blog
          required: true
        - in: path
          name: paragraphId
          type: string
          description: objectId in mongoose of paragraph in blog
          required: true
        - in: formData
          name: urlImg
          description: url of image need to delete in paragraph
          type: string
          required: true
      responses:
        200:
          description: delete one img paragraph in blog successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "delete one img paragraph in blog successfully",
              "data": {
                "title": "string",
                "description": "string",
                "date": "string",
                "type": "string",
                "_id": "string",
                "paragraphs": [],
                "createdAt": "string",
                "updatedAt": "string",
                "__v": "number",
              }
            }
        400:
          description: delete one img paragraph in blog failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "delete one img paragraph in blog failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/blog/{id}/update-picture:
    patch:
      tags:
        - "blog"
      summary: "Admin update picture in blog"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          type: string
          description: objectId in mongoose of blog
          required: true
        - in: formData
          name: file
          description: list image file
          type: file
          required: true
      responses:
        200:
          description: Admin update picture in blog successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Admin update picture in blog successfully",
              "data": {
                "title": "string",
                "description": "string",
                "date": "string",
                "type": "string",
                "_id": "string",
                "paragraphs": [],
                "createdAt": "string",
                "updatedAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Admin update picture in blog failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Admin update picture in blog failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/blog/{id}:
    patch:
      tags:
        - "blog"
      summary: "Admin update a common blog"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          type: string
          description: objectId in mongoose of blog
          required: true
        - in: formData
          name: title
          type: string
          description: title
          required: true
        - in: formData
          name: description
          type: string
          description: description
          required: true
        - in: formData 
          name: type
          type: string
          required: true
          default: industry_news
          enum: ['industry_news','event','j_magazine']
        - in: formData
          name: date
          type: string
          default: '2023-07-23:00:10:00'
          description : date with format yyyy-mm-dd:hh:mm:ss
          required: true
      responses:
        200:
          description: Admin update a common blog successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Admin update a common blog successfully",
              "data": {
                "title": "string",
                "description": "string",
                "date": "string",
                "type": "string",
                "picture" : "string",
                "_id": "string",
                "paragraphs": [],
                "createdAt": "string",
                "updatedAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Admin update a common blog failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Admin update a common blog failed.",
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags:
        - "blog"
      summary: "Admin delete a blog"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          type: string
          description: objectId in mongoose of blog
          required: true  
      responses:
        200:
          description: Admin delete a blog successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Admin delete a blog successfully",
              "data": {
                "title": "string",
                "description": "string",
                "date": "string",
                "type": "string",
                "picture" : "string",
                "_id": "string",
                "paragraphs": [],
                "createdAt": "string",
                "updatedAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Admin delete a blog failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Admin delete a blog failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/blog:
    post:
      tags:
        - "blog"
      summary: "Admin create a new blog"
      produces:
        - multipart/form-data
      parameters:
        - in: formData
          name: title
          type: string
          description: title
          required: true
        - in: formData
          name: description
          type: string
          description: description
          required: true
        - in: formData 
          name: type
          type: string
          required: true
          default: industry_news
          enum: ['industry_news','event','j_magazine']
        - in: formData
          name: date
          type: string
          default: '2023-07-23:00:10:00'
          description : date with format yyyy-mm-dd:hh:mm:ss
          required: true
      responses:
        200:
          description: Create blog successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Create blog successfully",
              "data": {
                "title": "string",
                "description": "string",
                "date": "string",
                "type": "string",
                "_id": "string",
                "paragraphs": [],
                "createdAt": "string",
                "updatedAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Create blog failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Create blog failed.",
            }
      security:
        - ApiKeyAuth: []
  /blog/{id}:
   get: 
      tags:
        - "blog"
      summary: Get 1 blog
      produces:
        - application/json     
      parameters:
      - in: path
        name: id
        type: string
        description : objectId in mongoose of blog
        required: true
      responses:
        200: 
          description: Get 1 blog successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get 1 blog",
              "data": {
                "title": "string",
                "description": "string",
                "date": "string",
                "type": "string",
                "_id": "string",
                "paragraphs": [],
                "createdAt": "string",
                "updatedAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Get 1 blog failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "Get 1 blog failed",
            }
      security:
      - ApiKeyAuth: [] 
  /blog:
    get: 
      tags:
        - "blog"
      summary: Get blogs 
      produces:
        - application/json     
      parameters:
      - in: query
        name: page
        type: number
        default: 1
        required: true
      - in: query
        name: pageSize
        type: number
        default: 20
        required: true  
      - in: query
        name: type
        type: string
        enum: ['industry_news','event','j_magazine']
      - in: query
        name: keyword
        type: string
      
      responses:
        200: 
          description: Get blogs successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get blogs",
              "data": [{
                "title": "string",
                "description": "string",
                "date": "string",
                "type": "string",
                "_id": "string",
                "paragraphs": [],
                "createdAt": "string",
                "updatedAt": "string",
                "__v": "number",
              }]
            }
        400:
          description: Get blogs failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "Get blogs failed",
            }
      security:
      - ApiKeyAuth: []
  /admin/blog/banner/add-img:
    patch: 
      tags:
        - "blog"
      summary: Add image for blog banner 
      produces:
        - application/json     
      parameters:
        - in: formData
          name: file
          description: list image file
          type: file
          required: true
      responses:
        200: 
          description: Add image for blog banner successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Add image for blog banner",
              "data": {
                "imgs": [],
              }
            }
        400:
          description: Add image for blog banner failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "Add image for blog banner failed",
            }
      security:
      - ApiKeyAuth: []
  /admin/blog/banner/replace-one-img:
    patch: 
      tags:
        - "blog"
      summary: replace-one-img for blog banner 
      produces:
        - application/json     
      parameters:
        - in: formData
          name: file
          description: list image file
          type: file
          required: true
        - in: formData
          name: urlImg
          description: url of image need to replace in paragraph
          type: string
          required: true 
      responses:
        200: 
          description: replace-one-img for blog banner successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "replace-one-img for blog banner",
              "data": {
                "imgs": [],
              }
            }
        400:
          description: replace-one-img for blog banner failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "replace-one-img for blog banner failed",
            }
      security:
      - ApiKeyAuth: []
  /admin/blog/banner/delete-one-img:
    patch: 
      tags:
        - "blog"
      summary: delete-one-img for blog banner 
      produces:
        - application/json     
      parameters:
        - in: formData
          name: url_img
          description: url of image need to replace in paragraph
          type: string
          required: true 
      responses:
        200: 
          description: delete-one-img for blog banner successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "delete-one-img for blog banner",
              "data": {
                "imgs": [],
              }
            }
        400:
          description: delete-one-img for blog banner failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "delete-one-img for blog banner failed",
            }
      security:
      - ApiKeyAuth: []
  /blog/banner:
    get: 
      tags:
        - "blog"
      summary: Get blog banner  
      responses:
        200: 
          description: Get blog banner successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get blog banner",
              "data": {
                "imgs": [],
              }
            }
        400:
          description: Get blog banner failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "Get blog banner failed",
            }
  /export:
    get:
      tags:
        - "excel"
      summary: "Export file excel"
      consumes:
          description: Id of an customer
      parameters:
        - in: query
          name: orderId
          type: string
          description: ID of order
          required: true
      responses:
        200:
          description: Export successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Export file successfully.",
            }
        400:
          description: Export failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Export file successfully.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - ApiKeyAuth: [] 
  /admin/export:
    get:
      tags:
        - "excel"
      summary: "Export file excel"
      consumes:
          description: Field want to export
      parameters:
        - in: query
          name: Bill_of_lading
          type: string
          description: true or nothing
        - in: query
          name: Confirm_staff
          type: string
          description: true or nothing
        - in: query
          name: PickUp_staff
          type: string
          description: true or nothing
        - in: query
          name: Shipping_department
          type: string
          description: true or nothing
        - in: query
          name: Note
          type: string
          description: true or nothing
        - in: query
          name: Standard_fee
          type: string
          description: true or nothing
        - in: query
          name: Delivery_company
          type: string
          description: true or nothing
        - in: query
          name: Sender
          type: string
          description: true or nothing
        - in: query
          name: Sender_phone
          type: string
          description: true or nothing
        - in: query
          name: Total_amount_after_discount
          type: string
          description: true or nothing
        - in: query
          name: Remote_area_surcharge
          type: string
          description: true or nothing
        - in: query
          name: Total_amount_after_tax_and_discount
          type: string
          description: true or nothing
        - in: query
          name: VAT
          type: string
          description: true or nothing
        - in: query
          name: Total_amount_before_discount
          type: string
          description: true or nothing
        - in: query
          name: Amount_payable
          type: string
          description: true or nothing
        - in: query
          name: Discount_amount
          type: string
          description: true or nothing
        - in: query
          name: Fuel_surcharge
          type: string
          description: true or nothing
        - in: query
          name: Other_fees
          type: string
          description: true or nothing
        - in: query
          name: Copyright_fee
          type: string
          description: true or nothing
        - in: query
          name: Insurance_premium
          type: string
          description: true or nothing
        - in: query
          name: COD
          type: string
          description: true or nothing
        - in: query
          name: Chargeable_weight
          type: string
          description: true or nothing
        - in: query
          name: Content_of_goods
          type: string
          description: true or nothing
        - in: query
          name: Destination_area_code
          type: string
          description: true or nothing
        - in: query
          name: origin
          type: string
          description: true or nothing
      responses:
        200:
          description: Export successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Export file successfully.",
            }
        400:
          description: Export failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Export file successfully.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - ApiKeyAuth: []    
  /individual-contract:
    post:
      tags:
        - "individual-contract"
      summary: "Create a new individual-contract"
      consumes:
        - multipart/form-data
      parameters:         
        - in: formData
          name: name
          description: customer's name.
          type: string
          required: true
        - in: formData
          name: phone
          description: customer's phone .
          type: number
          required: true
        - in: formData
          name: area
          description: customer's address.
          type: string
          required: true
        - in: formData
          name: email
          description: customer's email.
          type: string
          required: true
        - in: formData
          name: id_personal
          description: customer's id_personal.
          type: number
          required: true
        - in: formData
          name: bank_account_holders
          description: customer's bank_account_holders.
          type: string
          required: true
        - in: formData
          name: bank_account_number
          description: customer's bank_account_number.
          type: number
          required: true
        - in: formData
          name: bank_name
          description: customer's bank_name.
          type: string
          required: true
        - in: formData
          name: bank_branch
          description: customer's bank_branch.
          type: string
          required: true
        - in: formData
          name: ID_front_photo
          description: customer's ID_front_photo.
          type: file
          required: true
        - in: formData
          name: ID_back_photo
          description: customer's ID_back_photo.
          type: file
          required: true
        - in: formData
          name: portrait_photo
          description: customer's portrait_photo.
          type: file
          required: true
      responses:
        200:
          description: Create information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create information successfully.",
            }
        400:
          description: Create information failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create information failed.",
            }
      security:
        - ApiKeyAuth: []     
    get:
      tags:
        - "individual-contract"
      summary: get individual-contract
      produces:
        - application/json
      responses:
        200:
          description: get individual-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get individual-contract successful.",
              "data": {
                "_id": "id",
                "customer": "string",
                "name": "string",
                "phone": "number",
                "area": "string",
                "email": "string",
                "id_personal": "number",
                "bank_account_holders": "string",
                "bank_account_number": "number",
                "bank_name": "string",
                "bank_branch": "string",
                "ID_front_photo": "path",
                "ID_back_photo": "path",
                "portrait_photo": "path",
              }
            }
        400:
          description: customerId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "customer is not found.",
            }
      security:
        - ApiKeyAuth: []    
  /individual-contract/{id}:
    delete:
      tags:
        - individual-contract
      summary: user delete individual-contract
      consumes:
        - application/json
      parameters:
      - in: path
        name: id
        description: id of contract
      responses:
        200:
          description: delete your individual-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "delete your individual-contract successfully.",
            }
        400:
          description: delete your individual-contract failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "delete your individual-contract failed.",
            }
      security:
        - ApiKeyAuth: []  
  /admin/individual-contract/{customerId}:
    post:
      tags:
        - "individual-contract"
      summary: "Create a new individual-contract"
      consumes:
        - multipart/form-data
      parameters:    
        - in: path
          name: id     
        - in: formData
          name: name
          description: customer's name.
          type: string
          required: true
        - in: formData
          name: phone
          description: customer's phone .
          type: number
          required: true
        - in: formData
          name: area
          description: customer's address.
          type: string
          required: true
        - in: formData
          name: email
          description: customer's email.
          type: string
          required: true
        - in: formData
          name: id_personal
          description: customer's id_personal.
          type: number
          required: true
        - in: formData
          name: bank_account_holders
          description: customer's bank_account_holders.
          type: string
          required: true
        - in: formData
          name: bank_account_number
          description: customer's bank_account_number.
          type: number
          required: true
        - in: formData
          name: bank_name
          description: customer's bank_name.
          type: string
          required: true
        - in: formData
          name: bank_branch
          description: customer's bank_branch.
          type: string
          required: true
        - in: formData
          name: ID_front_photo
          description: customer's ID_front_photo.
          type: file
          required: true
        - in: formData
          name: ID_back_photo
          description: customer's ID_back_photo.
          type: file
          required: true
        - in: formData
          name: portrait_photo
          description: customer's portrait_photo.
          type: file
          required: true
      responses:
        200:
          description: Create information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create information successfully.",
            }
        400:
          description: Create information failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create information failed.",
            }
      security:
        - ApiKeyAuth: []        
    delete:
      tags:
        - individual-contract
      summary: user delete individual-contract
      consumes:
        - application/json
      parameters:
      - in: path
        name: id
      responses:
        200:
          description: delete your individual-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "delete your individual-contract successfully.",
            }
        400:
          description: delete your individual-contract failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "delete your individual-contract failed.",
            }
      security:
        - ApiKeyAuth: []   
  /admin/individual-contract:
    get:
      tags:
        - "individual-contract"
      summary: get individual-contract
      produces:
        - application/json
      responses:
        200:
          description: get individual-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get individual-contract successful.",
              "data": {
                "_id": "id",
                "customer": "string",
                "name": "string",
                "phone": "number",
                "area": "string",
                "email": "string",
                "id_personal": "number",
                "bank_account_holders": "string",
                "bank_account_number": "number",
                "bank_name": "string",
                "bank_branch": "string",
                "ID_front_photo": "path",
                "ID_back_photo": "path",
                "portrait_photo": "path",
              }
            }
        400:
          description: customerId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "customer is not found.",
            }
      security:
        - ApiKeyAuth: []  
  /business-contract:
    post:
      tags:
        - "business-contract"
      summary: "Create a new business-contract"
      consumes:
        - multipart/form-data
      parameters:         
        - in: formData
          name: company
          description: company's name.
          type: string
          required: true
        - in: formData
          name: name
          description: customer's name.
          type: string
          required: true
        - in: formData
          name: phone
          description: customer's phone .
          type: number
          required: true
        - in: formData
          name: area
          description: customer's area.
          type: string
          required: true
        - in: formData
          name: address
          description: detail address.
          type: string
          required: true
        - in: formData
          name: email
          description: customer's email.
          type: string
          required: true
        - in: formData
          name: position
          description: customer's position.
          type: string
          required: true
        - in: formData
          name: tax
          description: tax code.
          type: string
          required: true
        - in: formData
          name: bank_account_holders
          description: customer's bank_account_holders.
          type: string
          required: true
        - in: formData
          name: bank_account_number
          description: customer's bank_account_number.
          type: number
          required: true
        - in: formData
          name: bank_name
          description: customer's bank_name.
          type: string
          required: true
        - in: formData
          name: bank_branch
          description: customer's bank_branch.
          type: string
          required: true
        - in: formData
          name: ID_front_photo
          description: customer's ID_front_photo.
          type: file
          required: true
        - in: formData
          name: ID_back_photo
          description: customer's ID_back_photo.
          type: file
          required: true
        - in: formData
          name: portrait_photo
          description: customer's portrait_photo.
          type: file
          required: true
      responses:
        200:
          description: Create information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create information successfully.",
            }
        400:
          description: Create information failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create information failed.",
            }
      security:
        - ApiKeyAuth: []     
    get:
      tags:
        - "business-contract"
      summary: get business-contract
      produces:
        - application/json
      responses:
        200:
          description: get business-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get business-contract successful.",
              "data": {
                "_id": "id",
                "company": "string",
                "customer": "string",
                "name": "string",
                "phone": "number",
                "area": "string",
                "address": "string",
                "email": "string",
                "position": "string",
                "tax_code": "number",
                "bank_account_holders": "string",
                "bank_account_number": "number",
                "bank_name": "string",
                "bank_branch": "string",
                "ID_front_photo": "path",
                "ID_back_photo": "path",
                "portrait_photo": "path",
              }
            }
        400:
          description: customerId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "customer is not found.",
            }
      security:
        - ApiKeyAuth: []    
  /business-contract/{id}:
    delete:
      tags:
        - business-contract
      summary: user delete business-contract
      consumes:
        - application/json
      parameters:
      - in: path
        name: id
        description: id of contract
      responses:
        200:
          description: delete your business-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "delete your business-contract successfully.",
            }
        400:
          description: delete your business-contract failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "delete your business-contract failed.",
            }
      security:
        - ApiKeyAuth: []  
  /admin/business-contract/{customerId}:
    post:
      tags:
        - "business-contract"
      summary: "Create a new business-contract"
      consumes:
        - multipart/form-data
      parameters:    
        - in: path
          name: id     
        - in: formData
          name: company
          description: company's name.
          type: string
          required: true
        - in: formData
          name: name
          description: customer's name.
          type: string
          required: true
        - in: formData
          name: phone
          description: customer's phone .
          type: number
          required: true
        - in: formData
          name: area
          description: customer's area.
          type: string
          required: true
        - in: formData
          name: address
          description: detail address.
          type: string
          required: true
        - in: formData
          name: email
          description: customer's email.
          type: string
          required: true
        - in: formData
          name: position
          description: customer's position.
          type: string
          required: true
        - in: formData
          name: tax
          description: tax code.
          type: string
          required: true
        - in: formData
          name: bank_account_holders
          description: customer's bank_account_holders.
          type: string
          required: true
        - in: formData
          name: bank_account_number
          description: customer's bank_account_number.
          type: number
          required: true
        - in: formData
          name: bank_name
          description: customer's bank_name.
          type: string
          required: true
        - in: formData
          name: bank_branch
          description: customer's bank_branch.
          type: string
          required: true
        - in: formData
          name: ID_front_photo
          description: customer's ID_front_photo.
          type: file
          required: true
        - in: formData
          name: ID_back_photo
          description: customer's ID_back_photo.
          type: file
          required: true
        - in: formData
          name: portrait_photo
          description: customer's portrait_photo.
          type: file
          required: true
      responses:
        200:
          description: Create information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create information successfully.",
            }
        400:
          description: Create information failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create information failed.",
            }
      security:
        - ApiKeyAuth: []        
    delete:
      tags:
        - business-contract
      summary: user delete business-contract
      consumes:
        - application/json
      parameters:
      - in: path
        name: id
      responses:
        200:
          description: delete your business-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "delete your business-contract successfully.",
            }
        400:
          description: delete your business-contract failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "delete your business-contract failed.",
            }
      security:
        - ApiKeyAuth: []   
  /admin/business-contract:
    get:
      tags:
        - "business-contract"
      summary: get business-contract
      produces:
        - application/json
      responses:
        200:
          description: get business-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get business-contract successful.",
              "data": {
                "_id": "id",
                "company": "string",
                "customer": "string",
                "name": "string",
                "phone": "number",
                "area": "string",
                "address": "string",
                "email": "string",
                "position": "string",
                "tax_code": "number",
                "bank_account_holders": "string",
                "bank_account_number": "number",
                "bank_name": "string",
                "bank_branch": "string",
                "ID_front_photo": "path",
                "ID_back_photo": "path",
                "portrait_photo": "path",
              }
            }
        400:
          description: customerId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "customer is not found.",
            }
      security:
        - ApiKeyAuth: []   
  /admin/totalcost:
    get:
      tags:
        - "totalcost"
      summary: get totalcost
      produces:
        - application/json
      responses:
        200:
          description: get totalcost successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get individual-contract successful.",
             
            }
        400:
          description: customerId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "customer is not found.",
            }
      security:
        - ApiKeyAuth: []   
  /discount/{customerId}:
    get:
      tags: 
        - "discount"
      summary: get discount list of a customer
      produces:
        - application/json
      parameters:
        - in: path
          name: customerId
          type: string
          required: true
          description: ID of a customer
      responses:
        200:
          description: Get discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get list discount successfully.",
              "data": {
                "_id": "id",
                "customerId": "string",
                "discount": "number",
                "createAt": "string",
                "updateAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Get discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Get discount failed.",
            }
  /admin/discount:
    get:
      tags: 
        - "discount"
      summary: get all discount
      produces:
        - application/json
      responses:
        200:
          description: Get discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "get discount information successfully.",
              "data": [
                {
                  "_id": "id",
                  "customerId": "string",
                  "discount": "number",
                  "createAt": "string",
                  "updateAt": "string",
                  "__v": "number",
                }
              ]
            }
        400:
          description: Get discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "discount is not found.",
            }
    post:
      tags: 
        - "discount"
      summary: create discount for all customers
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema :
            type : object
            properties:
              title:
                type : string
                description: name of discount
                example: "string"
              rank:
                type : string
                description: rank of customer
                example: "unrank"
                enum: ['titan', 'gold', 'silver', 'bronze','unrank']
              description:
                type : string
                description: description of discount
                example: "string"
              discount:
                type : number
                description: discount percent
                example: 33
              image:
                type : string
                example: "string"
              status:
                type : boolean
                description: the discount is used or not
                example: false
              start_date:
                type : string
                description: start date of discount
                example: "2024-08-06"
              end_date:
                type : string
                description: end date of discount
                example: "2025-09-06"
      responses:
        200:
          description: Create discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Create discount successfully.",
              "data": {
                "_id": "id",
                "customerId": "string",
                "discount": "number",
                "createAt": "string",
                "updateAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Create discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Create discount failed.",
            }
  /admin/discount/{customerId}:
    post:
      tags: 
        - "discount"
      summary: create discount for 1 customers
      consumes:
        - application/json
      parameters:
        - in: path
          name: customerId
          type: string
          required: true
          description: id of a customer
        - in: body
          name: body
          required: true
          schema :
            type : object
            properties:
              title:
                type : string
                description: name of discount
                example: "string"
              rank:
                type : string
                description: rank of customer
                example: "unrank"
                enum: ['titan', 'gold', 'silver', 'bronze','unrank']
              description:
                type : string
                description: description of discount
                example: "string"
              discount:
                type : number
                description: discount percent
                example: 33
              image:
                type : string
                example: "string"
              status:
                type : boolean
                description: the discount is used or not
                example: false
              start_date:
                type : string
                description: start date of discount
                example: "2024-08-06"
              end_date:
                type : string
                description: end date of discount
                example: "2025-09-06"
      responses:
        200:
          description: Create discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Create discount successfully.",
              "data": {
                "_id": "id",
                "customerId": "string",
                "discount": "number",
                "createAt": "string",
                "updateAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Create discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Create discount failed.",
            }
  /admin/discount/{rank}:
    get:
      tags: 
        - "discount"
      summary: get discount by rank
      produces:
        - application/json
      parameters:
        - in: path
          name: rank
          type: string
          required: true
          description: rank of a customer ( titan ,  gold ,  silver ,  bronze , unrank  )
      responses:
        200:
          description: Get discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "get discount successfully.",
              "data": [
                {
                  "_id": "id",
                  "customerId": "string",
                  "discount": "number",
                  "createAt": "string",
                  "updateAt": "string",
                  "__v": "number",
                }
              ]
            }
        400:
          description: Get discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Discount not found.",
            }
  /admin/discount/type/{typeId}:
    put:
      tags: 
        - "discount"
      summary: update discount by type
      consumes:
        - application/json
      parameters:
        - in: path
          name: typeId
          type: string
          description: ID of a discount type
          required: true
        - in: body
          name: body
          description: name of discount
          required: true
          schema :
            type : object
            properties:
              title:
                type : string
                example: "string"
              rank:
                type : string
                example: "unrank"
                enum: ['titan', 'gold', 'silver', 'bronze','unrank']
              description:
                type : string
                example: "string"
              discount:
                type : number
                example: 33
              image:
                type : string
                example: "string"
              status:
                type : boolean
                example: false
              start_date:
                type : string
                example: "2024-08-06"
              end_date:
                type : string
                example: "2025-09-06"
      responses:
        200:
          description: Update discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "update discount information successfully.",
              "data": {
                "_id": "id",
                "customerId": "string",
                "discount": "number",
                "createAt": "string",
                "updateAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Update discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Update discount failed.",
            }
    delete:
      tags: 
        - "discount"
      summary: delete discount by type
      consumes:
        - application/json
      parameters:
        - in: path
          name: typeId
          type: string
          description: ID of a discount type
          required: true
      responses:
        200:
          description: Delete discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Delete discount type successfully.",
            }
        400:
          description: Delete discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Discount type is not found.",
            }
  /admin/discount/{_id}:
    delete:
      tags: 
        - "discount"
      summary: delete discount by id
      consumes:
        - application/json
      parameters:
        - in: path
          name: _id
          type: string
          description: ID of a discount
          required: true
      responses:
        200:
          description: Delete discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Delete discount successfully.",
              "data": {
                "_id": "id",
                "customerId": "string",
                "discount": "number",
                "createAt": "string",
                "updateAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Delete discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Discount is not found.",
            }
    
  /suggest:
    get:
      tags: 
        - "suggest"
      summary: a customer get all suggest
      produces:
        - application/json
      responses:
        200:
          description: Get suggest successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get suggest successfully.",
              "data": [
                {
                  "_id": "id",
                  "customer": "string",
                  "phone": "string",
                  "address": "string",
                  "orderId": "string",
                  "content": "string",
                }
              ]
            }
        400:
          description: Inexistent customer/Invalid orderId
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Customer not found./No suggest found.",
            }
      security:
        - ApiKeyAuth: []
    post:
      tags: 
        - "suggest"
      summary: a customer create a suggest
      consumes:
        - application/json
      parameters:
        - in: header
          name: Authorization
          type: string
          description: token of customer
          required: true
        - in: body
          name: phone
          type: string
          description: require to input phone number if it not found in user. Prioritize keyboard input
        - in: body
          name: address
          type: string
          description: require to input address if it not found in customer. Prioritize keyboard input
        - in: body
          name: orderId
          type: string
          description: ID of order
          required: true
        - in: body
          name: content
          type: string
          description: content of suggest
          required: true
      responses:
        200:
          description: Create suggest successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Create suggest successfully.",
              "data": {
                "_id": "id",
                "customer": "string",
                "phone": "string",
                "address": "string",
                "orderId": "string",
                "content": "string",
              }
            }
        400:
          description: Mising data / invalid id
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Invalid orderId. OrderID must be 8 characters",
              },
              "error2": {
                "success": false,
                "message": "Order not found.",
              },
              "error3": {
                "success": false,
                "message": "Missing required fields",
              },
            }
      security:
        - ApiKeyAuth: []

  /admin/suggest:
    get:
      tags: 
        - "suggest"
      summary: get all suggest
      produces:
        - application/json
      responses:
        200:
          description: Get suggest successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get suggest successfully.",
              "data": [
                {
                  "_id": "id",
                  "customer": "string",
                  "phone": "string",
                  "address": "string",
                  "orderId": "string",
                  "content": "string",
                }
              ]
            }
        400:
          description: No suggest available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Suggest not found.",
            }
  /admin/suggest/{customer_id}:
    get:
      tags: 
        - "suggest"
      summary: get suggest by customer id
      produces:
        - application/json
      parameters:
        - in: path
          name: customer_id
          type: string
          description: ID of a customer
          required: true
      responses:
        200:
          description: Get suggest successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get suggest successfully.",
              "data": [
                {
                  "_id": "id",
                  "customer": "string",
                  "phone": "string",
                  "address": "string",
                  "orderId": "string",
                  "content": "string",
                }
              ]
            }
        400:
          description: No suggest available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "No suggest found.",
            }
  /admin/suggest/detail/{_id}:
    get:
      tags: 
        - "suggest"
      summary: get suggest by id
      produces:
        - application/json
      parameters:
        - in: path
          name: _id
          type: string
          description: ID of a suggest
          required: true
      responses:
        200:
          description: Get suggest successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get suggest successfully.",
              "data": {
                "_id": "id",
                "customer": "string",
                "phone": "string",
                "address": "string",
                "orderId": "string",
                "content": "string",
              }
            }
        400:
          description: No suggest available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "No suggest found.",
            }
  /admin/suggest/{:_id}:
    delete:
      tags: 
        - "suggest"
      summary: delete suggest by id
      produces:
        - application/json
      parameters:
        - in: path
          name: _id
          type: string
          description: ID of a suggest
          required: true
      responses:
        200:
          description: Delete suggest successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Delete suggest successfully.",
              "data": {
                "_id": "id",
                "customer": "string",
                "phone": "string",
                "address": "string",
                "orderId": "string",
                "content": "string",
              }
            }
        400:
          description: Delete suggest failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Suggest not found.",
            }
  /address:
    get:
      tags: 
        - "address"
      summary: get an address list of a customer
      produces:
        - application/json
      responses:
        200:
          description: Get address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get address list successfully.",
              "data": [
                {
                  "_id": "id",
                  "customer_id ": "string",
                  "phone": "string",
                  "name": "string",
                  "address": "string",
                  "province": "string",
                  "default_address": "boolean",
                }
              ]
            }
        400:
          description: No address available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Address List not found.",
            }
      security:
        - ApiKeyAuth: []
    post:
      tags: 
        - "address"
      summary: create an address of a customer
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: create an address of a customer
          required: true
          schema:
            type: object
            properties:
              phone:
                type: string
                example: "string"
              name:
                type: string
                example: "string"
              address:
                type: string
                example: "string"
              province:
                type: string
                example: "string"
              default_address:
                type: boolean
                example: "boolean"
      responses:
        200:
          description: Create address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Add new address successfully.",
              "data": {
                "_id": "id",
                "customer_id ": "string",
                "phone": "string",
                "name": "string",
                "address": "string",
                "province": "string",
                "default_address": "boolean",
              }
            }
        400:
          description: Create address failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Invalid address.",
            }
      security:
        - ApiKeyAuth: []
  /address/current:
    get:
      tags: 
        - "address"
      summary: get the current address of a customer
      produces:
        - application/json
      responses:
        200:
          description: Get address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get address list successfully.",
              "data": {
                "_id": "id",
                "customer_id ": "string",
                "phone": "string",
                "name": "string",
                "address": "string",
                "province": "string",
                "default_address": "boolean",
              }
            }
        400:
          description: No address available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Address not found.",
            }
      security:
        - ApiKeyAuth: []
  /address/{address_id}:
    put:
      tags: 
        - "address"
      summary: update an address of a customer
      produces:
        - application/json
      parameters:
        - in: path
          name: address_id
          type: string
          description: ID of an address
          required: true
        - in: body
          name: body
          description: update an address of a customer
          required: true
          schema:
            type: object
            properties:
              customer_id:
                type: string
                example: "string"
              phone:
                type: string
                example: "string"
              name:
                type: string
                example: "string"
              address:
                type: string
                example: "string"
              province:
                type: string
                example: "string"
              default_address:
                type: boolean
                example: "boolean"
      responses:
        200:
          description: Update address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Update address successfully.",
              "data": {
                "_id": "id",
                "customer_id ": "string",
                "phone": "string",
                "name": "string",
                "address": "string",
                "province": "string",
                "default_address": "boolean",
              }
            }
        400:
          description: Update address failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Update address failed.",
            }
      security:
        - ApiKeyAuth: []
    delete:
      tags: 
        - "address"
      summary: delete an address of a customer
      produces:
        - application/json
      parameters:
        - in: path
          name: address_id
          type: string
          description: ID of an address
          required: true
      responses:
        200:
          description: Delete address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Delete address successfully.",
              "data": {
                "_id": "id",
                "customer_id ": "string",
                "phone": "string",
                "name": "string",
                "address": "string",
                "province": "string",
                "default_address": "boolean",
              }
            }
        400:
          description: Delete address failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Delete address failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/address:
    get:
      tags: 
        - "admin/address"
      summary: get all addresses
      produces:
        - application/json
      responses:
        200:
          description: Get address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "get address information successfully.",
              "data": [
                {
                  "_id": "id",
                  "customer_id ": "string",
                  "phone": "string",
                  "name": "string",
                  "address": "string",
                  "province": "string",
                  "default_address": "boolean",
                }
              ]
            }
        400:
          description: No address available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "address is not found.",
            }
  /admin/address/{id}:
    get:
      tags: 
        - "admin/address"
      summary: get an address by its id
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: ID of an address
          required: true
      responses:
        200:
          description: Get address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get address successfully.",
              "data": {
                "_id": "id",
                "customer_id ": "string",
                "phone": "string",
                "name": "string",
                "address": "string",
                "province": "string",
                "default_address": "boolean",
              }
            }
        400:
          description: No address available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Address not found.",
            }
  /admin/address/customer/{customer_id}:
    get:
      tags: 
        - "admin/address"
      summary: get all addresses of a customer
      produces:
        - application/json
      parameters:
        - in: path
          name: customer_id
          type: string
          description: ID of a customer
          required: true
      responses:
        200:
          description: Get address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get address list successfully.",
              "data": [
                {
                  "_id": "id",
                  "customer_id ": "string",
                  "phone": "string",
                  "name": "string",
                  "address": "string",
                  "province": "string",
                  "default_address": "boolean",
                }
              ]
            }
        400:
          description: No address available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Address List not found.",
            }
  /admin/post-office:
    post:
        tags:
          - "post-office"
        summary: admin create new post office
        consumes:
          - application/json
        parameters:
        - in: body
          name: post office information
          required: true
          schema:
            type: object
            required: 
              - address
            properties:
              name:
                type: string
              province:
                type: string
              district:
                type: string
              address:
                type: string
        responses:
          200:
            description: Create new post office successfully
            schema:
              type: object
              example: {
                "success": true,
                "message": "Create new post office successfully.",
                "data": {
                  "province": "string",
                  "district": "string",
                  "address": "string",
                  "code": "string",
                  "_id": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
              }
          400: 
            description: 
            schema:
              type: object
              example: {
                "error": {
                  "success": false,
                  "message": [
                    "address field is required.",
                  ],
                },
              }
        security:
          - ApiKeyAuth: []
    get:
        tags:
          - "post-office"
        summary: admin get post office
        consumes:
          - application/json
        responses:
          200:
            description: Get post office successfully
            schema:
              type: object
              example: {
                "success": true,
                "message": "Get post office successfully.",
                "data": [
                  {
                    "address": "string",
                    "code": "string",
                    "_id": "string",
                    "createdAt": "string",
                    "updatedAt": "string",
                    "__v": 0,
                  },
                ]
              }
        security:
          - ApiKeyAuth: []
  /admin/post-office/after-fill:
    get:
        tags:
          - "post-office"
        summary: admin get post office
        consumes:
          - application/json
        parameters:
        - in: formData
          name: province
          description: province of arrival.
          type: string
          required: true
        - in: formData
          name: district
          description: district of arrival.
          type: string
          required: true
        responses:
          200:
            description: Get post office successfully
            schema:
              type: object
        security:
          - ApiKeyAuth: []
  /admin/post-office/inventory/{postId}:
    get:
        tags:
          - "post-office"
        summary: admin get inventory post office
        consumes:
          - application/json
        parameters:
        - in: path
          name: code
        responses:
          200:
            description: Get post office inventory successfully
            schema:
              type: object
        security:
          - ApiKeyAuth: []
  /admin/post-office/inventorydetail/{postId}:
    get:
        tags:
          - "post-office"
        summary: admin get inventory post office
        consumes:
          - application/json
        parameters:
        - in: path
          name: code
        responses:
          200:
            description: Get post office inventory successfully
            schema:
              type: object
        security:
          - ApiKeyAuth: []
  /admin/post-office/inventory/{startDate}/{endDate}/{postCode}:
    get:
        tags:
          - "post-office"
        summary: admin get post office supervision
        consumes:
          - application/json
        parameters:
        - in: path
          name: code
        responses:
          200:
            description: Get post office inventory successfully
            schema:
              type: object
        security:
          - ApiKeyAuth: []
  /admin/post-office/{id}:
    patch:
        tags:
          - "post-office"
        summary: admin update new post office
        consumes:
          - application/json
        parameters:
        - in: path
          name: id
        - in: body
          name: post office information
          required: true
          schema:
            type: object
            required: 
              - address
            properties:
              name:
                type: string
              province:
                type: string
              district:
                type: string
              address:
                type: string
        responses:
          200:
            description: Update post office successfully
            schema:
              type: object
              example: {
                "success": true,
                "message": "Update post office successfully.",
                "data": {
                  "province": "string",
                  "district": "string",
                  "address": "string",
                  "code": "string",
                  "_id": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
              }
          400: 
            description: 
            schema:
              type: object
              example: {
                "error": {
                  "success": false,
                  "message": [
                    "address field is required.",
                  ],
                },
              }
        security:
          - ApiKeyAuth: []
    delete:
        tags:
          - "post-office"
        summary: admin delete post office
        consumes:
          - application/json
        parameters:
        - in: path
          name: id
        responses:
          200:
            description: Delete post office successfully
            schema:
              type: object
              example: {
                "success": true,
                "message": "Delete post office successfully.",
                "data": {
                  "address": "string",
                  "code": "string",
                  "_id": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
              }
          400: 
            description: 
            schema:
              type: object
              example: {
                "error": {
                  "success": false,
                  "message": [
                    "address field is required.",
                  ],
                },
              }
        security:
          - ApiKeyAuth: []
  /shipper/takeOrder/take:
    get:
        tags:
          - shipper
        summary: shipper take assigned order
        consumes:
          - application/json
        parameters:
        - in: body
          name: type take order
          required: true
          schema:
            type: object
            properties:
              typeTakeOrder:
                type: string
        responses:
          200:
            description: take all assigned order.
            schema:
              type: object
              example: {
                "success": true,
                "message": "take all assigned order successfully.",
                "data": []              
              }
          400:
            description: take all assigned order failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "take all assigned order failed.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/acceptorder/:
    PUT:
        tags:
          - shipper
        summary: shipper accept order
        consumes:
          - application/json
        parameters:
        - in: body
          name: type accept order
          required: true
          schema:
            type: object
            properties:
              typeTakeOrder:
                type: string
        responses:
          200:
            description: accept order.
            schema:
              type: object
              example: {
                "success": true,
                "message": "Accept order successfully.",
                "data": []              
              }
          400:
            description: Accept order failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "Accept order failed.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/takeOrder/show-address:
    get:
        tags:
          - shipper
        summary: show-address for shipper
        consumes:
          - application/json
        responses:
          200:
            description: show-address for shipper.
            schema:
              type: object
              example: {
                "success": true,
                "message": "show-address for shipper successfully.",
                "data": []              
              }
          400:
            description: show-address for shipper failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "show-address for shipper failed.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/takeOrder/show-order-detail/{OrderId}:
    get:
        tags:
          - shipper
        summary: show-order-detail for shipper
        consumes:
          - application/json
        parameters:
        - in: path
          name: OrderId
        responses:
          200:
            description: show-order-detail for shipper.
            schema:
              type: object
              example: {
                "success": true,
                "message": "show-order-detail for shipper successfully.",
                "data": []              
              }
          400:
            description: show-order-detail for shipper failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "show-order-detail for shipper failed.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/takeOrder/receive/{OrderId}:
    patch:
        tags:
          - shipper
        summary: receive order
        consumes:
          - multipart/form-data
        parameters:
        - in: path
          name: OrderId
          type: string
          required: true
          description: Id of a order 
        - in: formData
          name: scan_type
          type: string
        - in: formData
          name: transportation
          type: string
        - in: formData
          name: post_office
          type: string
        - in: formData
          name: weight
          type: string
        - in: formData
          name: image
          type: file
        responses:
          200:
            description: receive order
            schema:
              type: object
              example: {
                "success": true,
                "message": "receive order successfully.",
                "data": []              
              }
          400:
            description: receive order failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "receive order failed.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/takeOrder/order-issue/{OrderId}:
    post:
        tags:
          - shipper
        summary: order issue
        consumes:
          - multipart/form-data
        parameters:
        - in: path
          name: OrderId
          required: true
          description: Order Id
        - in: formData
          name: issueType
          type: string
          description: issueType of order issue
        - in: formData
          name: description
          type: string
          description: description of order issue
        - in: formData
          name: note
          type: string
          description: note of order issue
        - in: formData
          name: image
          type: file
          description: Image of order issue
        responses:
          200:
            description: receive order
            schema:
              type: object
              example: {
                "success": true,
                "message": "order issue successfully.",
                "data": []              
              }
          400:
            description: order issue failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "order issue failed.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/takeOrder/show-order-problem/{OrderId}:
    get:
        tags:
          - shipper
        summary: show-order-problem
        consumes:
          - application/json
        parameters:
        - in: path
          name: OrderId
        responses:
          200:
            description: show-order-problem for shipper.
            schema:
              type: object
              example: {
                "success": true,
                "message": "show-order-problem for shipper successfully.",
                "data": []              
              }
          400:
            description: show-order-problem for shipper failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "show-order-problem for shipper failed.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/takeOrder/delete-order-problem/{AllProblemOrderId}:
    delete:
        tags:
          - shipper
        summary: delete-order-problem
        consumes:
          - application/json
        parameters:
        - in: path
          name: AllProblemOrderId
        responses:
          200:
            description: delete-order-problem for shipper.
            schema:
              type: object
              example: {
                "success": true,
                "message": "delete-order-problem for shipper successfully.",
                "data": []              
              }
          400:
            description: delete-order-problem for shipper failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "delete-order-problem for shipper failed.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/takeOrder/history-order:
    get:
        tags:
          - shipper
        summary: history-order
        consumes:
          - application/json
        responses:
          200:
            description: history-order for shipper.
            schema:
              type: object
              example: {
                "success": true,
                "message": "history-order for shipper successfully.",
                "data": []              
              }
          400:
            description: history-order for shipper failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "history-order for shipper failed.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/takeOrder/create-order-by-shipper:
    post:
        tags:
          - shipper
        summary: create order by shipper
        consumes:
          - multipart/form-data
        parameters:
        - in: formData
          name: phone_sender
          type: string
        - in: formData
          name: name_sender
          type: string
        - in: formData
          name: address_sender
          type: string
        - in: formData
          name: phone_receiver
          type: string
        - in: formData
          name: name_receiver
          type: string
        - in: formData
          name: address_receiver
          type: string
        - in: formData
          name: origin
          type: string
        - in: formData
          name: destination
          type: string
        - in: formData
          name: payment_methods
          type: string
        - in: formData
          name: transportation
          type: string
        - in: formData
          name: name_product
          type: string
        - in: formData
          name: value_product
          type: string
        - in: formData
          name: type_product
          type: string
        - in: formData
          name: weight_product
          type: string
        - in: formData
          name: quantity_product
          type: string
        - in: formData
          name: type_shipping
          type: string
        - in: formData
          name: cod
          type: string
        - in: formData
          name: fee_cod
          type: string
        - in: formData
          name: insurance_fee
          type: string
        - in: formData
          name: other_shipping
          type: string
        - in: formData
          name: total_shipping
          type: string
        - in: formData
          name: note_shipping
          type: string
        - in: formData
          name: scan_type
          type: string
        - in: formData
          name: cash_payment
          type: string
        - in: formData
          name: image
          type: file
        responses:
          200:
            description: create order by shipper
            schema:
              type: object
              example: {
                "success": true,
                "message": "create order by shipper successfully.",
                "data": []              
              }
          400:
            description: create order by shipper failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "create order by shipper failed.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/notification:
    get:
        tags:
          - shipper
        summary: notification for shipper
        consumes:
          - application/json
        responses:
          200:
            description: notification for shipper.
            schema:
              type: object
              example: {
                "success": true,
                "message": "notification for shipper successfully.",
                "data": []              
              }
          400:
            description: notification for shipper failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "notification for shipper failed.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/historyScanOrder:
    get:
        tags:
          - shipper
        summary: history-scan-order
        consumes:
          - application/json
        responses:
          200:
            description: history-scan-order for shipper.
            schema:
              type: object
              example: {
                "success": true,
                "message": "history-scan-order for shipper successfully.",
                "data": []              
              }
          400:
            description: history-scan-order for shipper failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "history-order for shipper failed.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/historyScanOrder/detail:
    get:
        tags:
          - shipper
        summary: history-scan-order detail
        consumes:
          - application/json
        parameters:
        - in: body
          name: history-scan-order detail
          required: true
          schema:
            type: object
            properties:
              typeScan:
                type: string
                enum: ['recived_order', 'sending_postoffice', 'incoming_postoffice', 'sending_warehouse', 'incoming_warehouse', 'shipping', 'unusual_order']
        responses:
          200:
            description: take all assigned order.
            schema:
              type: object
              example: {
                "success": true,
                "message": "take all assigned order successfully.",
                "data": []              
              }
          400:
            description: take all assigned order failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "take all assigned order failed.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/CODSigningStatus/:
    get:
      tags:
        - shipper
      summary: Get the number of unsigned and signed applications by date
      consumes:
        - application/json
      parameters:
        - in: query
          name: fromDate
          type: string
          description: from Date
        - in: query
          name: toDate
          type: string
          description: to Date
        - in: query
          name: isSign
          type: string
          description: Sign status
      responses:
        200:
          description: get order list successfully.
          schema:
            type: object
            example: {
             "success": true,
              "data":[{
                "date": "string",
                "quantity": "string",
                "sumCOD" : "string",
              }]
            }
      security:
      - ApiKeyAuth: [] 
  /shipper/CODSigningStatus/details-of-the-day:
    get:
      tags:
        - shipper
      summary: Get the shipper's order list for the selected date
      consumes:
        - application/json
      parameters:
        - in: query
          name: date
          type: string
          description: date of order
        - in: query
          name: isSign
          type: string
          description: Sign status
      responses:
        200:
          description: get detail order list successfully.
          schema:
            type: object
            example: {
             "success": true,
              "data":[{
                "orderId": "string",
                "name_receiver": "string",
                "phone_receiver" : "string",
                "address_receiver": "string",
                "COD": "string",
                "name_product" : "string",
              }]
            }
        404:
            description: Order not found.
            schema:
              type: object
              example: {
                "success": false,
                "message": "Order not found.",
              }
      security:
        - ApiKeyAuth: [] 
  /shipper/CODSigningStatus/detail-order/{orderId}:
    get:
      tags:
        - shipper
      summary: Detail of order
      consumes:
        - application/json
      parameters:
        - in: path
          name: orderId
          description: orderId of order
      responses:
        200:
          description: get detail order list successfully.
          schema:
            type: object
            example: {
             "success": true,
              "data":[{
                "orderId": "string",
                "name_receiver": "string",
                "phone_receiver" : "string",
                "address_receiver": "string",
                "COD": "string",
                "name_product" : "string",
              }]
            }
      security:
        - ApiKeyAuth: [] 
  /shipper/waitForDelivery/:
    get:
      tags:
        - shipper
      summary: Get the shipper's list of orders to be delivered
      consumes:
        - application/json
      responses:
        200:
          description: successfully processed and returned a list of pending orders
          schema:
            type: object
            example: {
              "success": true,
              "data": [
                {
                  "name_receiver":"string",
                  "phone_receiver":"string",
                  "address_receiver":"string",
                  "COD":"string",
                  "name_product":"string",
                  "estimated_deliver_before_expected_time":"string",
                  "reason_for_failed_delivery":"string",
                }
              ]
            }
      404:
        description: Order not found.
        schema:
              type: object
              example: {
                "success": false,
                "message": "Order not found.",
              }        
      security:
      - ApiKeyAuth: []        

  /shipper/waitForDelivery/create-issues-order/{orderId}:
    post:
      tags:
        - shipper
      summary: create an error for the order
      consumes:
        - application/json
      parameters:
      - in: path
        name: orderId
        description: orderId of order
      - in: body
        name: requestBody
        description: Request body
        required: true
        schema:
          type: object
          properties:
            issueType:
              type: string
              description: issues of order
            description:
              type: string
              description: issues of order
            appointment_date:
              type: string
              description: appointment date get order
            image:
              type: string
              description: Image problem of the order has damage
      responses:
        200:
          description: Order issue created successfully.
          schema:
            type: object
            example: {
             "success": true,
             "message": "Order issue created successfully.",
            }
        403:
          description: You are not the shipper.
          schema:
                type: object
                example: {
                  "success": false,
                  "message": "You are not the shipper.",
                }
        404:
          description: Order not found.
          schema:
                type: object
                example: {
                  "success": false,
                  "message": "Order not found.",
                }
      security:
      - ApiKeyAuth: []  

  /shipper/waitForDelivery/receiver-information/{orderId}:
    get:
      tags:
        - shipper
      summary: Show recipient information
      parameters:
      - in: path
        name: orderId
        description: orderId of order
      responses:
        200:
          description: Retrieve recipient information 
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orders by delivery staff successfully: ",
              "data" : [
                {
                  "COD": "string",
                  "receiver": "string",
                }]
            }
      security:
        - ApiKeyAuth: []

  /shipper/waitForDelivery/sign-the-order/{orderId}:
    patch:
      tags: 
      - "shipper"
      summary: Delivery rate
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: orderId
          type: string
          description: 'id of order' 
          required: true
          default: 'string'
        - in: body
          name: substituteSignature
          description: Request body
          required: true
          schema:
            type: object
            properties:
              substituteSignature:
                type: string
                description: substituteSignature of order
        - in: formData
          name: signature
          type: file
          description: signature of order
        - in: formData
          name: appSignature
          type: file
          description: appSignature of order  

      responses:
        200:
          description: Signed order successfully. 
          schema:
            type: object
            example: {
                success": true,
                "message": "Signed order successfully.",
              }
        403:
          description: You are not the shipper of this order.
          schema:
            type: object
            example: {
              "success": false,
              "message": "You are not the shipper of this order.",
            }
        404:
          description: Order not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order not found.",
            }
      security:
        - ApiKeyAuth: []

  /shipper/waitForDelivery/change-shipper-order/{orderId}:
      patch:
        tags:
          - shipper
        summary: Update new shipper for orders
        consumes:
          - application/json
        parameters:
        - in: body
          name: shipperId
          type: string
          description: new shipperId of order
        - in: path
          name: orderId
          description: orderId of order
        responses:
          200:
            description: Change shipper updated successfully. 
            schema:
              type: object
              example: {
                "success": true,
                "message": "Signed order successfully.",
              }
          403:
            description: You are not the shipper of this order.
            schema:
              type: object
              example: {
                "success": false,
                "message": "You are not the shipper of this order.",
              }
          404:
            description: Order not found.
            schema:
              type: object
              example: {
                "success": false,
                "message": "Order not found.",
              }
        security:
          - ApiKeyAuth: []  

  /shipper/waitForDelivery/waiting-for-transfer:
      get:
        tags:
          - shipper
        summary: Retrieve returned orders from other shippers
        consumes:
          - application/json
        responses:
          200:
            description: Change shipper updated successfully. 
            schema:
              type: object
              example: {
                "success": true,
                "data":[{
                  "orderId":"string",
                  "name_receiver" : "string",
                  "phone_receiver" : "string",
                  "address_receiver" : "string",
                  "COD" : "string",
                  "name_product" : "string",
                }]
              }
        security:
          - ApiKeyAuth: [] 
  /shipper/waitForDelivery/delivery-order-confirmation/{orderId}:
      patch:
        tags:
          - shipper
        summary: Shipper confirms delivery of order from another shipper
        consumes:
          - application/json
        parameters:
        - in: path
          name: orderId
          description: orderId of order
        responses:
          200:
            description: Change shipper updated successfully. 
            schema:
              type: object
              example: {
                "success": true,
                "message": "Order confirmation successful.",
              }
          403:
            description: You are not the shipper of this order.
            schema:
              type: object
              example: {
                "success": false,
                "message": "You are not the shipper of this order.",
              }
        security:
          - ApiKeyAuth: [] 

  /shipper/waitForDelivery/failed-orders:
      get:
        tags:
          - shipper
        summary: The shipper's failed orders
        consumes:
          - application/json
        responses:
          200:
            description: Change shipper updated successfully. 
            schema:
              type: object
              example: {
                "success": true,
                "message": "Order confirmation successful.",
              }
          403:
            description: You are not the shipper of this order.
            schema:
              type: object
              example: {
                "success": false,
                "data":[{
                  "orderId":"string",
                  "name_receiver" : "string",
                  "phone_receiver" : "string",
                  "address_receiver" : "string",
                  "COD" : "string",
                  "name_product" : "string",
                }]
              }
        security:
          - ApiKeyAuth: [] 

  /shipper/financial-statements:
    get:
      tags:
        - shipper
      summary: Shipper's financial statement
      consumes:
        - application/json
      parameters:
        - in: query
          name: fromDate
          type: string
          description: from Date
        - in: query
          name: toDate
          type: string
          description: to Date
      responses:
        200:
          description: Retrieve financial statements successfully.
          schema:
            type: object
            example: {
             "success": true,
             "message": Retrieve financial statements successfully,
              "data":[{
                "Receiving_fee": "string",
                "Freight_receiving_fee": "string",
                "COD" : "string",
              }]
            }
      security:
      - ApiKeyAuth: []   
  /shipper/shipper-info/:
    get:
      tags:
        - shipper
      summary: Get shipper's information
      responses:
        200:
          description: get shipper info successfully.
          schema:
            type: object
            example: {
             "success": true,
              "data":[{
                "office": "string",
                "nameShipper": "string",
                "staffCode" : "string",
              }]
            }
      security:
      - ApiKeyAuth: []
  /shippingcost/insurance-fee:
    post:
      tags:
      - "shippingcost"
      summary: "Calculate insurance fee when user enters goods value"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: cost
        required: false
        schema:
          type: object
          properties:
            goods_value:
              type: string
      responses:
        200:
          description: Calculate successfully.
          schema:
            type: object
            example: {
              "success": true,
              "data": {
                 "shippingCost":"string",
              }
            }
        400:
          description: null.
          schema: 
            type: object
            example: {
              "success": false,
              "message": "Please enter full information",
            }
  /shipper/codeScanReport/:
    get:
      tags: 
      - "shipper"
      summary: Retrieve the scan code report
      consumes:
        - application/json
      parameters:
        - in: query
          name: fromDate
          type: string
          description: from Date
        - in: query
          name: toDate
          type: string
          description: to Date
      responses:
        200:
          description: Retrieve the successful scan code report.
          schema:
            type: object
            example: {
             "success": true,
             "message": "Retrieve the successful scan code report",
              "data":[{
                "received_order": "string",
                "send_orders": "string",
                "orders_arrive": "string",
                "delivery_order": "string",
                "packaging": "string",
                "Issue": "string",
                "car_going": "string",
                "car_incoming": "string",
              }]
            }
        400:
          description: No orders yet
          schema:
            type: object
            example: {
             "success": false,
             "message": "No orders yet",
            }
      security:
      - ApiKeyAuth: [] 
  /shipper/paymentStaff/payment:
      get:
        tags:
          - shipper
        summary: payment for Admin
        consumes:
          - application/json
        responses:
          200:
            description: Get successfully. 
            schema:
              type: object
              example: {
                "success": true,
                "data":[{
                  "orderId":"string",
                  "receiver_name" : "string",
                  "receiver_phone" : "string",
                  "receiver_address" : "string",
                  "date" : "date",
                  "shipperFee" : "number",
                }]
              }
          400:
          description: null.
          schema: 
            type: object
            example: {
              "success": false,
              "message": "Please enter full information",
            }
        security:
          - ApiKeyAuth: []
  /shipper/money-statistic:
    get:
        tags:
          - shipper
        summary: Money Statistic for shipper
        consumes:
          - application/json
        responses:
          200:
            description: Money Statistic for shipper
            schema:
              type: object
              example: {
                "success": true,
                "message": "Money Statistic for shipper successfully.",
                "data": []              
              }
          400:
            description: Money Statistic for shipper failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "Money Statistic for shipper failed.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/deliveryRate/:
    get:
      tags: 
      - "shipper"
      summary: Delivery rate
      consumes:
        - application/json
      parameters:
        - in: query
          name: fromDate
          type: string
          description: from Date
        - in: query
          name: toDate
          type: string
          description: to Date
      responses:
        200:
          description: Get the delivery rate, success.
          schema:
            type: object
            example: {
             "success": true,
             "message": "Get the delivery rate, success",
              "data":[{
                "completionRate": "string",
                "returnRate": "string",
                "storageRate": "string",
              }]
            }
        400:
          description: No orders yet
          schema:
            type: object
            example: {
             "success": false,
             "message": "No orders yet",
            }
      security:
      - ApiKeyAuth: []
  /shipper/money-statistic/orders/:startOfDay/:endOfDay:
    get:
        tags:
          - shipper
        summary: statistic order with shipper
        consumes:
          - application/json
        parameters:
        - in: path
          name: startOfDay
          type: Date
          required: true
          description: startOfDay
        - in: path
          name: endOfDay
          type: Date
          required: true
          description: endOfDay
        responses:
          200:
            description: statistic order with shipper
            schema:
              type: object
              example: {
                "success": true,
                "message": "successfully.",
                "data": [{
                  "received":"number",
                  "delivered" : "number",
                  "createOrder" : "number",
                }]              
              }
          500:
            description: Error while processing the request.
            schema:
              type: object
              example: {
                "success": false,
                "message": "Error while processing the request.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/money-statistic/delivery-statics:
    get:
        tags:
          - shipper
        summary: delivery-statics with shipper
        consumes:
          - application/json
        responses:
          200:
            description: delivery-statics with shipper
            schema:
              type: object
              example: {
                "success": true,
                "message": "successfully",
                "data": [{
                  "dispatched":[],
                  "dispatching":[]
                }]              
              }
          404:
            description: order not found
            schema:
              type: object
              example: {
                "success": false,
                "message": "order not found",
              }
          500:
            description: Server Interval Error.
            schema:
              type: object
              example: {
                "success": false,
                "message": "Server Interval Error.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/change-pw:
    put:
      tags:
        - shipper
      summary: shipper change current password
      consumes:
        - application/json
      parameters:
      - in: body
        name: info password of shipper
        required: true
        schema:
          type: object
          properties:
            oldPw:
              type: string
              required: true
              description: old password
            newPw:
              type: string
              required: true
              description: new password
            verify_password:
              type: string
              required: true
              description: verify new password
      responses:
        200:
          description: change your password successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "change your password successfully.",
            }
        400:
          description: current password isn't correct.
          schema:
            type: object
            example: {
              "success": false,
              "message": "current password isn't correct.",
            }
      security:
        - ApiKeyAuth: []
  /shipper/search-order:
    get:
        tags:
          - shipper
        summary: Search Order by scan_code_time for shipper
        consumes:
          - application/json
        parameters:
          - in: query
            name: startTimeFilter
            type: string
            description: start time filter
          - in: query
            name: endTimeFilter
            type: string
            description: end time filter
        responses:
          200:
            description: Search Order by scan_code_time for shipper
            schema:
              type: object
              example: {
                "sucess": true,
                "message": "get order by scan_code_time successfully.",
                "data": []
              }
          400:
            description: Search Order by scan_code_time for shipper
            schema:
              type: object
              example: {
                error1: {
                  "success": false,
                  "message": "Invalid Time Filter",
                },
                error2: {
                  "success": false,
                  "message": "Cannot parse time filter",
                },
                error3: {
                  "success": false,
                  "message": "There is not any order in this period time.",
                }
              }
        security:
        - ApiKeyAuth: []
  /shipper/statistic-scan-type:
    get:
        tags:
          - shipper
        summary: Statistic Order by scan_type for shipper
        consumes:
          - application/json
        responses:
          200:
            description: Statistic Order by scan_type for shipper
            schema:
              type: object
              example: {
                "sucess": true,
                "message": "statistic by scan_type for shipper successfully.",
                "data": []
              }
          400:
            description: Statistic Order by scan_type for shipper
            schema:
              type: object
              example: {
                error: {
                  "success": false,
                  "message": "You do not have any order.",
                }
              }
        security:
        - ApiKeyAuth: []
  /shipper/sign-offline/sign/{orderId}/order:
    patch:
      tags: 
      - "shipper"
      summary: Delivery rate
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: orderId
          type: string
          description: 'id of order' 
          required: true
          default: 'string'
        - in: body
          name: substituteSignature
          description: Request body
          required: true
          schema:
            type: object
            properties:
              substituteSignature:
                type: string
                description: substituteSignature of order
        - in: formData
          name: signature
          type: file
          description: signature of order
        - in: formData
          name: appSignature
          type: file
          description: appSignature of order  

      responses:
        200:
          description: Signed order successfully. 
          schema:
            type: object
            example: {
                success": true,
                "message": "Signed order successfully.",
              }
        403:
          description: You are not the shipper of this order.
          schema:
            type: object
            example: {
              "success": false,
              "message": "You are not the shipper of this order.",
            }
        404:
          description: Order not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order not found.",
            }
      security:
        - ApiKeyAuth: []
  /admin/fee:
    get:
      tags:
        - fee
      summary: get fee infomation
      responses:
        200:
          description: get fee infomation successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get fee infomation successfully.",
              "data": [],
            }
        400:
          description: get fee infomation fail.
          schema:
            type: object
            example: {
              "success": false,
              "message": "get fee infomation fail",
            }
      security:
        - ApiKeyAuth: []
  /admin/fee/create:
    post:
      tags:
        - fee
      summary: admin create fee information (VAT, fuel fee)
      consumes:
        - application/json
      parameters:
      - in: body
        name: info fee
        required: true
        schema:
          type: object
          properties:
            VAT:
              type: number
              required: true
              description: fee VAT
            fuel_fee:
              type: number
              required: true
              description: fuel fee
      responses:
        200:
          description: Create fee information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create fee information successfully.",
              "data": [],
            }
        400:
          description: Create fee information failed
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create fee information failed",
            }
      security:
        - ApiKeyAuth: []
  /admin/fee/update/{feeId}:
    put:
      tags:
        - "fee"
      summary: "Update fee information"
      consumes:
        - application/json
      parameters:
      - in: path
        name: feeId
        type: string
        required: true
        description: fee id to update fee
      - in: body
        name: info fee
        required: true
        schema:
          type: object
          properties:
            VAT:
              type: number
              required: true
              description: fee VAT
            fuel_fee:
              type: number
              required: true
              description: fuel fee
      responses:
        200:
          description: Update fee information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update fee information successfully.",
            }
        400:
          description: Update fee information failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Update fee information failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/fee/dele/{feeId}:
    delete:
      tags:
        - "fee"
      summary: "Delete fee information"
      consumes:
        - application/json
      parameters:
      - in: path
        name: feeId
        type: string
        required: true
        description: fee id to delete fee
      responses:
        200:
          description: Delete fee information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete fee information successfully.",
            }
        400:
          description: Delete fee information failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Delete fee information failed.",
            }
      security:
        - ApiKeyAuth: []
  /admin/about/element/banners:
    post:
      tags:
        - about
      summary: upload element banner aboutUs
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: element
        required: true
        description: element of array
        type: file
      - in: formData
        name: banners
        required: true
        description: file image
        type: file
      responses:
        200:
          description: upload element banner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": " upload element banner successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/about/topBanner:
    post:
      tags:
        - about
      summary: upload topBanner aboutUs
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: topBanner
        required: true
        description: file
        type: file
      responses:
        200:
          description: upload topBanner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "upload topBanner successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/about/midBanner:
    post:
      tags:
        - about
      summary: upload midBanner aboutUs
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: midBanner
        required: true
        description: file
        type: file
      responses:
        200:
          description: upload midBanner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "upload midBanner successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/about/licenseimg:
    post:
      tags:
        - about
      summary: upload licenseimg aboutUs
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: license_img
        required: true
        description: licenseimg
        type: file
      responses:
        200:
          description: upload license_img successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "upload license_img successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/about/appBanner:
    post:
      tags:
        - about
      summary: upload appBanner aboutUs
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: appBanner
        required: true
        description: file
        type: file
      responses:
        200:
          description: upload appBanner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "upload appBanner successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/about/bottomBanner:
    post:
      tags:
        - about
      summary: upload bottomBanner aboutUs
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: bottomBanner
        required: true
        description: file
        type: file
      responses:
        200:
          description: upload bottomBanner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "upload bottomBanner successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/about/strength:
    post:
      tags:
        - about
      summary: update aboutUs information strength
      consumes:
        - application/json
      parameters:
      - in: body
        name: about informations strength
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
      responses:
        200:
          description: set about-us information strength successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "set about-us information strength successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/strength/create:
    post:
      tags:
        - strength
      summary: "Create strength"
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: name
          description: name of strength.
          type: string  
        - in: formData
          name: sub_name
          description: sub name of strength.
          type: string 
        - in: formData
          name: detail
          description: detail of strength.
          type: string  
        - in: formData
          name: description
          description: description of strength.
          type: string 
        - in: formData
          name: link
          description: link of strength.
          type: string 
        - in: formData
          name: logo
          description: logo of strength.
          type: file     
      responses:
        200:
          description: Create strength successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create strength successfully.",
            }     
        400:
          description: Create strength failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create strength failed",
            }    
      security:
        - ApiKeyAuth: []
  /admin/strength/logo/{strengthId}:
    put:
      tags:
        - strength
      summary: "Upload strength logo by id"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: strengthId
          type: string
          required: true
          description: Id of a strength 
        - in: formData
          name: logo
          description: logo of strength.
          type: file     
      responses:
        200:
          description: Upload strength logo successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Upload strength logo successfully.",
            }     
        400:
          description: Upload strength logo failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Upload strength logo failed",
            }    
      security:
        - ApiKeyAuth: []
  /admin/strength/detail/{strengthId}:
    put:
      tags:
        - strength
      summary: update strength informations
      consumes:
        - application/json
      parameters:
      - in: path
        name: strengthId
        type: string
        required: true
        description: Id of a strength 
      - in: formData
        name: name
        description: name of strength.
        type: string  
      - in: formData
        name: sub_name
        description: sub name of strength.
        type: string 
      - in: formData
        name: detail
        description: detail of strength.
        type: string  
      - in: formData
        name: description
        description: description of strength.
        type: string 
      - in: formData
        name: link
        description: link of strength.
        type: string 
      - in: formData
        name: isPublicHomePage
        description: isPublicHomePage of strength.
        type: string 
      - in: formData
        name: isPublicAboutUs
        description: isPublicAboutUs of strength.
        type: string
      responses:
        200:
          description: set strength information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "set strength information successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/strength/{strengthId}:
    delete:
      tags: 
        - strength
      summary: "Delete a strength"
      consumes:
        - application/json
      parameters:
        - in: path
          name: strengthId
          type: string
          description: ID of a strength
          required: true
      responses:
        200:
          description: Delete strength successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Delete strength successfully.",
            }
        400:
          description: Delete strength failed
          schema:
            type: object
            example: {
                "success": "false",
                "message": "Delete strength failed.",
              }
      security:
        - ApiKeyAuth: []
  /strength:
    get:
      tags:
        - strength
      summary: get strength
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of strength in a page 
        - in: query
          name: keyword
          type: string
          description: keyword to be searched
        - in: query
          name: sortBy
          type: string
          description: sorting condition
        - in: query
          name: name
          type: string
          description: name filter
        - in: query
          name: detail
          type: string
          description: detail filter
        - in: query
          name: sub_name
          description: sub name filter
          type: string 
      responses:
        200:
          description: get strength successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get strength information successfully.",
            }
        400:
          description: Strength information is not found.
          schema:
            type: object
            example: {
              "service": false,
              "message": "Strength information is not found.",
            }
  /strength/{strengthId}:
    get:
      tags:
        - strength
      summary: get strength by id
      produces:
        - application/json
      parameters:
        - in: path
          name: strengthId
          type: string
          description: Id of a strength 
          required: true
      responses:
        200:
          description: get strength successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get strength information successfully.",
            }          
        400:
          description: strength information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "strength information is not found.",
            }
  /admin/about/searchBanner:
    post:
      tags:
        - about
      summary: upload searchBanner aboutUs
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: searchBanner
        required: true
        description: file
        type: file
      responses:
        200:
          description: upload searchBanner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "upload searchBanner successfully.",
            }
      security:
        - ApiKeyAuth: []
  /about/getSearchBanner:
    get:
      tags:
        - about
      summary: get search banner
      produces:
        - application/json
      responses:
        200:
          description: get search banner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get search banner successfully.",
            }
        400:
          description: search banner is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "search banner is not found.",
            }
  /post-office/search:
    get:
      tags:
        - "post-office"
      summary: customer search post office
      consumes:
        - application/json
      parameters:
        - in: query
          name: province
          type: string
          description: province of arrival.
        - in: query
          name: district
          type: string
          description: district of arrival.
      responses:
        200:
          description: customer search post office successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "customer search post office successfully.",
            }
        400:
          description: customer search post office is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "customer search post office is not found.",
            }
  /order/search/trackingOrder:
    get:
      tags:
        - order
      summary: customer search orders
      consumes:
        - application/json
      parameters:
        - in: query
          name: orderCode
          type: string
          description: shipping code of order
      responses:
        200:
          description: customer search orders successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "customer search orders successfully.",
            }
        400:
          description: customer search orders is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "customer search orders is not found.",
            }
      security:
        - ApiKeyAuth: []
  /shipper/tracking-shipment/:
    get:
      tags:
        - "shipper"
      summary: Take out the orders that have not been received by the shipper
      consumes:
        - application/json
      parameters:
        - in: query
          name: origin
          type: string
          required: true
          description: id of origin
        - in: query
          name: destination
          type: string
          required: true
          description: id of destination
      responses:
        200:
          description: get list order successfully.
          schema:
            type: object
            example: {
              "success": false,
              "message": "get list order successfully.",
              "data": [],
            }
        400:
          description: No orders yet
          schema:
            type: object
            example: {
             "success": false,
             "message": "No orders yet",
            }
      security:
        - ApiKeyAuth: []
  /shipper/tracking-shipment/order/{orderId}:
    get:
        tags:
          - shipper
        summary: show-order-detail for shipper
        consumes:
          - application/json
        parameters:
          - in: path
            name: orderId
            type: string
            description: 'id of order' 
            required: true
            default: 'string'
        responses:
          200:
            description: show-order-detail for shipper.
            schema:
              type: object
              example: {
                "success": true,
                "message": "show-order-detail for shipper successfully.",
                "data": []              
              }
          400:
            description: show-order-detail for shipper failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "show-order-detail for shipper failed.",
              }
        security:
        - ApiKeyAuth: []
  /shipper/tracking-shipment/order/{orderId}/:
    patch:
        tags:
          - shipper
        summary: Shipper confirmed to take the order
        consumes:
          - application/json
        parameters:
          - in: path
            name: orderId
            type: string
            description: 'id of order' 
            required: true
            default: 'string'
        responses:
          200:
            description: show-order-detail for shipper.
            schema:
              type: object
              example: {
                "success": true,
                "message": "Received order successfully.",        
              }
          400:
            description: The order has been received by another shipper.
            schema:
              type: object
              example: {
                error1: {
                  "success": false,
                  "message": "Error cant accept order",
                },
                error2: {
                  "success": false,
                  "message": "The order has been received by another shipper",
                },
              }
        security:
        - ApiKeyAuth: []
  /admin/customer/list/customers/:
    get:
        tags:
          - admin
        summary: get list customer
        consumes:
          - application/json
        parameters:
          - in: query
            name: limit
            type: number
            required: true
            description: limit of page
        responses:
          200:
            description: show-order-detail for shipper.
            schema:
              type: object
              example: {
                "success": true,
                "message": "Get list Customer success!", 
                "data": [],      
              }
          400:
            description: The order has been received by another shipper.
            schema:
              type: object
              example: {
                  "success": false,
                  "message": "No customer yet",
              }
        security:
        - ApiKeyAuth: []
  /admin/career/create:
    post:
      tags:
        - career
      summary: Admin create a career
      consumes:
        - application/json
      parameters:
      - in: body
        name: info career
        required: true
        schema:
          type: object
          properties:
            departmentId:
              type: string
              required: true
              description: title career
            title:
              type: string
              required: true
              description: title career
            applicationPosition:
              type: [string]
              description: applicationPosition career
            industry:
              type: string
              description: industry career
            position:
              type: string
              description: position career
            deadline:
              type: string
              description: deadline career
            salary:
              type: string
              description: salary career
            workingHours:
              type: string
              description: working Hours career
            addressDescription:
              type: string
              description: address Description career
            address:
              type: string
              description: address career
            benefits:
              type: [string]
              description: benefits career
            careerDescription:
              type: [string]
              description: career Description
            careerRequirements:
              type: [string]
              description: career Requirements
            perks:
              type: [string]
              description: perks career
            isHot:
              type: boolean
              description: isHot career
            isNew:
              type: boolean
              description: isNew career
      responses:
        200:
          description: Create career successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create career successfully.",
              "data": [],
            }
        400:
          description: Create career  failed
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create career  failed",
            }
      security:
        - ApiKeyAuth: []
  /admin/career/{careerId}:
    put:
      tags:
        - "career"
      summary: admin update career
      produces:
        - application/json        
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - in: path
          name: careerId
          type: string
          required: true
          description: Id of an career 
        - in: body
          name: info career
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
                required: true
                description: title career
              applicationPosition:
                type: [string]
                description: applicationPosition career
              industry:
                type: string
                description: industry career
              position:
                type: string
                description: position career
              deadline:
                type: string
                description: deadline career
              salary:
                type: string
                description: salary career
              workingHours:
                type: string
                description: working Hours career
              addressDescription:
                type: string
                description: address Description career
              address:
                type: string
                description: address career
              benefits:
                type: [string]
                description: benefits career
              careerDescription:
                type: [string]
                description: career Description
              careerRequirements:
                type: [string]
                description: career Requirements
              perks:
                type: [string]
                description: perks career
              isHot:
                type: boolean
                description: isHot career
              isNew:
                type: boolean
                description: isNew career
      responses:
        200:
          description: Update career successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update career successfully.",
            }
        400:
          description: career cannot be found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Career does not exist.",
            }
      security:
        - ApiKeyAuth: []                          
    delete:
      tags:
        - "career"
      summary: "Delete an existing career"
      produces:
        - application/json
      parameters:
        - in: path
          name: careerId
          type: string
          required: true
          description: Id of an career 
      responses:
        200:
          description: Delete career successfully.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Delete career successfully.",
            }
        400:
          description: Delete career failed.      
          schema:
            type: object
            example: {
              "success": false,
              "message": "Career does not exist.",
            }
      security:
        - ApiKeyAuth: []
  /career/isHot:
    get:
        tags:
          - career
        summary: get list career
        consumes:
          - application/json
        parameters:
          - in: query
            name: limit
            type: number
            description: limit of page
          - in: query
            name: page
            type: number
            description: page of pagination
        responses:
          200:
            description: show list isHot career for customer.
            schema:
              type: object
              example: {
                "success": true,
                "message": "Get list isHot career success!", 
                "data": [],      
              }
          400:
            description: "No career yet"
            schema:
              type: object
              example: {
                  "success": false,
                  "message": "No career yet",
              }
        security:
        - ApiKeyAuth: []
  /career/isNew:
    get:
        tags:
          - career
        summary: get list career
        consumes:
          - application/json
        parameters:
          - in: query
            name: limit
            type: number
            description: limit of page
          - in: query
            name: page
            type: number
            description: page of pagination
        responses:
          200:
            description: show list isNew career for customer.
            schema:
              type: object
              example: {
                "success": true,
                "message": "Get list isNew career success!", 
                "data": [],      
              }
          400:
            description: "No career yet"
            schema:
              type: object
              example: {
                  "success": false,
                  "message": "No career yet",
              }
        security:
        - ApiKeyAuth: []
  /career/detail/{careerId}:
    get:
        tags:
          - career
        summary: get detail career
        consumes:
          - application/json
        parameters:
          - in: path
            name: careerId
            type: string
            required: true
            description: careerId
        responses:
          200:
            description: get detail success.
            schema:
              type: object
              example: {
                "success": true,
                "message": "get detail success", 
                "data": [],      
              }
          400:
            description: "No career yet"
            schema:
              type: object
              example: {
                  "success": false,
                  "message": "No career yet",
              }
        security:
        - ApiKeyAuth: []
  /admin/career-life/topPicture:
    post:
      tags:
        - careerLife
      summary: upload topPicture career life
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: topPicture
        required: true
        description: file
        type: file
      responses:
        200:
          description: upload topPicture successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "upload topPicture successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/career-life/rightPicture:
    post:
      tags:
        - careerLife
      summary: upload rightPicture career life
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: rightPicture
        required: true
        description: file
        type: file
      responses:
        200:
          description: upload rightPicture successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "upload rightPicture successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/career-life/detailLife:
    post:
      tags:
        - careerLife
      summary: update career-life informations
      consumes:
        - multipart/form-data
      parameters:
      - in: body
        name: career-life informations
        required: true
        schema:
          type: object
          properties:
            nameLife:
              type: string
              required: true
            contentLife:
              type: string
              required: true
            descriptionLife:
              type: string
              required: true
      responses:
        200:
          description: Set career-life information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set career-life information successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/career-life/detailTeammatePortrait:
    post:
      tags:
        - careerLife
      summary: update career-life informations
      consumes:
        - multipart/form-data
      parameters:
      - in: body
        name: career-life informations
        required: true
        schema:
          type: object
          properties:
            nameTeammatePortrait:
              type: string
              required: true
            logoTeammatePortrait:
              type: file
              required: true
            teammatePortrait:
              type: string
              required: true
      responses:
        200:
          description: Set career-life information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set career-life information successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/career-life/address:
    post:
      tags:
        - careerLife
      summary: update career-life informations
      consumes:
        - multipart/form-data
      parameters:
      - in: body
        name: career-life informations
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
              required: true
            detail:
              type: string
              required: true
            logoAddress:
              type: file
              required: true
      responses:
        200:
          description: Set career-life information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set career-life information successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/career-life/info:
    post:
      tags:
        - careerLife
      summary: update career-life informations
      consumes:
        - multipart/form-data
      parameters:
      - in: body
        name: career-life informations
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
              required: true
            content:
              type: string
              required: true
            logoInfo:
              type: file
              required: true
      responses:
        200:
          description: Set career-life information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set career-life information successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/career-life/element/info:
    post:
      tags:
        - careerLife
      summary: update career-life informations element
      consumes:
        - multipart/form-data
      parameters:
      - in: body
        name: career-life informations element
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
              required: true
            content:
              type: string
              required: true
            logoInfo:
              type: file
              required: true
            element:
              type: string
              required: true
      responses:
        200:
          description: Set career-life information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set career-life information successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/career-life/bottom:
    post:
      tags:
        - careerLife
      summary: update career-life informations bottom
      consumes:
        - multipart/form-data
      parameters:
      - in: body
        name: career-life informations bottom
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
              required: true
            content:
              type: string
              required: true
            position:
              type: string
              required: true
            logo:
              type: file
              required: true
            background:
              type: file
              required: true
      responses:
        200:
          description: Set career-life information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set career-life information successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/career-life/element/bottom:
    post:
      tags:
        - careerLife
      summary: update career-life informations bottom
      consumes:
        - multipart/form-data
      parameters:
      - in: body
        name: career-life informations bottom
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
              required: true
            content:
              type: string
              required: true
            position:
              type: string
              required: true
            logo:
              type: file
              required: true
            background:
              type: file
              required: true
            element:
              type: string
              required: true
      responses:
        200:
          description: Set career-life information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set career-life information successfully.",
            }
      security:
        - ApiKeyAuth: []
  /career-life:
    get:
      tags:
        - careerLife
      summary: get careerLife information
      produces:
        - application/json
      responses:
        200:
          description: get careerLife information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get careerLife information successfully.",
            }
        400:
          description: careerLife information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "careerLife information is not found.",
            }
  /career/industry:
    get:
        tags:
          - career
        summary: get list industry
        consumes:
          - application/json
        responses:
          200:
            description: get list industry success.
            schema:
              type: object
              example: {
                "success": true,
                "message": "get list industry success", 
                "data": [],      
              }
          400:
            description: "No list industry yet"
            schema:
              type: object
              example: {
                  "success": false,
                  "message": "No list industry yet",
              }
        security:
        - ApiKeyAuth: []
  /career/provinces:
    get:
        tags:
          - career
        summary: get list provinces
        consumes:
          - application/json
        responses:
          200:
            description: get list provinces success.
            schema:
              type: object
              example: {
                "success": true,
                "message": "get list provinces success", 
                "data": [],      
              }
          400:
            description: "No list provinces yet"
            schema:
              type: object
              example: {
                  "success": false,
                  "message": "No list provinces yet",
              }
        security:
        - ApiKeyAuth: []
  /career/position:
    get:
        tags:
          - career
        summary: get list position
        consumes:
          - application/json
        responses:
          200:
            description: get list position success.
            schema:
              type: object
              example: {
                "success": true,
                "message": "get list position success", 
                "data": [],      
              }
          400:
            description: "No list position yet"
            schema:
              type: object
              example: {
                  "success": false,
                  "message": "No list position yet",
              }
        security:
        - ApiKeyAuth: []
  /admin/career/:
    get:
        tags:
          - career
        summary: get list career
        consumes:
          - application/json
        responses:
          200:
            description: get list career success.
            schema:
              type: object
              example: {
                "success": true,
                "message": "get list career success", 
                "data": [],      
              }
          400:
            description: "No list career yet"
            schema:
              type: object
              example: {
                  "success": false,
                  "message": "No list career yet",
              }
        security:
        - ApiKeyAuth: []
  /admin/warehouse/getStorekeeper:
    get:
      tags:
        - "warehouse"
      summary: get Storekeeper
      produces:
        - application/json
      responses:
        200:
          description: get Storekeeper successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get Storekeeper successful.",   
            }
        400:
          description: No Storekeeper found
          schema:
            type: object
            example: {
              "success": false,
              "message": "No Storekeeper found",
            }
  /career/:
    get:
        tags:
          - career
        summary: get all list career
        consumes:
          - application/json
        parameters:
          - in: query
            name: limit
            type: number
            description: limit of page
          - in: query
            name: page
            type: number
            description: page of pagination
        responses:
          200:
            description: show all list career for customer.
            schema:
              type: object
              example: {
                "success": true,
                "message": "Get all list isHot career success!", 
                "data": [],      
              }
          400:
            description: "No career yet"
            schema:
              type: object
              example: {
                  "success": false,
                  "message": "No career yet",
              }
        security:
        - ApiKeyAuth: []
  /express/province/:serviceType/:provinceName:
    get:
        tags:
          - service-price-list
        summary: get service price list with pdf
        consumes:
          - application/json
        parameters:
          - in: params
            name: serviceType
            type: string
            description: type of shipping service
          - in: params
            name: provinceName
            type: string
            description: Province/city name
        responses:
          200:
            description: Show pdf file the price of the selected serviceType according to the selected provinceName
          404:
            description: "No career yet"
            schema:
              type: object
              example: {
                error1: {
                  "success": false,
                  "message": "Shipping price list not found",
                },
                error2: {
                  "success": false,
                  "message": "Service type ${serviceType} not found",
                },
                error3: {
                  "success": false,
                  "message": "Service not supported for province ${provinceName} or ${provinceName} not found",
                }
              }
  /express/provinces/:serviceType:
    get:
        tags:
          - service-price-list
        summary: users filter all provinces with that service type
        consumes:
          - application/json
        parameters:
          - in: params
            name: serviceType
            type: string
            description: type of shipping service
        responses:
          200:
            description: show all provinces with that service type.
            schema:
              type: object
              example: {
                "success": true,
                "message": "Successfully", 
                "data": [],      
              }
          404:
            description: "No career yet"
            schema:
              type: object
              example: {
                error1: {
                  "success": false,
                  "message": "Shipping price list not found",
                },
                error2: {
                  "success": false,
                  "message": "Service type ${serviceType} not found",
                }
              }
  /career/department:
    get:
        tags:
          - career
        summary: get all list department
        consumes:
          - application/json
        responses:
          200:
            description: show all list department for customer.
            schema:
              type: object
              example: {
                "success": true,
                "message": "Get all list department success!", 
                "data": [],      
              }
          400:
            description: "No department yet"
            schema:
              type: object
              example: {
                  "success": false,
                  "message": "No career yet",
              }
        security:
        - ApiKeyAuth: []
  /admin/carrepair/carInfo/getInfoCar:
      get:
          tags:
            - carrepair
          summary: get info car to repair
          consumes:
            - application/json
          responses:
            200:
              description: get info car to repair successfully
              schema:
                type: object
                example: {
                  "success": true,
                  "message": "Get info car to repair success!", 
                  "data": [],      
                }
            400:
              description: "Get info car to repair failed"
              schema:
                type: object
                example: {
                    "success": false,
                    "message": "Get info car to repair failed",
                }
          security:
          - ApiKeyAuth: []
  /shipper/sync-offline-data:
    post: 
        tags: 
          - shipper
        summary: sync offline data 
        consumes: 
          - application/json
        responses:
          200:
            description: sync offline data successfully.
            schema:
              type: object
              example: {
                "success": true,
                "message": "sync offline data successfully.", 
                "data": [],      
              }
          400:
            description: Cannot find order
            schema:
              type: object
              example: {
                "success": false,
                "message": "Cannot find order.",
              }
          400:
            description: Order is not belong to shipper
            schema:
              type: object
              example: {
                "success": false,
                "message": "You are not the shipper of this order.",
              }
          400:
            description: Invalid Type of Sync Data
            schema:
              type: object
              example: {
                "success": false,
                "message": "Invalid Type.",
              }
        security:
        - ApiKeyAuth: []
  /admin/life-style/:
    post:
        tags:
          - LifeStyle
        summary: create an LifeStyle
        consumes:
        - multipart/form-data
        parameters:
        - in: formData
          name: descriptionAboutUs
          required: true
          description: description About Us
          type: array
          items:
            type: string
        - in: formData
          name: containerImage
          required: true
          description: containerImage
          type: array
          items:
            type: file
        - in: formData
          name: imageAboutUs
          required: true
          description: imageAboutUs
          type: file
        responses:
          200:
            description: New LifeStyle created successfully.
            schema:
              type: object
              example: {
                "success": true,
                "message": "New LifeStyle created successfully!", 
                "data": [],      
              }
          400:
            description: "Creating a new LifeStyle failed"
            schema:
              type: object
              example: {
                  "success": false,
                  "message": "Creating a new LifeStyle failed",
              }
        security:
        - ApiKeyAuth: []
    get: 
      tags:
        - "LifeStyle"
      summary: Get report detail of supervision incoming order 
      produces:
        - application/json
      responses:
        200: 
          description: get a list of LifeStyles
          schema:
            type: object
            example: {
              "success": true,
              "message": "get a list of LifeStyles",
              "data": []
            }
        400:
          description: No lifeStyle yet,
          schema:
            type: object
            example: {
              "success": false,
              "message": "No lifeStyle yet",
            }
      security:
      - ApiKeyAuth: []
  /admin/life-style/{id}:
    put: 
      tags:
          - LifeStyle
      summary: update an existing LifeStyle
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: lifestyleId
        - in: formData
          name: descriptionAboutUs
          required: true
          description: description About Us
          type: array
          items:
            type: string
        - in: formData
          name: containerImage
          required: true
          description: containerImage
          type: array
          items:
            type: file
        - in: formData
          name: imageAboutUs
          required: true
          description: imageAboutUs
          type: file
      responses:
          200:
            description: LifeStyle updated successfully
            schema:
              type: object
              example: {
                "success": true,
                "message": "LifeStyle updated successfully",     
              }
          400:
            description: "LifeStyle updated failed"
            schema:
              type: object
              example: {
                  "success": false,
                  "message": "LifeStyle updated failed",
              }
      security:
        - ApiKeyAuth: []
    get: 
      tags:
        - "LifeStyle"
      summary: Get report detail of supervision incoming order 
      produces:
        - application/json     
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: lifestyleId
      responses:
        200: 
          description: LifeStyle details retrieved successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "LifeStyle details retrieved successfully",
              "data": []
            }
        400:
          description: LifeStyle not found,
          schema:
            type: object
            example: {
              "success": false,
              "message": "LifeStyle not found",
            }
      security:
      - ApiKeyAuth: []
    delete: 
      tags:
        - "LifeStyle"
      summary: Delete a LifeStyle
      produces:
        - application/json     
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: lifestyleId
      responses:
        200: 
          description: LifeStyle deleted successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "LifeStyle deleted successfully",
              "data": []
            }
        400:
          description: LifeStyle not found,
          schema:
            type: object
            example: {
              "success": false,
              "message": "LifeStyle not found",
            }
      security:
      - ApiKeyAuth: [] 
  /life-style/{id}:
      get: 
        tags:
          - "LifeStyle"
        summary: Get report detail of supervision incoming order 
        produces:
          - application/json     
        parameters:
          - in: path
            name: id
            type: string
            required: true
            description: lifestyleId
        responses:
          200: 
            description: LifeStyle details retrieved successfully
            schema:
              type: object
              example: {
                "success": true,
                "message": "LifeStyle details retrieved successfully",
                "data": []
              }
          400:
            description: LifeStyle not found,
            schema:
              type: object
              example: {
                "success": false,
                "message": "LifeStyle not found",
              }
  /admin/quote/avatar/{quoteId}:
    put:
      tags:
        - quote
      summary: "update quote avatar by id"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: quoteId
          type: string
          required: true
          description: Id of a quote 
        - in: formData
          name: avatar
          description: avatar of quote.
          type: file      
      responses:
        200:
          description: Update quote avatar successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Upload quote avatar successfully.",
            }     
        400:
          description: Upload quote avatar failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Upload quote avatar failed",
            }    
      security:
        - ApiKeyAuth: []
  /admin/chat-info/leftBanner:
    post:
      tags:
        - ChatInfo
      summary: upload leftBanner chat info
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: leftBanner
        required: true
        description: file
        type: file
      responses:
        200:
          description: Upload leftBanner chat info successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Upload leftBanner chat info successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/chat-info/logoChat:
    post:
      tags:
        - ChatInfo
      summary: upload logoChat chat info
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: logoChat
        required: true
        description: file
        type: file
      responses:
        200:
          description: Upload logoChat chat info successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Upload logoChat chat info successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/chat-info/detailInfo:
    post:
      tags:
        - ChatInfo
      summary: update chat-info informations
      consumes:
        - multipart/form-data
      parameters:
      - in: body
        name: chat-info informations
        required: true
        schema:
          type: object
          properties:
            title:
              type: string
              required: true
            subject:
              type: string
              required: true
            online_service_time:
              type: string
              required: true
            greeting_chat:
              type: string
              required: true
      responses:
        200:
          description: Set chat-info information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set chat-info information successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/chat-info/rightStrength:
    post:
      tags:
        - ChatInfo
      summary: update right strength chat-info
      consumes:
        - multipart/form-data
      parameters:
      - in: body
        name: right strength chat-info
        required: true
        schema:
          type: object
          properties:
            rightStrength:
              type: string
              required: true
      responses:
        200:
          description: Set right strength chat-info successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set right strength chat-info successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/chat-info/suggestChat:
    post:
      tags:
        - ChatInfo
      summary: update suggestChat chat-info
      consumes:
        - multipart/form-data
      parameters:
      - in: body
        name: suggestChat chat-info
        required: true
        schema:
          type: object
          properties:
            suggestChat:
              type: string
              required: true
      responses:
        200:
          description: Set suggestChat chat-info successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set suggestChat chat-info successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/chat-info/hotChat:
    post:
      tags:
        - ChatInfo
      summary: update hotChat chat-info
      consumes:
        - multipart/form-data
      parameters:
      - in: body
        name: hotChat chat-info
        required: true
        schema:
          type: object
          properties:
            hotChat:
              type: string
              required: true
      responses:
        200:
          description: Set hotChat chat-info successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set hotChat chat-info successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/chat-info:
    get:
      tags:
        - ChatInfo
      summary: get ChatInfo information
      produces:
        - application/json
      responses:
        200:
          description: Get ChatInfo information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get ChatInfo information successfully.",
            }
        400:
          description: ChatInfo information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "ChatInfo information is not found.",
            }
  /chat-info:
    get:
      tags:
        - ChatInfo
      summary: get ChatInfo information
      produces:
        - application/json
      responses:
        200:
          description: Get ChatInfo information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get ChatInfo information successfully.",
            }
        400:
          description: ChatInfo information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "ChatInfo information is not found.",
            }
  /admin/social-network:
    post:
      tags:
        - SocialNetwork
      summary: Create a new social network profile
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: name
          required: true
          description: The name of the social network.
          type: string
        - in: formData
          name: link
          required: true
          description: The link to the social network profile.
          type: string
      responses:
        200:
          description: set SocialNetwork-us information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "set SocialNetwork-us information successfully.",
            }
        500:
          description: Internal Server Error
          schema:
            type: object
            example: {
              "success": false,
              "message": "Internal Server Error",
            }
      security:
        - ApiKeyAuth: []
  /admin/social-network/{socialId}:
    put:
      tags:
        - SocialNetwork
      summary: Update a social network profile by ID
      parameters:
        - in: path
          name: socialId
          required: true
          description: The ID of the social network profile to update.
          type: string
        - in: formData
          name: name
          required: true
          description: The updated name of the social network.
          type: string
        - in: formData
          name: link
          required: true
          description: The updated link to the social network profile.
          type: string
      responses:
        200:
          description: Update SocialNetwork successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update SocialNetwork successfully.",
            } 
        400:
          description: SocialNetwork does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "SocialNetwork does not exist.",
            } 
        500:
          description: Internal Server Error
          schema:
            type: object
            example: {
              "success": false,
              "message": "Internal Server Error",
            }
      security:
        - ApiKeyAuth: []
  /admin/social-network/logo/{socialId}:
    put:
      tags:
        - SocialNetwork
      summary: Update the logo of a social network profile by ID
      description: Update the logo of a social network profile by providing its ID.
      parameters:
        - in: path
          name: socialId
          required: true
          description: The ID of the social network profile to update the logo.
          type: string
        - in: formData
          name: logo
          required: true
          description: The updated logo image of the social network.
          type: file
      responses:
        200:
          description: set SocialNetwork information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "set SocialNetwork information successfully",
            }
        500:
          description: Internal Server Error
          schema:
            type: object
            example: {
              "success": false,
              "message": "Internal Server Error",
            }
      security:
        - ApiKeyAuth: []
  /admin/social-network/delete/{socialId}:
    delete:
      tags:
        - SocialNetwork
      summary: Delete a social network profile by ID
      description: Delete a social network profile by providing its ID.
      parameters:
        - in: path
          name: socialId
          required: true
          description: The ID of the social network profile to delete.
          type: string
      responses:
        200:
          description: Delete SocialNetwork successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete SocialNetwork successfully.",
            }
        400:
          description: SocialNetwork does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "SocialNetwork does not exist.",
            }
        500:
          description: Internal Server Error
          schema:
            type: object
            example: {
              "success": false,
              "message": "Internal Server Error",
            }
      security:
        - ApiKeyAuth: []
  /social-network:
    get:
      tags:
        - SocialNetwork
      summary: Get all social network 
      description: Get all social network
      responses:
        200:
          description: List of social network profiles retrieved successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "OK",
              "data":[],
            }
        500:
          description: Internal Server Error
          schema:
            type: object
            example: {
              "success": false,
              "message": "Internal Server Error",
            }
  /admin/career-life/element/info:
    delete:
      tags:
        - careerLife
      summary: Delete career-life informations element
      consumes:
        - multipart/form-data
      parameters:
      - in: body
        name: career-life informations element
        required: true
        schema:
          type: object
          properties:
            element:
              type: string
              required: true
      responses:
        200:
          description: Delete element career-life information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete element career-life information successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/career-life/element/bottom:
    delete:
      tags:
        - careerLife
      summary: Delete career-life informations bottom
      consumes:
        - multipart/form-data
      parameters:
      - in: body
        name: career-life informations bottom
        required: true
        schema:
          type: object
          properties:
            element:
              type: string
              required: true
      responses:
        200:
          description: Delete element career-life information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete element career-life information successfully.",
            }
      security:
        - ApiKeyAuth: []
  /admin/assign-driver/car-fleets:
    get: 
      tags:
        - assign-driver
      summary: get all car_fleets team belong to admin
      responses:
        400:
          description: it is not admin
          schema:
            type: object
            example: {
              "success": false,
              "message": "you are not admin",
            }
        400:
          description: do not have any car fleet team
          schema:
            type: object
            example: {
              "success": false,
              "message":  "you do not have any car fleet",
            }
        200:
          description: get all car fleets successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "OK",
              "data":[],
            }
      security:
        - ApiKeyAuth: []
  /admin/assign-driver/team-member-and-cars:
    post: 
      tags:
        - assign-driver
      summary: get all team member and car belong to car fleet
      responses:
        400:
          description: it is not admin
          schema:
            type: object
            example: {
              "success": false,
              "message": "you are not admin",
            }
        400:
          description: no car fleet provided
          schema:
            type: object
            example: {
              "success": false,
              "message": "no car fleet provided",
            }
        400:
          description: there is no driver in this team
          schema:
            type: object
            example: {
              "success": false,
              "message":  "there is no driver in this car-fleets",
            }
        200:
          description: get all team member successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "OK",
              "data":[],
            }
      security:
        - ApiKeyAuth: []
  /admin/assign-driver/create-assignment:
    post: 
      tags:
        - assign-driver
      summary: create assignment to driver
      responses:
        400:
          description: it is not admin
          schema:
            type: object
            example: {
              "success": false,
              "message": "you are not admin",
            }
        400:
          description: no staff id provided
          schema:
            type: object
            example: {
              "success": false,
              "message": "no staff id provided",
            }
        400:
          description: no car provided
          schema:
            type: object
            example: {
              "success": false,
              "message": "no car provided",
            }
        400:
          description: no time provided
          schema:
            type: object
            example: {
              "success": false,
              "message": "no working time provided",
            }
        400:
          description: Invalid Time
          schema:
            type: object
            example: {
              "success": false,
              "message": "Invalid Time",
            }
        400:
          description: no warehouse provided
          schema:
            type: object
            example: {
              "success": false,
              "message": "no warehouse provided",
            }
        400:
          description: Invalid Task Type
          schema:
            type: object
            example: {
              "success": false,
              "message": "Invalid Task Type",
            }
        400:
          description: Can not find staff
          schema:
            type: object
            example: {
              "success": false,
              "message": "can not find staff",
            }
        400:
          description: Can not find car
          schema:
            type: object
            example: {
              "success": false,
              "message": "can not find car",
            }
        400:
          description: Can not find warehouse
          schema:
            type: object
            example: {
              "success": false,
              "message": "can not find warehouse",
            }
        400:
          description: car does not belong to car fleet
          schema:
            type: object
            example: {
              "success": false,
              "message": "this car does not belong to car_fleet team.",
            }
        200:
          description: create driver task successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "create driver assignment successfull.",
              "data":[],
            }
      security:
        - ApiKeyAuth: []  
  /strength/public-homepage:
    get:
      tags:
        - "strength"
      summary: get all strengths public in homepage
      produces:
        - application/json        
      consumes:
        - application/json
        - multipart/form-data
      responses:
        200:
          description: Get all public strengths successfully!
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get all public strengths successfully!",
            }
        400:
          description: No strengths are public in homepage!!!
          schema:
            type: object
            example: {
              "success": false,
              "message": "No strengths are public in homepage!!!",
            }
  /strength/public-about-us:
    get:
      tags:
        - "strength"
      summary: get all strengths public in homepage
      produces:
        - application/json        
      consumes:
        - application/json
        - multipart/form-data
      responses:
        200:
          description: Get all public strengths successfully!
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get all public strengths successfully!",
            }
        400:
          description: No strengths are public in about us page!!!
          schema:
            type: object
            example: {
              "success": false,
              "message": "No strengths are public in about us page!!!",
            }
  /api/admin/car-task:
    post:
      tags: 
        - "admin"
      summary: car task and fuel consumption
      produces:
        - application/json        
      consumes:
        - application/json
        - multipart/form-data
      responses:
        200:
          description: Create car task successfully!
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create car task successfully!",
              "data": [],
            }
        400:
          description: not admin
          schema:
            type: object
            example: {
              "success": false,
              "message": "you are not admin",
            }
        400:
          description: No appearing time
          schema:
            type: object
            example: {
              "success": false,
              "message": "no appearing time provided",
            }
        400:
          description: Invalid appearing time
          schema:
            type: object
            example: {
              "success": false,
              "message": "Invalid appearing time",
            }
        400:
          description: No appearing location
          schema:
            type: object
            example: {
              "success": false,
              "message": "no appearing location provided",
            }
        400:
          description: No driver id provided
          schema:
            type: object
            example: {
              "success": false,
              "message": "no driver id provided",
            }
        400:
          description: Cannot find driver
          schema:
            type: object
            example: {
              "success": false,
              "message": "Can not find this driver",
            }
      security:
        - ApiKeyAuth: [] 
securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    in: headers
    name: x-access-token
